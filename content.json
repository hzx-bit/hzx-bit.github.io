{"meta":{"title":"hzx's blog","subtitle":"","description":"","author":"huangzhixin","url":"http://example.com","root":"/"},"pages":[{"title":"所有分类","date":"2024-09-15T09:45:48.795Z","updated":"2024-09-15T09:45:48.795Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"archives","date":"2024-09-15T09:40:25.000Z","updated":"2024-09-15T09:40:25.154Z","comments":true,"path":"archives/index.html","permalink":"http://example.com/archives/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2024-09-15T09:46:14.266Z","updated":"2024-09-15T09:46:14.266Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"","date":"2024-09-15T09:45:11.683Z","updated":"2024-09-15T09:45:11.683Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"下面写关于自己的内容"}],"posts":[{"title":"中秋","slug":"中秋","date":"2024-09-17T12:20:02.000Z","updated":"2024-09-17T12:27:27.622Z","comments":true,"path":"2024/09/17/中秋/","permalink":"http://example.com/2024/09/17/%E4%B8%AD%E7%A7%8B/","excerpt":"","text":"但愿人长久，千里共婵娟独在异乡为异客，每逢佳节倍思亲 感谢老姐拍来老家的月亮（合肥刮台风看不到）","categories":[{"name":"随笔","slug":"随笔","permalink":"http://example.com/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[]},{"title":"react-jike","slug":"react-jike","date":"2024-09-16T04:05:55.000Z","updated":"2024-09-17T08:58:27.038Z","comments":true,"path":"2024/09/16/react-jike/","permalink":"http://example.com/2024/09/16/react-jike/","excerpt":"","text":"目录结构 文件夹 作用 apis 接口 assets 静态资源 components 通用组件 pages 页面级组件 router 路由Router store Redux状态 utils 工具函数 安装依赖12npm i sass @craco/craco -Dnpm i antd react-router-dom axios @reduxjs/toolkit react-redux normalize.css 样式reset12345678910111213//index.jsimport &#x27;normalize.css&#x27;//index.scsshtml,body &#123; margin: 0; height: 100%;&#125;#root &#123; height: 100%;&#125; 配置别名路径 项目根目录创建craco.config.js，添加路径解析配置 123456789const path = require(&#x27;path&#x27;)module.exports = &#123; webpack:&#123; alias:&#123; &#x27;@&#x27;:path.resolve(__dirname,&#x27;src&#x27;) &#125; &#125;&#125; package.json中配置启动和打包配置 123456&quot;scripts&quot;: &#123; &quot;start&quot;: &quot;craco start&quot;, &quot;build&quot;: &quot;craco build&quot;, &quot;test&quot;: &quot;craco test&quot;, &quot;eject&quot;: &quot;react-scripts eject&quot; &#125;, 根目录下创建jsconfig.json 12345678910&#123; &quot;compilerOptions&quot;:&#123; &quot;baseUrl&quot;: &quot;./&quot;, &quot;paths&quot;:&#123; &quot;@/*&quot;:[ &quot;src/*&quot; ] &#125; &#125;&#125; 配置路由 page文件夹放置路由组件&lt;Outlet/&gt;,或navigate&#x3D;useNavigate()，调用navigate()函数 router文件夹配置路由 createBrowserRouter index.js 提供路由 &lt;RouterProvider router=&#123;router&#125;/&gt; 获取parameter 123456789navigate(&#x27;/article?id=1001&#x27;)const [params] = useSearchParams()let id = params.get(&#x27;id&#x27;)path:&#x27;/article/:id/:name&#x27;navigate(&#x27;/article/1001/jack&#x27;)const params = useParams()let id = params.id 关联远程github项目git remote add origin https://github.com/hzx-bit/react-jike.git 封装request请求模块 在utils文件夹中新建request.js文件 12345678910111213141516171819202122232425262728293031323334353637383940//axios封装处理import axios from &quot;axios&quot;;//1.根域名配置//2.超时时间//3.请求拦截器 响应拦截器const request = axios.create(&#123; baseURL: &#x27;http://geek.itheima.net/v1_0&#x27;, timeout: 5000&#125;)// 添加请求拦截器//在请求发送之前 做拦截 处理参数request.interceptors.request.use((config)=&gt; &#123; const token = getToken() if(token)&#123; config.headers.Authorization = `Bearer $&#123;token&#125;` &#125; return config &#125;, (error)=&gt; &#123; return Promise.reject(error)&#125;)// 添加响应拦截器request.interceptors.response.use((response)=&gt; &#123; // 2xx 范围内的状态码都会触发该函数。 // 对响应数据做点什么 return response.data &#125;, (error)=&gt; &#123; // 超出 2xx 范围的状态码都会触发该函数。 // 对响应错误做点什么 //监控401 token失效 if(error.response.status === 401)&#123; removeToken() router.navigate(&#x27;/login&#x27;) window.location.reload() &#125; return Promise.reject(error)&#125;)export &#123;request&#125; 在utils文件夹中新建index.js文件，统一中转工具模块函数 1234import &#123; request &#125; from &quot;./request&quot;;export&#123; request&#125; 使用Redux管理token12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152//token.jsconst TOKENKEY = &#x27;token_key&#x27;function setToken(token)&#123; localStorage.setItem(TOKENKEY,token)&#125;function getToken()&#123; return localStorage.getItem(TOKENKEY)&#125;function removeToken()&#123; localStorage.removeItem(TOKENKEY)&#125;export&#123; setToken, getToken, removeToken&#125;//user.js//和用户相关的状态管理import &#123; request &#125; from &quot;@/utils&quot;;import &#123; createSlice &#125; from &quot;@reduxjs/toolkit&quot;;import &#123; setToken as _setToken,getToken &#125; from &quot;@/utils&quot;;const userStore = createSlice(&#123; name:&#x27;user&#x27;, initialState:&#123; token:getToken()||&#x27;&#x27; &#125;, reducers:&#123; setToken(state,action)&#123; state.token = action.payload _setToken(action.payload) &#125; &#125;&#125;)//解构出actionCreaterconst &#123;setToken&#125; = userStore.actionsconst reducer = userStore.reducerconst fetchLogin = (loginForm)=&gt;&#123; return async(dispatch)=&gt;&#123; const res = await request.post(&#x27;/authorizations&#x27;,loginForm) dispatch(setToken(res.data.token)) &#125;&#125;export &#123;fetchLogin&#125;export default reducer 根据Token控制路由跳转123456789101112131415161718192021//AuthRoute.jsimport &#123; getToken &#125; from &quot;@/utils&quot;import &#123; Navigate &#125; from &quot;react-router-dom&quot;function AuthRoute(&#123;children&#125;)&#123; const token = getToken() if(token)&#123; return &lt;&gt;&#123;children&#125;&lt;/&gt; &#125; else return &lt;Navigate to=&#123;&#x27;/login&#x27;&#125; replace/&gt;&#125;export default AuthRoute//配置router&#123; path:&#x27;/&#x27;, element:&lt;AuthRoute&gt;&lt;Layout/&gt;&lt;/AuthRoute&gt;&#125; echartsnpm i echarts 123456789101112131415161718192021222324252627282930313233343536373839import * as echarts from &#x27;echarts&#x27;import &#123; useEffect, useRef &#125; from &#x27;react&#x27;const Home = ()=&gt;&#123; const chartRef = useRef(null) useEffect(()=&gt;&#123; //1. 获取渲染图表的dom节点 const chartDom = chartRef.current //2. 图表初始化生成图表实例对象 const myChart = echarts.init(chartDom) //3. 准备图表参数 const option = &#123; xAxis: &#123; type: &#x27;category&#x27;, data: [&#x27;Vue&#x27;, &#x27;React&#x27;, &#x27;Angular&#x27;] &#125;, yAxis: &#123; type: &#x27;value&#x27; &#125;, series: [ &#123; data: [10,40,70], type: &#x27;bar&#x27; &#125; ] &#125;; //使用图表参数完成图表渲染 option &amp;&amp; myChart.setOption(option); &#125;,[]) return ( &lt;div&gt; //确保节点具有宽高 &lt;div ref=&#123;chartRef&#125; style=&#123;&#123;width:&#x27;500px&#x27;,height:&#x27;400px&#x27;&#125;&#125;&gt;&lt;/div&gt; &lt;/div&gt; ) apis文件夹封装函数1234567891011121314151617181920212223//user.js//用户相关的所有请求const &#123; request &#125; = require(&quot;@/utils&quot;);//1. 用户登录function loginAPI(formData)&#123; return request(&#123; url:&#x27;/authorizations&#x27;, method:&#x27;POST&#x27;, data:formData &#125;)&#125;function getProfileAPI()&#123; return request(&#123; url:&#x27;/user/profile&#x27;, method:&#x27;GET&#x27; &#125;)&#125;export &#123;loginAPI,getProfileAPI&#125; 富文本编辑器npm i &#x72;&#x65;&#97;&#99;&#116;&#x2d;&#113;&#x75;&#105;&#108;&#108;&#x40;&#x32;&#46;&#x30;&#x2e;&#x30;&#45;&#98;&#x65;&#x74;&#x61;&#46;&#50; 123456789101112131415161718192021222324import ReactQuill from &#x27;react-quill&#x27;import &#x27;react-quill/dist/quill.snow.css&#x27;const Publish = () =&gt; &#123; return ( // ... &lt;Form labelCol=&#123;&#123; span: 4 &#125;&#125; wrapperCol=&#123;&#123; span: 16 &#125;&#125; &gt; &lt;Form.Item label=&quot;内容&quot; name=&quot;content&quot; rules=&#123;[&#123; required: true, message: &#x27;请输入文章内容&#x27; &#125;]&#125; &gt; &lt;ReactQuill className=&quot;publish-quill&quot; theme=&quot;snow&quot; placeholder=&quot;请输入文章内容&quot; /&gt; &lt;/Form.Item&gt; &lt;/Form&gt; )&#125;","categories":[{"name":"项目","slug":"项目","permalink":"http://example.com/categories/%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"react","slug":"react","permalink":"http://example.com/tags/react/"}]},{"title":"react","slug":"react","date":"2024-09-16T02:24:16.000Z","updated":"2024-09-16T07:05:44.590Z","comments":true,"path":"2024/09/16/react/","permalink":"http://example.com/2024/09/16/react/","excerpt":"","text":"跨域代理配置 npm install http-proxy-middleware –save npm install axios 新建setupProxy.js文件 123456789101112const &#123; createProxyMiddleware &#125; = require(&#x27;http-proxy-middleware&#x27;); module.exports = function (app) &#123; app.use( &#x27;/api1&#x27;, createProxyMiddleware(&#123; target: &#x27;http://localhost:5000&#x27;, changeOrigin: true, pathRewrite:&#123;&#x27;^/api1&#x27;:&#x27;&#x27;&#125; &#125;) );&#125;; 发布订阅npm install pubsub-js –save 123456import PubSub from &#x27;pubsub-js&#x27;//引入PubSub.publish(&#x27;atguigu&#x27;,&#123;isFirst:false,isLoading:true&#125;)//发布this.token = PubSub.subscribe(&#x27;atguigu&#x27;,(_,data)=&gt;&#123; this.setState(data); &#125;)//订阅PubSub.unsubscribe(this.token);//取消订阅 fetch123456789async()=&gt;&#123; try&#123; const response = await fetch(`/api1/search/user2?q=$&#123;KeyWord&#125;`); const data = await response.json(); console.log(data); &#125;catch(error)&#123; console.log(&#x27;请求出错&#x27;,error); &#125;&#125; lodash（排序）12import _ from &#x27;lodash&#x27;_.orderBy(list,&#x27;key&#x27;,&#x27;desc&#x27;); classNames（高亮切换）123import classNames from &#x27;classnames&#x27;&lt;className=&#123;classNames(&#x27;normal-style&#x27;,&#123;&#x27;active&#x27;:type===item.type&#125;)&#125;&gt;&lt;className=&#123;classNames(&#x27;normal-style&#x27;,type===item.type&amp;&amp;&#x27;active&#x27;)&#125;&gt; uuid12import &#123; v4 as uuidv4 &#125; from &#x27;uuid&#x27;;uuidv4(); dayjs12import dayjs from &#x27;dayjs&#x27;dayjs().format(); useRef123456789import &#123;useRef&#125; from &#x27;react&#x27;const inputRef = useRef(null);&lt;input type=&quot;text&quot; ref=&#123;inputRef&#125;/&gt;inputRef.current//拿到节点 跨级传递信息123456import &#123;createContext,useContext&#125;const MsgContext = createContext()&lt;MsgContext.Provider value=&#123;msg&#125;&gt; &lt;Component/&gt;&lt;/MsgContext.Provider&gt;const msg = useContext(MsgContext); useEffect 无参：初始和更新 空数组：初始 依赖项：初始和依赖项发生变化 返回的函数在组件销毁时调用 1234567891011121314151617import &#123;useEffect,useState&#125; from &#x27;react&#x27;const URL=&#x27;http://geek.itheima.net/v1_0/channels&#x27;const [list, setList] = useState([]); useEffect(()=&gt;&#123; async function getList() &#123; const res =await fetch(URL); const jsonRes =await res.json(); setList(jsonRes.data.channels); &#125; getList(); const timer = setInterval(()=&gt;&#123; console.log(&#x27;............&#x27;) &#125;,1000) return ()=&gt;&#123; clearInterval(timer) &#125; &#125;,[]); json-server npm install json-server 根目录下新建db.json 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&#123; &quot;posts&quot;: [ &#123; &quot;id&quot;: 1, &quot;title&quot;: &quot;json-server&quot;, &quot;author&quot;: &quot;typicode&quot; &#125; ], &quot;comments&quot;: [ &#123; &quot;id&quot;: 1, &quot;body&quot;: &quot;some comment&quot;, &quot;postId&quot;: 1 &#125; ], &quot;profile&quot;: &#123; &quot;name&quot;: &quot;typicode&quot; &#125;, &quot;list&quot;:[ &#123; &quot;rpid&quot;: 3, &quot;user&quot;: &#123; &quot;uid&quot;: &quot;13258165&quot;, &quot;avatar&quot;: &quot;https://tse3-mm.cn.bing.net/th/id/OIP-C.FY7sfLpXX6K8x4SfSxFA0gHaHa?w=200&amp;h=199&amp;c=7&amp;r=0&amp;o=5&amp;dpr=2&amp;pid=1.7&quot;, &quot;uname&quot;: &quot;周杰伦&quot; &#125;, &quot;content&quot;: &quot;哎哟，不错哦&quot;, &quot;ctime&quot;: &quot;10-18 08:15&quot;, &quot;like&quot;: 99 &#125;, &#123; &quot;rpid&quot;: 2, &quot;user&quot;: &#123; &quot;uid&quot;: &quot;36080105&quot;, &quot;avatar&quot;: &quot;https://tse4-mm.cn.bing.net/th/id/OIP-C.B7PjPsZql8BH1LLnLZawvgAAAA?w=195&amp;h=195&amp;c=7&amp;r=0&amp;o=5&amp;dpr=2&amp;pid=1.7&quot;, &quot;uname&quot;: &quot;许嵩&quot; &#125;, &quot;content&quot;: &quot;我寻你千百度 日出到迟暮&quot;, &quot;ctime&quot;: &quot;11-13 11:29&quot;, &quot;like&quot;: 88 &#125;, &#123; &quot;rpid&quot;: 1, &quot;user&quot;: &#123; &quot;uid&quot;: &quot;30009257&quot;, &quot;avatar&quot;: &quot;https://tse3-mm.cn.bing.net/th/id/OIP-C.FY7sfLpXX6K8x4SfSxFA0gHaHa?w=200&amp;h=199&amp;c=7&amp;r=0&amp;o=5&amp;dpr=2&amp;pid=1.7&quot;, &quot;uname&quot;: &quot;黑马前端&quot; &#125;, &quot;content&quot;: &quot;学前端就来黑马&quot;, &quot;ctime&quot;: &quot;10-19 09:00&quot;, &quot;like&quot;: 66 &#125; ]&#125; package.json 配置 1&quot;serve&quot;: &quot;json-server db.json --port 3004&quot; npm run serve Redux npm i @reduxjs&#x2F;toolkit react-redux Store（仓库）： Store 是应用程序状态的中央存储库。它包含了整个应用程序的状态树，即一个 JavaScript 对象。Redux 规定了应用程序状态只能通过 Store 来管理和修改，确保了状态的单一数据源。通过 createStore 函数来创建 Store。 Action（动作）： Action 是描述发生了什么事件的普通 JavaScript 对象。它们是将数据从应用程序传递到 Store 的唯一方式。每个 Action 都必须包含一个 type 属性，表示动作的类型，以及可选的 payload 属性，用于传递数据。Action 只用于描述事件，不进行状态的修改。 Reducer（归纳器）： Reducer 是一个纯函数，用于定义应用程序状态的修改方式。Reducer 接收当前状态和一个 Action，根据 Action 的类型来返回一个新的状态。Redux 应用程序通常包含多个 Reducer，每个 Reducer 负责管理状态树的一部分。Reducer 应当保持纯净，不应该产生副作用。 Dispatch（分发）： Dispatch 是一个函数，用于将 Action 发送到 Store，以便触发状态的修改。当组件需要修改应用程序的状态时，它会创建一个 Action 并将其分发到 Store。Dispatch 将 Action 发送给 Reducer，Reducer 根据 Action 的类型来更新状态。 Middleware（中间件）： Middleware 是 Redux 的一个扩展点，用于在 Action 发送到 Reducer 之前或之后执行额外的逻辑。例如，可以使用 Middleware 来处理异步操作、记录日志、路由导航等。Redux 提供了一些内置的 Middleware，也可以编写自定义 Middleware。 Selectors（选择器）： 选择器是用于从应用程序状态中提取数据的函数。它们可以帮助组件获取所需的状态，同时封装了状态的结构和访问方式。Selectors 有助于减少组件对状态的直接依赖，提高代码的可维护性。 在modules文件夹下创建不同的store切片，每个store有自己的name、initialState和reducers，reducers有管理状态的方法（与actions同名）。从store中解构出actions和reducer并导出 在index.js中导入reducer，配置store中的reducer &lt;Provider store=&#123;store&#125;&gt;包裹根节点 在App.js中用useSelector取出数据，用useDispatch产生dispatch函数，导入actions，需要时调用dispatch（action) antd-mobile npm install antd-mobile Ant Design Mobile sass npm i -D sass","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"react","slug":"react","permalink":"http://example.com/tags/react/"}]},{"title":"landscape","slug":"landscape","date":"2024-09-15T13:50:48.000Z","updated":"2024-09-16T02:32:03.725Z","comments":true,"path":"2024/09/15/landscape/","permalink":"http://example.com/2024/09/15/landscape/","excerpt":"","text":"","categories":[{"name":"照片","slug":"照片","permalink":"http://example.com/categories/%E7%85%A7%E7%89%87/"}],"tags":[{"name":"风景","slug":"风景","permalink":"http://example.com/tags/%E9%A3%8E%E6%99%AF/"}]},{"title":"我的第一篇博客","slug":"myFirstBlog","date":"2024-09-14T16:00:00.000Z","updated":"2024-09-15T10:22:39.218Z","comments":true,"path":"2024/09/15/myFirstBlog/","permalink":"http://example.com/2024/09/15/myFirstBlog/","excerpt":"","text":"2024.9.15,重新搭建博客网站，用来记录日常和学习笔记。。。","categories":[{"name":"随笔","slug":"随笔","permalink":"http://example.com/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[]}],"categories":[{"name":"随笔","slug":"随笔","permalink":"http://example.com/categories/%E9%9A%8F%E7%AC%94/"},{"name":"项目","slug":"项目","permalink":"http://example.com/categories/%E9%A1%B9%E7%9B%AE/"},{"name":"学习笔记","slug":"学习笔记","permalink":"http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"照片","slug":"照片","permalink":"http://example.com/categories/%E7%85%A7%E7%89%87/"}],"tags":[{"name":"react","slug":"react","permalink":"http://example.com/tags/react/"},{"name":"风景","slug":"风景","permalink":"http://example.com/tags/%E9%A3%8E%E6%99%AF/"}]}