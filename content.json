{"meta":{"title":"hzx's blog","subtitle":"","description":"","author":"huangzhixin","url":"http://example.com","root":"/"},"pages":[{"title":"所有分类","date":"2024-09-15T09:45:48.795Z","updated":"2024-09-15T09:45:48.795Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"archives","date":"2024-09-15T09:40:25.000Z","updated":"2024-09-15T09:40:25.154Z","comments":true,"path":"archives/index.html","permalink":"http://example.com/archives/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2024-09-15T09:46:14.266Z","updated":"2024-09-15T09:46:14.266Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"","date":"2024-09-15T09:45:11.683Z","updated":"2024-09-15T09:45:11.683Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"下面写关于自己的内容"}],"posts":[{"title":"计算机网络","slug":"计算机网络","date":"2025-02-13T06:49:08.000Z","updated":"2025-02-13T07:05:15.693Z","comments":true,"path":"2025/02/13/计算机网络/","permalink":"http://example.com/2025/02/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/","excerpt":"","text":"OSI参考模型从下往上分别是物理层，数据链路层，网络层，传输层，会话层，表示层和应用层。其中物理层在通信信道中传输原始比特流。数据链路层进行物理寻址，并且将原始比特流转化为逻辑链路。网络层进行路由选择和分组转发。传输层建立端到端的数据链接。会话层在用户间建立和管理会话，表示层进行数据格式转化和数据加密。应用层为应用程序提供服务。","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}]},{"title":"围城","slug":"围城","date":"2025-02-08T05:11:43.000Z","updated":"2025-02-08T07:10:55.852Z","comments":true,"path":"2025/02/08/围城/","permalink":"http://example.com/2025/02/08/%E5%9B%B4%E5%9F%8E/","excerpt":"","text":"女人原是天生的政治动物。虚虚实实，以退为进，这些政治手腕，女人生下来全有。……女人不必学政治，而现在的政治家要成功，都得学女人。政治舞台上的戏剧全是反串。 蛋已经下了，就不要去问母鸡是怎么下的。 经过长期苦旅而彼此不讨厌的人,才可以结交作朋友。朋友如此，伴侣就更需要这样了! 老实说，不管你跟谁结婚，结婚以后，你总发现你娶的不是原来的人，换了另外一个。早知道这样，结婚以前那种追求、恋爱等等，全可以剩掉。谈恋爱的时候，双方本相全收敛起来，到结婚还没有彼此认清，倒是老式婚姻干脆，索性结婚以前，谁也不认得谁。 爱情多半是不成功的，要么苦于终成眷属的厌倦，要么苦于未能终成眷属的悲哀。 结婚仿佛被围困的城堡，城外的人想冲出去，城里的人想逃出来。 要人知道自己有个秘密，而不让人知道是个什么秘密，等他们问，要他们猜，这是人性的虚荣。 假使订婚戒指是落入圈套的象征，钮扣也是扣住不放的预兆。 这一张文凭仿佛有亚当夏娃下身那片树叶的功用，可以遮羞包丑；小小一张方纸能把一个人的空疏愚笨寡陋都掩盖起来。 自己人之间，什么臭架子、坏脾气都行；笑容愈亲密，礼貌愈周到，彼此的猜忌或怨恨愈深。……在吵架的时候，先开口的未必占上风，后闭口才算胜利。 女人有女人的聪明，轻盈活泼得跟她的举动一样。比了这种聪明，才学不过是沉淀渣滓。说女人有才学，就仿佛赞美一朵花，说它在天平上称起来有白菜番薯的斤两。真聪明的女人决不用功要做成才女，她只巧妙的偷懒。 真正想一个人，记挂着他，希望跟他接近，这少得很。人事太忙了，也许我们全神贯注，无间断地怀念一个人。我们一生对于最亲爱的人的想念，加起来恐怕不到一点钟，此外不过是念头在他身上瞥过，想到而已。 天下只有两种人。比如一串葡萄到手，一种人挑最好的先吃，另一种人把最好的留到最后吃。照例第一种人应该乐观，因为他每吃一颗都是吃剩的葡萄里最好的;第二种人应该悲观，因为他每吃一颗都是吃剩的葡萄里最坏的。不过事实却适得其反，缘故是第二种人还有希望，第一种人只有回忆。 只有懂幸福的人才懂得进退一样精彩 流言这东西，比流感蔓延的速度更快，比流星所蕴含的能量更巨大，比流氓更具有恶意，比流产更能让人心力憔悴。 天下就没有偶然，那不过是化了妆的、戴了面具的必然。 对于丑人，细看是一种残忍——除非他是坏人，你要惩罚他。 上帝会懊悔没在人身上添一条能摇的狗尾巴，因此减低了不知多少表情的效果。 泛黄的照片失了真，承诺像刀伤了人。 结婚仿佛金漆的鸟笼，笼子外面的鸟想住进去，笼内的鸟想飞出去，所以结而离，离而结，没有了局 不受教育的人，因为不识字，上人的当，受教育的人，因为识了字，上印刷品的当。 我们对采摘不到的葡萄，不但想象它酸，也很可能想象它是分外地甜。 苏文纨跟新楣的长期认识并不会日积月累得成为恋爱，好比冬季每天的气候罢，你没法把今天的温度加在昨天的上面，好等明天积成个和暖的春日。 结婚无需太伟大的爱情，彼此不讨厌已经够结婚资本了。 事实上，一个人的缺点正像猴子的尾巴，猴子蹲在地上的时候，尾巴是看不见的，直到他向树上爬，就把后部供大众瞻仰，可是这红臀长尾巴本来就有，并非地位爬高了的新标识。 同行最不宜结婚，因为彼此是行家，谁也哄不倒谁，丈夫不会莫测高深地崇拜太太，太太也不会盲目地崇拜丈夫，婚姻的基础就不牢靠。 西洋赶驴子的人，每逢驴子不肯走，鞭子没有用，就把一串胡萝卜挂在驴子眼睛之前、唇吻之上。这笨驴子以为走前一步，萝卜就能到嘴，于是一步再一步继续向前，嘴愈要咬，脚愈要赶，不知不觉中又走了一站。那时候它是否吃得到这串萝卜，得看驴夫的高兴。一切机关里，上司驾驭下属，全用这种技巧。 我们在社会上一切说话全像戏院子的入场券，一边印着“过期作废”，可是那一边又不注明什么日期，随我们的便可以提早或延迟。 我发现拍马屁跟恋爱一样，不容许有第三者冷眼旁观。咱们以后恭维人起来，得小心旁边没有其他的人。","categories":[{"name":"文摘","slug":"文摘","permalink":"http://example.com/categories/%E6%96%87%E6%91%98/"}],"tags":[{"name":"《围城》","slug":"《围城》","permalink":"http://example.com/tags/%E3%80%8A%E5%9B%B4%E5%9F%8E%E3%80%8B/"}]},{"title":"leetcode","slug":"leetcode","date":"2025-01-03T09:24:22.000Z","updated":"2025-01-09T14:17:52.100Z","comments":true,"path":"2025/01/03/leetcode/","permalink":"http://example.com/2025/01/03/leetcode/","excerpt":"","text":"leetcode刷题笔记202. 快乐数 - 力扣（LeetCode） 123456789//错误代码var getHappy = function(n)&#123; let ans = 0; while(n)&#123; ans+= (n%10) ** 2; n/=10; &#125; return ans;&#125; 错误原因 在 JavaScript 中，使用&#x2F;运算符进行除法运算时（如n &#x2F;&#x3D; 10这个操作），如果n原本是整数类型，这样的除法操作会将结果转换为浮点数类型。例如，当n初始值为19，第一次执行n &#x2F;&#x3D; 10后，n会变成1.9，而后续在getHappy函数里期望对每一位数字进行处理（通过n % 10获取个位数字等操作），浮点数的取余等操作的行为和预期处理整数时不一致，并且不符合题目本意（通常是按整数的每一位来处理）。要解决这个问题，应该使用Math.floor（向下取整）或者Math.trunc（去除小数部分）等方法来确保n在分割每一位数字的过程中依然保持整数类型，修改后的getHappy函数如下： 12345678var getHappy = function(n)&#123; let ans = 0; while(n)&#123; ans+= (n%10) ** 2; n = Math.trunc(n/10); &#125; return ans;&#125; 15. 三数之和 - 力扣（LeetCode） 12345//错误代码var threeSum = function(nums) &#123; nums.sort(); //...&#125;; 错误原因 Array.sort()默认排序是将元素转换为字符串，然后按照它们的 UTF-16 码元值升序排序，所以这样写会导致整数无法按大小排序。正确代码如下 1234var threeSum = function(nums) &#123; nums.sort((a,b)=&gt;a-b); //...&#125;; 541. 反转字符串 II - 力扣（LeetCode） 123456789//错误代码var reverse = function(s,from,to)&#123; while(from&lt;to)&#123; let temp = s[from]; s[from] = s[to]; s[t0] = temp; from++,to--; &#125;&#125; 错误原因 JavaScript中字符串为按值传递，作为参数传递时无法改变值。应改为传递数组，正确代码如下 123456789101112131415var reverse = function(arr,from,to)&#123; while(from&lt;to)&#123; let temp = arr[from]; arr[from] = arr[to]; arr[to] = temp; from++,to--; &#125;&#125;var reverseStr = function(s, k) &#123; const arr = Array.from(s); for(let i=0;i&lt;arr.length;i+=2*k)&#123; reverse(arr,i,Math.min(arr.length-1,i+k-1)); &#125; return arr.join(&#x27;&#x27;);&#125;; 28. 找出字符串中第一个匹配项的下标 - 力扣（LeetCode） KMP算法模板 12345678910111213141516var strStr = function(haystack, needle) &#123; const m=haystack.length,n=needle.length; if(n===0) return 0; const next= new Array(n).fill(0); for(let i=1,j=0;i&lt;n;i++)&#123; while(j&gt;0&amp;&amp;needle[i]!==needle[j]) j=next[j-1]; if(needle[i]===needle[j]) j++; next[i]=j; &#125; for(let i=0,j=0;i&lt;m;i++)&#123; while(j&gt;0&amp;&amp;haystack[i]!==needle[j]) j=next[j-1]; if(haystack[i]===needle[j]) j++; if(j===n) return i-n+1; &#125; return -1;&#125;; 239. 滑动窗口最大值 - 力扣（LeetCode） 数组模拟栈：const stack &#x3D; []; 入栈：stack.push(x); 出栈：stack.pop(); 查看栈顶：stack.at(-1); 判断栈非空：stack.length 数组模拟队列：const queue &#x3D; [] 入队：queue.push(x) 出队：queue.shift() 查看队首：queue[0] 查看队尾：queue.at(-1) 判断队非空：queue.length 123456789101112131415var maxSlidingWindow = function(nums, k) &#123; let ans = []; let queue = []; for(let i=0;i&lt;k-1;i++)&#123; while(queue.length&amp;&amp;nums[queue.at(-1)]&lt;nums[i]) queue.pop(); queue.push(i); &#125; for(let i=k-1;i&lt;nums.length;i++)&#123; while(queue.length&amp;&amp;nums[queue.at(-1)]&lt;nums[i]) queue.pop(); queue.push(i); while(queue[0]&lt;=i-k) queue.shift(); ans.push(nums[queue[0]]); &#125; return ans;&#125;; 77. 组合 - 力扣（LeetCode） 123456789101112131415161718//错误代码const ans = [];const path = [];var backtracking = function(n,k,startIndex)&#123; if(path.length===k)&#123; ans.push(path); return; &#125; for(let i=startIndex;i&lt;=n-k+path.length+1;i++)&#123; path.push(i); backtracking(n,k,i+1); path.pop(); &#125;&#125;;var combine = function(n, k) &#123; backtracking(n,k,1); return ans;&#125;; 错误原因 ans和path需要初始化 需将path的副本加入ans 12345678910111213141516171819let ans = [];let path = [];var backtracking = function(n,k,startIndex)&#123; if(path.length===k)&#123; ans.push(path.concat()); return; &#125; for(let i=startIndex;i&lt;=n-k+path.length+1;i++)&#123; path.push(i); backtracking(n,k,i+1); path.pop(); &#125;&#125;;var combine = function(n, k) &#123; ans = []; path = []; backtracking(n,k,1); return ans;&#125;;","categories":[],"tags":[]},{"title":"es6","slug":"es6","date":"2024-12-20T07:02:49.000Z","updated":"2025-02-09T14:40:18.168Z","comments":true,"path":"2024/12/20/es6/","permalink":"http://example.com/2024/12/20/es6/","excerpt":"","text":"ES6新特性let 变量不能重复声明 产生块级作用域 不存在变量提升 不影响作用域链 const 声明常量，要赋初始值，不能重复声明 产生块级作用域 对数组或对象元素的修改，不算对常量的修改 不存在变量提升 不影响作用域链 作用域 局部作用域 函数作用域：函数内部声明的变量只能在函数内部访问 块作用域：使用{}包裹的代码块内部声明的变量外部有可能无法访问 let和const产生块作用域 var不会产生块作用域 全局作用域：&lt;script&gt;标签和js文件的最外层，声明的变量在其他任何作用域都能访问 window对象动态添加的属性也是全局的 函数中未使用任何关键字声明的变量也是全局的 作用域链：优先查找当前，依次查找父级作用域 闭包 闭包 &#x3D; 内层函数+外层函数的变量 在函数外部无法读取函数内的局部变量。出于种种原因，我们有时候需要得到函数内的局部变量。那就是在函数的内部，再定义一个函数，利用内层函数来获取外层函数的局部变量 闭包可能会引起内存泄漏 变量和函数提升代码执行前，所有var声明的变量被提升到当前作用域的最前面。只提升声明，不提升赋值。 代码执行前，所有函数声明被提升到当前作用域的最前面。 解构赋值123456789101112//数组解构赋值const F4 = [&#x27;小沈阳&#x27;,&#x27;刘能&#x27;,&#x27;赵四&#x27;,&#x27;宋小宝&#x27;];const [xiao,liu,zhao,song]= F4;//对象解构赋值const obj = &#123; name:&#x27;hzx&#x27;, age:18, sayHello: function()&#123; console.log(&#x27;hello&#x27;); &#125;&#125;const &#123;name,age,sayHello&#125; = obj; 模板字符串 声明方式：&#96;&#96; 可以直接出现换行符 ${}实现字符串拼接 箭头函数 func &#x3D; ()&#x3D;&gt;{} this是静态的，始终指向函数声明时所在作用域下的this 不能作为构造函数 不能使用arguments参数 形参只有一个可以省略(),代码语句只有一句return可以省略{return} 适用于定时器和数组方法，不适用于函数回调和对象方法 rest参数 func(…args){} 必须放在参数列表最后 与arguments的区别 语法：arguments是一个内置对象，而rest参数是通过…语法创建的。 类型：arguments是一个类数组对象，而rest参数是一个真正的数组。 位置：rest参数必须放在函数参数列表的最后面，而arguments对象在任何函数中都可用。 功能：rest参数提供了一个数组，可以直接使用数组的方法，而arguments对象需要转换才能使用数组方法。 扩展运算符...将数组转化为逗号分隔参数序列 Symbol Symbol的值是唯一的，用来解决命名冲突问题 Symbol值不能与其他数据进行运算 Symbol定义的对象属性不能使用for in或for of循环遍历，但是可以使用Object.getOwnPropertySymbols() 和 Reflect.ownKeys()来获取对象的所有键名 迭代器1234567891011121314151617181920212223242526272829303132333435363738394041const banji = &#123; name:&quot;终极一班&quot;, students:[ &#x27;xiaoming&#x27;, &#x27;xiaoning&#x27;, &#x27;xiaotian&#x27;, &#x27;knight&#x27; ], [Symbol.iterator]()&#123; let index = 0; return &#123; next:()=&gt;&#123; if(index&lt;this.students.length)&#123; const res = &#123;value:this.students[index],done:false&#125; index++ return res &#125; return &#123;value: undefined, done:true&#125; &#125; &#125; &#125; &#125; for(let v of banji)&#123; console.log(v) &#125; const iterator = banji[Symbol.iterator]() console.log(iterator.next()) console.log(iterator.next()) console.log(iterator.next()) console.log(iterator.next()) console.log(iterator.next())//输出xiaomingxiaoningxiaotianknight&#123;value: &#x27;xiaoming&#x27;, done: false&#125;done: false&#123;value: &#x27;xiaoning&#x27;, done: false&#125;&#123;value: &#x27;xiaotian&#x27;, done: false&#125;&#123;value: &#x27;knight&#x27;, done: false&#125;&#123;value: undefined, done: true&#125; 生成器1234567891011121314151617181920212223242526272829function * generator()&#123; console.log(&#x27;111&#x27;) yield &#x27;一只没有耳朵&#x27; console.log(&#x27;222&#x27;) yield &#x27;一只没有尾巴&#x27; console.log(&#x27;333&#x27;) yield &#x27;真奇怪&#x27; console.log(&#x27;444&#x27;)&#125;const iterator = generator()for(let v of generator())&#123; console.log(v)&#125;iterator.next()iterator.next()iterator.next()iterator.next()//输出111一只没有耳朵222一只没有尾巴333真奇怪444111222333444 应用实例 解决回调地狱 12345678910111213141516171819202122232425262728293031323334353637//回调地狱// setTimeout(() =&gt; &#123;// console.log(&#x27;111&#x27;)// setTimeout(() =&gt; &#123;// console.log(&#x27;222&#x27;)// setTimeout(() =&gt; &#123;// console.log(&#x27;333&#x27;)// &#125;, 3000)// &#125;, 2000)// &#125;, 1000)//生成器函数解决回调地狱function one()&#123; setTimeout(()=&gt;&#123; console.log(&#x27;111&#x27;) iterator.next() &#125;,1000)&#125;function two()&#123; setTimeout(()=&gt;&#123; console.log(&#x27;222&#x27;) iterator.next() &#125;,2000)&#125;function three()&#123; setTimeout(()=&gt;&#123; console.log(&#x27;333&#x27;) iterator.next() &#125;,3000)&#125;function * generator()&#123; yield one() yield two() yield three()&#125;let iterator = generator()iterator.next() 异步编程 1234567891011121314151617181920212223242526272829function getUsers()&#123; setTimeout(()=&gt;&#123; let data = &#x27;用户数据&#x27; iterator.next(data) &#125;,1000)&#125;function getOrders()&#123; setTimeout(()=&gt;&#123; let data = &#x27;订单数据&#x27; iterator.next(data) &#125;,2000)&#125;function getGoods()&#123; setTimeout(()=&gt;&#123; let data = &#x27;商品数据&#x27; iterator.next(data) &#125;,3000)&#125;function * generator()&#123; const users = yield getUsers() console.log(users) const orders = yield getOrders() console.log(orders) const goods = yield getGoods() console.log(goods)&#125;let iterator = generator()iterator.next() Promise1234567891011121314151617181920212223const fs = require(&quot;fs&quot;)const p = new Promise((resolve,reject)=&gt;&#123; fs.readFile(&#x27;./静夜思.md&#x27;,(err,data)=&gt;&#123; resolve(data) &#125;)&#125;)p.then(value=&gt;&#123; return new Promise((resolve,reject)=&gt;&#123; fs.readFile(&#x27;./琵琶行.md&#x27;,(err,data)=&gt;&#123; resolve([...value,data]) &#125;) &#125;)&#125;).then(value=&gt;&#123; return new Promise((resolve,reject)=&gt;&#123; fs.readFile(&#x27;./滕王阁序.md&#x27;,(err,data)=&gt;&#123; resolve([...value,data]) &#125;) &#125;)&#125;).then(value=&gt;&#123; console.log(value.join(&#x27;\\n&#x27;))&#125;) Set123456789101112131415const arr1 = [3,1,4,1,5,9,2,6]const arr2 = [4,8,6,9]const s2 = new Set(arr2)//数组去重let result = [...new Set(arr1)]console.log(result)//求交集const intersection = [...new Set(arr1)].filter(item=&gt;s2.has(item))console.log(intersection)//求并集const union = [...new Set([...arr1,...arr2])]console.log(union)//求差集const diff = [...new Set(arr1)].filter(item=&gt;!s2.has(item))console.log(diff) class构造函数执行过程 创建新对象 构造函数this指向新对象 执行构造函数代码，修改this，添加新的属性 返回新对象 原型对象 每个构造函数都有一个prototype属性，指向原型对象 这个对象可以挂载函数，对象实例化不会多次创建原型上的函数，节约内存 构造函数通过原型分配的函数是所有对象所共享的，可以将不变的方法直接定义在prototype对象上，这样所有对象的实例就可以共享这些方法 构造函数和原型对象中的this都指向实例化的对象 constructor原型对象上的构造器，指向构造函数 对象原型实例对象的__proto__属性,指向构造函数的原型对象 原型链 当访问一个对象的属性和方法时，首先查找这个对象自身有没有该属性。 如果没有就查找它的原型（就是__proto__指向的prototype原型对象。 如果还没有就继续查找原型对象的原型，直至查找到null 可以用 instanceof 运算符检测构造函数的prototype属性是否出现在某个实例对象的原型链上。 模块化babelbabel是一个JavaScript编译器 1npm i babel-cli babel-preset-env browserify -D 1234//代码转换npx babel src/js -d dist/js --presets=babel-preset-env//打包npx browserify dist/app.js -o dist/bundle.js async与await作用：使异步代码看起来像同步代码一样 async函数 async函数的返回值为Promise对象 Promise对象的结果由async函数执行的返回值决定 await表达式 await必须写在async函数中 await右侧的表达式一般为Promise对象 await返回的是Promise成功的值 await的Promise失败了，就会抛出异常，需要try…catch捕获处理 动态导入1()=&gt;import()","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"es6","slug":"es6","permalink":"http://example.com/tags/es6/"}]},{"title":"Eslint","slug":"Eslint","date":"2024-12-16T03:28:59.000Z","updated":"2024-12-16T14:11:00.772Z","comments":true,"path":"2024/12/16/Eslint/","permalink":"http://example.com/2024/12/16/Eslint/","excerpt":"","text":"EslintESLint 是一个用于识别和报告在 ECMAScript&#x2F;JavaScript 代码中发现的模式的工具，其目标是使代码更加一致并避免错误。 安装确保事先运行 npm init,已经有 package.json 文件。 1npm init -D @eslint/config@latest 使用托管在 npm 上的特定可共享配置 1npm init -D @eslint/config@latest -- --config packageName 在项目中添加 eslint.config.js文件 1touch eslint.config.js 运行1npx eslint your-project-dir/yourfile.js 配置12345678910111213// eslint.config.jsimport js from &quot;@eslint/js&quot;;export default [ js.configs.recommended, &#123; rules: &#123; &quot;no-unused-vars&quot;: &quot;warn&quot;, &quot;no-undef&quot;: &quot;warn&quot; &#125; &#125;]; 配置文档 实践问题要关闭 ESLint 中的vue&#x2F;multi-word-component-names提示在eslint.config.js中添加 12345&#123; &quot;rules&quot;: &#123; &quot;vue/multi-word-component-names&quot;: &quot;off&quot; &#125;&#125;","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Eslint","slug":"Eslint","permalink":"http://example.com/tags/Eslint/"}]},{"title":"html&css","slug":"html-css","date":"2024-11-24T06:57:34.000Z","updated":"2025-01-21T08:30:26.320Z","comments":true,"path":"2024/11/24/html-css/","permalink":"http://example.com/2024/11/24/html-css/","excerpt":"","text":"语义化标签header nav main article section aside footer 语义化的优点: 在没CSS样式的情况下，页面整体也会呈现很好的结构效果 代码结构清晰，易于阅读， 利于开发和维护方便其他设备解析（如屏幕阅读器）根据语义渲染网页。 有利于搜索引擎优化（SEO），搜索引擎爬虫会根据不同的标签来赋予不同的权重 HTML5新特性语义化标签音视频处理API(audio,video)canvas &#x2F; webGL拖拽释放(Drag and drop) APIhistory APIrequestAnimationFrame地理位置(Geolocation)APIwebSocketweb存储 localStorage、SessionStorage表单控件，calendar、date、time、email、url、search 新的HTML5文档类型和字符集HTML5文档类型是&lt;！doctype html&gt;。 HTML5使用的字符集&lt; meta charset&#x3D;“UTF8”&gt;。 HTML5 Canvas元素Canvas元素用于在网页上绘制图形，该元素标签的强大之处在于可以直接在HTML上进行图形操作。 HTML5新增了哪些功能新增的功能API包括 Media APl、 Text Track API、 Application Cache API、User Interaction、 Data Transfer API、 Command API、 Constraint Validation API、 History API HTML5的离线存储localStorage，可长期存储数据，即浏览器关闭后数据不丢失 session Storage，数据在浏览器关闭后自动删除 HTML5的form如何关闭自动补全功能将不想要提示的form元素下的 Input元素的 autocomplete属性设置为off HTML5引入了哪些新的表单属性？新增表单属性包括 datalist、 datetime、 output、 keygen、date、 month、week、time、 number、 range、 email、url HTML5中的应用缓存是什么？HTML5应用缓存的最终目的是帮助用户离线浏览页面。换句话说，如果网络连接不可用，打开的页面就来自浏览器缓存，离线应用缓存可以帮助用户达到这个目的。 应用缓存可以帮助用户指定哪些文件需要缓存，哪些不需要 HTML5应用程序缓存为应用带来什么优势？应用程序缓存为应用带来3个优势。 （1）离线浏览，让用户可在应用离线时（网络不可用时）使用它们。 （2）速度，让已缓存资源加载得更快。 （3）减少服务器负载，让浏览器将只下载服务器更新过的资源。 CSS 选择器及优先级选择器 id选择器(#myid)类选择器(.myclass)属性选择器(a[rel&#x3D;“external”])伪类选择器(a:hover, li:nth-child)标签选择器(div, h1,p)相邻选择器（h1 + p）子选择器(ul &gt; li)后代选择器(li a)通配符选择器(*)优先级： !important内联样式（1000）ID选择器（0100）类选择器&#x2F;属性选择器&#x2F;伪类选择器（0010）元素选择器&#x2F;伪元素选择器（0001）关系选择器&#x2F;通配符选择器（0000）带!important 标记的样式属性优先级最高； 样式表的来源相同时： !important &gt; 行内样式&gt;ID选择器 &gt; 类选择器 &gt; 标签 &gt; 通配符 &gt; 继承 &gt; 浏览器默认属性 CSS3新特性圆角 阴影 变换 更多的CSS选择器 色彩模式，如rgba； 伪元素::selection; 媒体查询； 多栏布局； 图片边框（ border-image）。 CSS3新增伪类新增伪类有以下几个：p:first- of-type，选择属于其父元素的首个元素的每个元素。 p:last-of-type，选择属于其父元素的最后一个元素的每个元素。 p:only- of-type，选择属于其父元素的唯一元素的每个元素。 p:only- child，选择属于其父元素的唯一子元素的每个元素。 p:nth- child（2），选择属于其父元素的第二个子元素的每个元素。 :enabled:disabled，控制表单控件的禁用状态. :checked，单选框或复选框被选中。 CSS3动画如何在动作结束时保持该状态不变采用 animation- fill-mode。其可以设置为以下值。 none，不改变默认行为。 forwards，当动画完成后，保持最后一个属性值（在最后一个关键帧中定义） backwards，在 animation-delay所指定的一段时间内，在动画显示之前，应用开始属性值（在第一个关键帧中定义）。 both，向前和向后填充模式都可以应用。 box- sizingbox-sizing属性主要用来控制元素盒模型的解析模式。默认值是 content-box。 content-box让元素维持W3C的标准盒模型。元素的宽度&#x2F;高度由 border+ padding+content的宽度&#x2F;高度决定，设置 width&#x2F;height属性指的是指定 content部分的宽度&#x2F;高度。 border-box让元素维持IE传统盒模型（IE6以下版本和IE6、IE7的怪异模式）。设置 width&#x2F;height属性指的是指定 border+ padding+ content的宽度&#x2F;高度。 标准浏览器下，按照W3C规范解析盒模型。一旦修改了元素的边框或内距，就会影响元素的盒子尺寸，就不得不重新计算元素的盒子尺寸，从而影响整个页面的布局。 CSS3动画的优缺点优点如下: 在性能上会稍微好一些。代码相对简单。 缺点如下: 在动画控制上不够灵活，兼容性不好。 Animation与 Transition的异同Animation与 Transition的功能相同，都是通过改变元素的属性值来实现动画效果的。 它们的区别在于，使用 Transition的功能时只能用指定属性的开始值和结束值，然后在这两个属性值之间使用平滑过渡的方式实现动画效果，因此不能实现比较复杂的动画效果。 Animation功能通过定义多个关键帧，以及定义每个关键帧中元素的属性值来实现更为复杂的动画效果。 Animation属性值两个必要属性如下。 animation-name，即动画名称。 animation- duration，即动画持续时间。 其他属性值如下。 animation- play-state，即播放状态（ running表示播放， paused表示暂停），可以用来控制动画暂停。 animation- timing- function，即动画运动形式。 animation- delay，即动画延迟时间。 mation-iteration- count，即重复次数。 animation-direction，即播放前重置（ alternate动画直接从上一次停止的位置开始执行）。 媒体查询+rem的使用方法@media媒体类型and（媒体特性）{样式规则}这通常在移动端使用。在做移动端开发的时候，为了适配多屏幕，使用rem单位，然后根据屏幕尺寸的改变动态地设置根节点HIML的font-size值。这样可以解决多屏幕适配的问题。 html{font-size：20px;}@media （min-width：320px） {html{font-size：12px；}}@media （min-width：360px）{html{font-size：16px；}}但是这种做法有两个缺点。 （1）适配屏幕的尺寸不是连续的。 （2）会在CSS文件中添加大段的查询代码，增加了CSS文件的大小，为改进上述缺点，可以使用 JavaScript获取移动设备屏幕的宽度，根据设计稿的原型尺寸，动态地计算font-size的值。 rem的原理在做响应式布局的时候，通过调整HTML的字体大小，页面上所有使用rem单位的元素都会做相应的调整。 设置CSS3文本阴影h1{text- shadow：水平阴影，垂直阴影，模糊距离，阴影颜色} 盒阴影盒阴影的语法结构与文本阴影类似，如box- shadow：5px 5px 5px rgba（255，15，255，0.5）。 但是，盒阴影多了一个属性，即外延值 inset.，如box- -shadow：5px 5px 25px rgba（0,0,255，0.5）inset。 通过CSS3实现背景颜色线性渐变具体代码如下： div{background：-webkit-linear-gradient （left, red, green 50%， blue）；} CSS3中 transition属性值及含义transition属性是一个简写属性，用于设置以下4个过渡属性。 transition- property，哪个属性需要实现过渡 transition- duration，完成过渡效果需要多少秒&#x2F;毫秒 transition- timing- function，速度效果的运动曲线，如 linear、ease-in、ease、ease-out、 ease-in-out, cube-bezier。 transition- delay，规定过渡开始前的延迟时间。 用省略号显示超出文本的内容使用text-overflow:ellopsis。 当文本溢出时，为了不显示省略标记（…），通过clip直接将溢出的部分裁剪掉。 实现文本换行使用word-wrap属性。 normal，只在允许的断字点换行（浏览器保持默认处理）。 break-word，在长单词或URL地址内部进行换行。 position 属性的值有哪些及其区别固定定位 fixed： 元素的位置相对于浏览器窗口是固定位置，即使窗口是滚动的它也不会移动。Fixed 定 位使元素的位置与文档流无关，因此不占据空间。 Fixed 定位的元素和其他元素重叠。 相对定位 relative： 如果对一个元素进行相对定位，它将出现在它所在的位置上。然后，可以通过设置垂直 或水平位置，让这个元素“相对于”它的起点进行移动。 在使用相对定位时，无论是 否进行移动，元素仍然占据原来的空间。因此，移动元素会导致它覆盖其它框。 绝对定位 absolute： 绝对定位的元素的位置相对于最近的已定位父元素，如果元素没有已定位的父元素，那 么它的位置相对于。absolute 定位使元素的位置与文档流无关，因此不占据空间。 absolute 定位的元素和其他元素重叠。 粘性定位 sticky： 元素先按照普通文档流定位，然后相对于该元素在流中的 flow root（BFC）和 containing block（最近的块级祖先元素）定位。而后，元素定位表现为在跨越特定阈值前为相对定 位，之后为固定定位。 默认定位 Static： 默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声 明）。 inherit: 规定应该从父元素继承 position 属性的值。 让一个元素水平垂直居中水平居中对于 行内元素 : text-align: center;对于确定宽度的块级元素：（1）width和margin实现。margin: 0 auto;（2）绝对定位和margin-left: margin-left: (父width - 子width）&#x2F;2, 前提是父元素position: relative对于宽度未知的块级元素（1）table标签配合margin左右auto实现水平居中。使用table标签（或直接将块级元素设值为 display:table），再通过给该标签添加左右margin为auto。（2）inline-block实现水平居中方法。display：inline-block和text-align:center实现水平居中。（3）绝对定位+transform，translateX可以移动本身元素的50%。（4）flex布局使用justify-content:center 垂直居中利用 line-height 实现居中，这种方法适合纯文字类通过设置父容器 相对定位 ，子级设置 绝对定位，标签通过margin实现自适应居中弹性布局 flex :父级设置display: flex; 子级设置margin为auto实现自适应居中父级设置相对定位，子级设置绝对定位，并且通过位移 transform 实现table 布局，父级通过转换成表格形式，然后子级设置 vertical-align 实现。（需要注意的是：vertical-align: middle使用的前提条件是内联元素以及display值为table-cell的元素）。传送门 ☞ # 图解CSS水平垂直居中常见面试方法 隐藏页面中某个元素的方法opacity：0，该元素隐藏起来了，但不会改变页面布局，并且，如果该元素已经绑定 一些事件，如click 事件，那么点击该区域，也能触发点击事件的visibility：hidden，该元素隐藏起来了，但不会改变页面布局，但是不会触发该元素已 经绑定的事件 ，隐藏对应元素，在文档布局中仍保留原来的空间（重绘）display：none，把元素隐藏起来，并且会改变页面布局，可以理解成在页面中把该元素。 不显示对应的元素，在文档布局中不再分配空间43、用CSS实现三角符号 页面布局Flex 布局布局的传统解决方案，基于盒状模型，依赖 display 属性 + position 属性 + float 属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。 Flex 是 Flexible Box 的缩写，意为”弹性布局”,用来为盒状模型提供最大的灵活性。指定容器 display: flex 即可。 简单的分为容器属性和元素属性。 容器的属性： flex-direction：决定主轴的方向（即子 item 的排列方法）flex-direction: row | row-reverse | column | column-reverse;flex-wrap：决定换行规则 flex-wrap: nowrap | wrap | wrap-reverse;flex-flow： .box { flex-flow: || ; }justify-content：对其方式，水平主轴对齐方式align-items：对齐方式，竖直轴线方向align-content 项目的属性（元素的属性）： order 属性：定义项目的排列顺序，顺序越小，排列越靠前，默认为 0flex-grow 属性：定义项目的放大比例，即使存在空间，也不会放大flex-shrink 属性：定义了项目的缩小比例，当空间不足的情况下会等比例的缩小，如果 定义个 item 的 flow-shrink 为 0，则为不缩小flex-basis 属性：定义了在分配多余的空间，项目占据的空间。flex：是 flex-grow 和 flex-shrink、flex-basis 的简写，默认值为 0 1 auto。align-self：允许单个项目与其他项目不一样的对齐方式，可以覆盖align-items，默认属 性为 auto，表示继承父元素的 align-items 比如说，用 flex 实现圣杯布局 Rem 布局首先 Rem 相对于根(html)的 font-size 大小来计算。简单的说它就是一个相对单例 如:font-size:10px;,那么（1rem &#x3D; 10px）了解计算原理后首先解决怎么在不同设备上设置 html 的 font-size 大小。其实 rem 布局的本质是等比缩放，一般是基于宽度。 优点：可以快速适用移动端布局，字体，图片高度缺点：① 目前 ie 不支持，对 pc 页面来讲使用次数不多；② 数据量大：所有的图片，盒子都需要我们去给一个准确的值；才能保证不同机型的适配；③ 在响应式布局中，必须通过 js 来动态控制根元素 font-size 的大小。也就是说 css 样式和 js 代码有一定的耦合性。且必须将改变 font-size 的代码放在 css 样式之前。 百分比布局通过百分比单位 “ % “ 来实现响应式的效果。通过百分比单位可以使得浏览器中的组件的宽和高随着浏览器的变化而变化，从而实现响应式的效果。 直观的理解，我们可能会认为子元素的百分比完全相对于直接父元素，height 百分比相 对于 height，width 百分比相对于 width。 padding、border、margin 等等不论是垂直方向还是水平方向，都相对于直接父元素的 width。 除了 border-radius 外，还有比如 translate、background-size 等都是相对于自身的。缺点： （1）计算困难（2）各个属性中如果使用百分比，相对父元素的属性并不是唯一的。造成我们使用百分比单位容易使布局问题变得复杂。 浮动布局浮动布局:当元素浮动以后可以向左或向右移动，直到它的外边缘碰到包含它的框或者另外一个浮动元素的边框为止。元素浮动以后会脱离正常的文档流，所以文档的普通流中的框就变的好像浮动元素不存在一样。 优点这样做的优点就是在图文混排的时候可以很好的使文字环绕在图片周围。另外当元素浮动了起来之后，它有着块级元素的一些性质例如可以设置宽高等，但它与inline-block还是有一些区别的，第一个就是关于横向排序的时候，float可以设置方向而inline-block方向是固定的；还有一个就是inline-block在使用时有时会有空白间隙的问题缺点最明显的缺点就是浮动元素一旦脱离了文档流，就无法撑起父元素，会造成父级元素高度塌陷。 自适应布局（bootstrap）自适应布局分别为不同屏幕不同分辨率定义布局，即是创建多个静态页面，每个静态页面对应一个屏幕分辨率的一个范围内。在改变不同的屏幕分辨率可以切换到不同的静态布局上，但是布局中的元素位置会发生改变，但是在每个静态布局中，页面中的元素不会随着窗口大小的调整发生变化。使用 @media 媒体查询给不同尺寸和介质的设备切换不同的样式。在优秀的响应范围设计下可以给适配范围内的设备最好的体验，在同一个设备下实际还是固定的布局。 优点：1.对网站的复杂程度兼容性更大；2.对开发工程师来说制作的成本代价更低；3.代码执行效果更高效；4.测试时更加容易，运营相对更加精准。 缺点： 在现如今的移动端设计百花齐放的时期之下，同一个网站往往需要为不同的设备制作不同的页面，不但会增加开发成本，还会因为客户的需求改变时，可能会改动多套代码、流程相比较来说较繁琐。 流式布局（fluid）流式布局的布局方式是页面的元素的宽度按照屏幕的分辨率进行适配的调整，但是整体布局不变，也称之为栅栏系统。使用%百分比定义宽度，高度大都是用px来固定住，可以根据可视区域 (viewport) 和父元素的实时尺寸进行调整，尽可能的适应各种分辨率。往往配合 max-width&#x2F;min-width 等属性控制尺寸流动范围以免过大或者过小影响阅读。缺点： 屏幕大小变化时，页面元素也随之变化但是布局不变。这就会因为如果屏幕太大或太小都会布局时元素无法正常显示。 响应式布局响应式布局是css3增加的新布局方式，该布局方式2010年提出来的一个概念，说白了就是一个网站能够兼容多个终端——而不是为每个终端做一个特定的版本。这个概念是为解决移动互联网浏览而诞生的。响应式布局可以为不同终端的用户提供更加舒适的界面和更好的用户体验，而且随着目前大屏幕移动设备的普及，用“大势所趋”来形容也不为过。响应式几乎成为优秀页面布局的标准。设计方法： 媒体查询+流式布局。通常使用@media媒体查询，和网格系统配合相对布局单位进行布局，实际上说白了就是综合响应式等技术通过css给单一网页不同设备分辨率返回不式时的技术。优点： 适应pc端和移动端，如果有足够的耐心，页面效果会很完美。缺点：1.只能适应主流的宽高；2.如果匹配足够多的设备屏幕的大小，对于工程师来说工作量不小，设计更需要多个版本，工作量增大。 前端优化的解决方案我们的优化原则有以下几个： 能缓存的，尽量强缓存。 引入外部资源时不要出现超时、404的状况。 减少HTTP请求数。 合理设置cookie的大小以及过期时间。 合理利用懒加载 网页内容的优化1、懒加载数据。首先根据标签的left和top属性判断是否显示在了屏幕中（如果显示在屏幕中，其left和top属性值应该是在0到窗口长宽之间）。如果显示在屏幕中，则将src标签的内容替换为图片的url。 2、不要缩放图片。img计算缩放也需要时间 3、避免重定向。重定向会重新渲染网页。 4、使用雪碧图（精灵图）：通过使用background-position：-xpx -ypx;来调整图片的位置，不过HTTP2不适用，原因为HTTP2实际上是多路复用的，只用一个TCP连接，所以多个图片的请求也是在同一个TCP连接里，这样能省下非常多的请求时间，但坏处就是单连接开销很大，如果要传多个大文件，就很麻烦。 5、要有网站小图标favicon.ico。 如果没有小图标，会引起404，拖慢网页加载进度。6、能使用jpeg就不要用png，能使用png8就不要用png24。（1）色彩丰富的、大的图片切成jpg的；（2）尺寸小的，色彩不丰富的和背景透明的切成gif或者png8的；（3）半透明的切成png24。 7、使用canvas压缩图片。 css的优化1、避免使用@import。使用@import相当于将引入的css放在了页面底部，因为使用@import引用的文件只有在引用它的那个css文件被下载、解析之后，浏览器才会知道还有另外一个css需要下载，这时才去下载，然后下载后开始解析、构建render tree等一系列操作。因此使用@import会拖慢渲染的过程。 2、将样式表放在head中。如果放在body中，可能出现在浏览器下载好css样式表之前，组件就已经加载好了的情况，这可能会导致重新渲染。 3、避免使用css表达式。如：expression((new Date()).getHours()%2 ? “#B8D4FF” : “#F08A00” );解析表达式和计算都需要时间。 JavaScript的优化1、尽量减少DOM访问。 2、使用事件代理（减少DOM操作）。 3、把脚本放在底部（加载脚本时会阻塞页面渲染）。 4、合理使用节流函数和防抖函数。 CDNCDN即内容分发网络。它依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。优化加载速度。 水平垂直居中的几种方法使用flex布局利用flex的alignItems:center垂直居中，justifycontent:center水平居中 利用相对定位和绝对定位的margin:auto相对定位下，使用绝对定位将上下左右都设置为0，再设置margin:auto即可实现居中 利用相对定位和绝对定位，再加上外边距和平移的配合相对定位下，使用绝对定位，利用margin偏移外容器的50%，再利用translate平移回补自身宽高的50%即可","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"面试八股","slug":"面试八股","permalink":"http://example.com/tags/%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1/"}]},{"title":"浏览器","slug":"浏览器","date":"2024-11-24T06:20:27.000Z","updated":"2024-12-29T15:03:53.774Z","comments":true,"path":"2024/11/24/浏览器/","permalink":"http://example.com/2024/11/24/%E6%B5%8F%E8%A7%88%E5%99%A8/","excerpt":"","text":"从输入URL到页面加载的全过程 用户在浏览器地址栏输入URL(统一资源定位符),URL由协议、域名、文件路径组成，没有文件路径的时候，就会访问根目录下的默认文件，例如index.html 浏览器对URL进行解析之后，确定了web服务器和要访问的文件，就会生成发送给Web服务器的请求信息 如果是get请求，浏览器会先判断强缓存是否命中，如果命中就直接使用浏览器的本地缓存中的资源，如果未命中，会在请求头部中添加协商缓存的字段 发送HTTP消息之前要先查询服务器域名对应的IP地址(域名解析)，大致过程为客户端通过递归方式请求本地DNS服务器，本地DNS服务器通过迭代方式请求根域名服务器、顶级域名服务器、权威域名服务器等，最终将IP地址返回给客户端，这个过程中浏览器、操作系统、各级DNS服务器都会先查看本地缓存，没有记录再去查询 通过DNS获取到IP后，就可以把HTTP的传输工作交给操作系统中的协议栈，协议栈包括TCP、UDP、IP等 因为HTTP是基于TCP协议传输的，所以要先建立TCP连接，也就是”三握手“过程： 一开始，客户端和服务端都处于CLOSED状态。先是服务端主动监听某个端口(HTTP默认端口号80,HTTPS默认端口号是443),处于LISTEN状态 然后客户端主动发起连接SYN,之后处于SYN-SENT状态。 服务端收到发起的连接，返回SYN,并且ACK客户端的SYN,之后处于SYN-RCVD状态 容户端收到服务端发送的SYN和ACK之后，发送对SYN确认的ACK,之后处于ESTABLISHED状态。 服务端收到ACK的ACK之后，处于ESTABLISHED状态 TCP连接建立之后，会把http报文加上TCP头部组装好TCP报文，交给下面的网络层，然后IP模块会加上IP头部封装成网络包 接下来网络包还需要在前面加上MAC头部生成MAC帧，用于网络结点之间的传输，获取接收方的MAC地址要先查看ARP缓存有没有命中，未命中要通过ARP广播根据IP地址获取下一跳要发往的MAC地址 之后网卡驱动获取MAC帧，加上报头、帧分界符、帧检验序列，转换成电信号，通过网线发出去 这个数据包在网络中传输的过程中，会经过交换机和路由器等网络结点，MAC地址会一直变化，而源IP和目标IP始终不会变 数据包到达了服务器，服务器会一层一层将数据包拆开，最终将HTTP数据交给应用层的相应进程，进程进行处理之后，把客户端请求的资源封装在HTTP响应报文里，之后像客户端发送http请求那样把http响应发送给客户端。 客户端也就是浏览器的网络线程收到资源后，会产生一个渲染任务，并将其传递给消息队列等待渲染主线程的执行。 在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，开启渲染流程，构建渲染树。 在浏览器中输入URL到显示页面经历哪些过程，涉及到哪些协议？浏览器要将URL解析为IP地址，解析域名就要用到DNS协议，首先主机会查询DNS的缓存，如果没有就给本地DNS发送查询请求。DNS查询分为两种方式，一种是递归查询，一种是迭代查询。如果是迭代查询，本地的DNS服务器，向根域名服务器发送查询请求，根域名服务器告知该域名的一级域名服务器，然后本地服务器给该一级域名服务器发送查询请求，然后依次类推直到查询到该域名的IP地址。DNS服务器是基于UDP的，因此会用到UDP协议。 得到IP地址后，浏览器就要与服务器建立一个http连接。因此要用到http协议。http生成一个get请求报文，将该报文传给TCP层处理，所以还会用到TCP协议。如果采用https还会使用https协议先对http数据进行加密。TCP层如果有需要先将HTTP数据包分片，分片依据路径MTU和MSS。TCP的数据包然后会发送给IP层，用到IP协议。IP层通过路由选路，一跳一跳发送到目的地址。当然在一个网段内的寻址是通过以太网协议实现(也可以是其他物理层协议，比如PPP，SLIP)，以太网协议需要直到目的IP地址的物理地址，有需要ARP协议。 其中： 1、DNS协议，http协议，https协议属于应用层应用层是体系结构中的最高层。应用层确定进程之间通信的性质以满足用户的需要。这里的进程就是指正在运行的程序。应用层直接为用户的应用进程提供服务。 2、TCP&#x2F;UDP属于传输层传输层的任务就是负责主机中两个进程之间的通信。因特网的传输层可使用两种不同协议：即面向连接的传输控制协议TCP，和无连接的用户数据报协议UDP。面向连接的服务能够提供可靠的交付，但无连接服务则不保证提供可靠的交付，它只是“尽最大努力交付”。这两种服务方式都很有用，备有其优缺点。在分组交换网内的各个交换结点机都没有传输层。 3、IP协议，ARP协议属于网络层网络层负责为分组交换网上的不同主机提供通信。在发送数据时，网络层将运输层产生的报文段或用户数据报封装成分组或包进行传送。在TCP&#x2F;IP体系中，分组也叫作IP数据报，或简称为数据报。网络层的另一个任务就是要选择合适的路由，使源主机运输层所传下来的分组能够交付到目的主机。 4、数据链路层当发送数据时，数据链路层的任务是将在网络层交下来的IP数据报组装成帧，在两个相邻结点间的链路上传送以帧为单位的数据。每一帧包括数据和必要的控制信息（如同步信息、地址信息、差错控制、以及流量控制信息等）。控制信息使接收端能够知道—个帧从哪个比特开始和到哪个比特结束。控制信息还使接收端能够检测到所收到的帧中有无差错。 5、物理层物理层的任务就是透明地传送比特流。在物理层上所传数据的单位是比特。传递信息所利用的一些物理媒体，如双绞线、同轴电缆、光缆等，并不在物理层之内而是在物理层的下面。因此也有人把物理媒体当做第0层。 进程、线程和协程进程是一个具有一定独立功能的程序在一个数据集上的一次动态执行的过程，是操作系统进行资源分配和调度的一个独立单位。线程是程序执行流的最小单元，是处理器调度和分派的基本单位。一个进程可以有一个或多个线程，各个线程之间共享程序的内存空间(也就是所在进程的内存空间)。 协程，英文Coroutines，是一种基于线程之上，但又比线程更加轻量级的存在，这种由程序员自己写程序来管理的轻量级线程叫做『用户空间线程』，具有对内核来说不可见的特性。 进程和线程的区别与联系【区别】：调度：线程作为调度和分配的基本单位，进程作为拥有资源的基本单位； 并发性：不仅进程之间可以并发执行，同一个进程的多个线程之间也可并发执行； 拥有资源：进程是拥有资源的一个独立单位，线程不拥有系统资源，但可以访问隶属于进程的资源。 系统开销：在创建或撤消进程时，由于系统都要为之分配和回收资源，导致系统的开销明显大于创建或撤消线程时的开销。但是进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个进程死掉就等于所有的线程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。 【联系】：一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程； 资源分配给进程，同一进程的所有线程共享该进程的所有资源； 处理机分给线程，即真正在处理机上运行的是线程； 进程间的通信方式进程通信：每个进程各自有不同的用户地址空间,任何一个进程的全局变量在另一个进程中都看不到，所以进程之间要交换数据必须通过内核,在内核中开辟一块缓冲区,进程A把数据从用户空间拷到内核缓冲区,进程B再从内核缓冲区把数据读走,内核提供的这种机制称为进程间通信。 进程间的通信方式：管道、有名管道、信号、消息队列、共享内存、信号量、socket JS垃圾回收机制浏览器的Javascript具有自动垃圾回收机制(GC:Garbage Collecation)，垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存。 标记清除:在js中，最常用的垃圾回收机制是标记清除：当变量进入执行环境时，被标记为“进入环境”，当变量离开执行环境时，会被标记为“离开环境”。垃圾回收器会销毁那些带标记的值并回收它们所占用的内存空间。 优化手段：内存优化 ; 手动释放：取消内存的占用即可。 内存泄漏：在 JS 中，常见的内存泄露主要有 4 种,全局变量、闭包、DOM 元素的引用、定时器","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"面试八股","slug":"面试八股","permalink":"http://example.com/tags/%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1/"}]},{"title":"http","slug":"http","date":"2024-11-23T14:35:15.000Z","updated":"2024-12-15T15:07:26.265Z","comments":true,"path":"2024/11/23/http/","permalink":"http://example.com/2024/11/23/http/","excerpt":"","text":"HTTP 的基本概念互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准，用于从 WWW 服务器传输超文本到本地浏览器的超文本传输协议。 HTTP工作原理HTTP协议定义Web客户端如何从Web服务器请求Web页面，以及服务器如何把Web页面传送给客户端。客户端向服务器发送一个请求报文，服务器以一个状态行作为响应。 HTTP请求&#x2F;响应的步骤 客户端输入网址，浏览器解析出协议、域名、端口号、资源路径 DNS域名解析得到ip地址 三次握手建立TCP链接 客户端发送http请求，服务器接收请求并相应数据 四次挥手释放TCP链接 浏览器解析HTML内容 HTTP 的 5 种方法GET—获取资源POST—传输资源PUT—更新资源DELETE—删除资源HEAD—获取报文首部 GET与POST的区别GET对数据进行查询，POST主要对数据进行增删改！ GET在浏览器回退时是无害的，而POST会再次提交请求 GET请求地址和参数会被浏览器主动缓存，而POST不会，除非手动设置 GET请求在URL中传送的参数是有长度的限制，而POST没有限制 GET参数通过URL传递，会暴露，不安全；POST放在Request Body中，相对更安全 HTTP报文的组成成分请求报文{ 请求行、请求头、空行、请求体 } 响应报文{ 状态行、响应头、空行、响应体 } Request Header:GET &#x2F;sample.Jsp HTTP&#x2F;1.1 &#x2F;&#x2F;请求行：{http方法、页面地址、http协议、http版本}Host: www.uuid.online/ &#x2F;&#x2F;请求的目标域名和端口号Origin: http://localhost:8081/ &#x2F;&#x2F;请求的来源域名和端口号 （跨域请求时，浏览器会自动带上这个头信息）Referer: https://localhost:8081/link?query=xxxxx &#x2F;&#x2F;请求资源的完整URIUser-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;67.0.3396.99 Safari&#x2F;537.36 &#x2F;&#x2F;浏览器信息Cookie: BAIDUID&#x3D;FA89F036:FG&#x3D;1; BD_HOME&#x3D;1; sugstore&#x3D;0 &#x2F;&#x2F;当前域名下的CookieAccept: text&#x2F;html,image&#x2F;apng &#x2F;&#x2F;代表客户端希望接受的数据类型是html或者是png图片类型Accept-Encoding: gzip, deflate &#x2F;&#x2F;代表客户端能支持gzip和deflate格式的压缩Accept-Language: zh-CN,zh;q&#x3D;0.9 &#x2F;&#x2F;代表客户端可以支持语言zh-CN或者zh(值得一提的是q(0~1)是优先级权重的意思，不写默认为1，这里zh-CN是1，zh是0.9)Connection: keep-alive &#x2F;&#x2F;告诉服务器，客户端需要的tcp连接是一个长连接 Response Header:HTTP&#x2F;1.1 200 OK &#x2F;&#x2F; 响应状态行：{http协议、http版本 响应码 状态}Date: Mon, 30 Jul 2018 02:50:55 GMT &#x2F;&#x2F;服务端发送资源时的服务器时间Expires: Wed, 31 Dec 1969 23:59:59 GMT &#x2F;&#x2F;比较过时的一种验证缓存的方式，与浏览器（客户端）的时间比较，超过这个时间就不用缓存（不和服务器进行验证），适合版本比较稳定的网页Cache-Control: no-cache &#x2F;&#x2F; 现在最多使用的控制缓存的方式，会和服务器进行缓存验证etag: “fb8ba2f80b1d324bb997cbe188f28187-ssl-df” &#x2F;&#x2F; 一般是Nginx静态服务器发来的静态文件签名，浏览在没有“Disabled cache”情况下，接收到etag后，同一个url第二次请求就会自动带上“If-None-Match”Last-Modified: Fri, 27 Jul 2018 11:04:55 GMT &#x2F;&#x2F;是服务器发来的当前资源最后一次修改的时间，下次请求时，如果服务器上当前资源的修改时间大于这个时间，就返回新的资源内容Content-Type: text&#x2F;html; charset&#x3D;utf-8 &#x2F;&#x2F;如果返回是流式的数据，我们就必须告诉浏览器这个头，不然浏览器会下载这个页面，同时告诉浏览器是utf8编码，否则可能出现乱码Content-Encoding: gzip &#x2F;&#x2F;告诉客户端，应该采用gzip对资源进行解码Connection: keep-alive &#x2F;&#x2F;告诉客户端服务器的tcp连接也是一个长连接 https 的基本概念https:是以安全为目标的 HTTP 通道，即 HTTP 下 加入 SSL 层进行加密。 http 和 https 的区别？• http 是超文本传输协议，信息是明文传输，https 则是具有安全性的 ssl 加密传输协议。• https 协议需要 ca 证书，费用较高。• 使用不同的链接方式，端口也不同，一般，http 协议的端口为 80，https 的端口为 443。• http 的连接很简单，是无状态的。 https 协议的工作原理 客户端使用 https url 访问服务器，则要求 web 服务器建立 ssl 链接。 web 服务器接收到客户端的请求之后，会将网站的证书（证书中包含了公钥），传输给客户端。 客户端和 web 服务器端开始协商 SSL 链接的安全等级，也就是加密等级。 客户端浏览器通过双方协商一致的安全等级，建立会话密钥，然后通过网站的公钥来加密会话密钥，并传送给网站。 web 服务器通过自己的私钥解密出会话密钥。 web 服务器通过会话密钥加密与客户端之间的通信。 https 协议的优缺点• HTTPS 协议要比 http 协议安全，可防止数据在传输过程中被窃取、改变，确保数据的完整性。• https 握手阶段比较费时，会使页面加载时间延长 50%，增加 10%~20%的耗电。• https 缓存不如 http 高效，会增加数据开销。• SSL 证书也需要钱，功能越强大的证书费用越高。• SSL 证书需要绑定 IP，不能再同一个 ip 上绑定多个域名，ipv4 资源支持不了这种消耗。 TCP&#x2F;IP网络模型链路层：负责封装和解封装IP报文，发送和接受ARP&#x2F;RARP报文等。网络层：负责路由以及把分组报文发送给目标网络或主机。传输层：负责对报文进行分组和重组，并以TCP或UDP协议格式封装报文。应用层：负责向用户提供应用程序，比如HTTP、FTP、Telnet、DNS、SMTP等。 TCP三次握手第一次握手：客户端发送syn包到服务器，并进入SYN_SENT状态，等待服务器确认第二次握手：服务器收到syn包，发送SYN+ACK包，此时服务器进入SYN_RECV状态；第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送ACK包，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。 TCP 四次挥手客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN&#x3D;1，其序列号为seq&#x3D;u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。 TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。服务器收到连接释放报文，发出确认报文，ACK&#x3D;1，ack&#x3D;u+1，并且带上自己的序列号seq&#x3D;v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最 后的数据）。服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN&#x3D;1，ack&#x3D;u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq&#x3D;w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。客户端收到服务器的连接释放报文后，必须发出确认，ACK&#x3D;1，ack&#x3D;w+1，而自己的序列号是seq&#x3D;u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。注意此时TCP连接还没有释放，必须经过2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，服务器结束TCP连接的时间要比客户端早一些。 TCP和UDP的区别TCP的三次握手保证了连接的可靠性; UDP是无连接的、不可靠的一种数据传输协议。 TCP仅支持单播传输，UDP 提供了单播，多播，广播的功能。 UDP的头部开销比TCP的更小，数据传输速率更高，实时性更好。 Cookie、sessionStorage、localStorage 的区别相同点：存储在客户端不同点： cookie数据大小不能超过4k；sessionStorage和localStorage的存储比cookie大得多，可以达到5M+cookie设置的过期时间之前一直有效；localStorage永久存储，浏览器关闭后数据不丢失除非主动删除数据；sessionStorage数据在当前浏览器窗口关闭后自动删除cookie的数据会自动的传递到服务器；sessionStorage和localStorage数据保存在本地 HTTP状态码及常见状态码HTTP状态码• 1xx：指示信息类，表示请求已接受，继续处理• 2xx：指示成功类，表示请求已成功接受• 3xx：指示重定向，表示要完成请求必须进行更近一步的操作• 4xx：指示客户端错误，请求有语法错误或请求无法实现• 5xx：指示服务器错误，服务器未能实现合法的请求 常见状态码• 200 OK：客户端请求成功• 301 Moved Permanently：所请求的页面已经永久重定向至新的URL• 302 Found：所请求的页面已经临时重定向至新的URL• 304 Not Modified 未修改• 403 Forbidden：对请求页面的访问被禁止• 404 Not Found：请求资源不存在• 500 Internal Server Error：服务器发生不可预期的错误原来缓冲的文档还可以继续使用• 503 Server Unavailable：请求未完成，服务器临时过载或宕机，一段时间后可恢复正常 • 1xx（临时响应）表示临时响应并需要请求者继续执行操作的状态码 o 100 - 继续 请求者应当继续提出请求。服务器返回此代码表示已收到请求的第一部分，正在等待其余部分 o 101 - 切换协议 请求者已要求服务器切换协议，服务器已确认并准备切换• 2xx（成功）表示成功处理了请求的状态码 o 200 - 成功 服务器已经成功处理了请求。通常，这表示服务器提供了请求的网页 o 201 - 已创建 请求成功并且服务器创建了新的资源 o 202 - 已接受 服务器已接受请求，但尚未处理 o 203 - 非授权信息 服务器已经成功处理了请求，但返回的信息可能来自另一来源 o 204 - 无内容 服务器成功处理了请求，但没有返回任何内容 o 205 - 重置内容 服务器成功处理了请求，但没有返回任何内容• 3xx（重定向）表示要完成请求，需要进一步操作；通常，这些状态代码用来重定向 o 300 - 多种选择 针对请求，服务器可执行多种操作。服务器可根据请求者（user agent）选择一项操作，或提供操作列表供请求者选择 o 301 - 永久移动 请求的网页已永久移动到新位置。服务器返回此响应（对GET或HEAD请求的响应）时，会自动将请求者转到新位置 o 302 - 临时移动 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求 o 303 - 查看其它位置 请求者应当对不同的位置使用单独的GET请求来检索响应时，服务器返回此代码 o 304 - 未修改 自上次请求后，请求的网页未修改过。服务器返回此响应，不会返回网页的内容 o 305 - 使用代理 请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理 o 307 - 临时性重定向 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有的位置来进行以后的请求• 4xx（请求错误）这些状态码表示请求可能出错，妨碍了服务器的处理 o 400 - 错误请求 服务器不理解请求的语法 o 401 - 未授权 请求要求身份验证。对于需要登录的网页，服务器可能返回此响应 o 403 - 禁止 服务器拒绝请求 o 404 - 未找到 服务器找不到请求的网页 o 405 - 方法禁用 禁用请求中指定的方法 o 406 - 不接受 无法使用请求的内容特性响应请求的网页 o 407 - 需要代理授权 此状态码与401（未授权）类似，但指定请求者应当授权使用代理 o 408 - 请求超时 服务器等候请求时发生超时 o 410 - 已删除 如果请求的资源已永久删除，服务器就会返回此响应 o 413 - 请求实体过大 服务器无法处理请求，因为请求实体过大，超出了服务器的处理能力 o 414 - 请求的URI过长 请求的URI（通常为网址）过长，服务器无法处理• 5xx（服务器错误）这些状态码表示服务器在尝试处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错 o 500 - 服务器内部错误 服务器遇到错误，无法完成请求 o 501 - 尚未实施 服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码 o 502 - 错误网关 服务器作为网关或代理，从上游服务器无法收到无效响应 o 503 - 服务器不可用 服务器目前无法使用（由于超载或者停机维护）。通常，这只是暂时状态 o 504 - 网关超时 服务器作为网关代理，但是没有及时从上游服务器收到请求 o 505 - HTTP版本不受支持 服务器不支持请求中所用的HTTP协议版本 HTTP 请求跨域问题跨域的原理跨域，是指浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的。跨域访问是被各大浏览器所默认禁止的。同源策略,是浏览器对 JavaScript 实施的安全限制，只要协议、域名、端口有任何一个不同，都被当作是不同的域。跨域原理，即是通过各种方式，避开浏览器的安全限制。 同源策略的作用①无法用js读取非同源的Cookie、LocalStorage 和 IndexDB这个主要是为了防止恶意网站通过js获取用户其他网站的cookie等用户信息。 ②无法用js获取非同源的DOM防止恶意网站通过iframe获取页面dom，从而窃取页面的信息。 ③无法用js发送非同源的AJAX请求防止恶意的请求攻击服务器窃取数据信息。 跨域资源共享原理：CORS由一系列HTTP响应头组成，这些响应头决定浏览器是否阻止前端JS代码跨域获取资源。浏览器的同源安全策略（协议、ip地址、端口号必须相同）默认会阻止网页”跨域“获取资源。但是如果接口服务器配置了CORS相关的HTTP响应头，就可以解除浏览器端的跨域访问限制。 CORS响应头部 描述 res.setHeader(‘Access-Control-Allow-Origin’,’*’) 设置允许访问该资源的外域URL res.setHeader(‘Access-Control-Allow-Headers’,’X-Custom-Header’) 对额外的请求头进行声明 res.setHeader(‘Access-Control-Allow-Methods’,’*’) 设置实际请求所允许使用的HTTP方法 预检请求只要符合以下任何条件之一，都需要进行预检请求： 请求方式为GET、POST、HEAD之外的请求Method类型 请求头中包含自定义头部字段 向服务器发送了application&#x2F;json格式的数据 在浏览器与服务器正式通信之前，浏览器会先发送OPTION请求进行预检，以获知服务器是否允许该实际请求，所以这一次的OPTION请求称为“预检请求”。服务器成功响应预检请求后，才会发送真正的请求，并携带真实数据。 JSONP接口浏览器通过&lt;script&gt;标签的src属性，请求服务器上的数据，同时，服务器返回一个函数的调用。这种请求数据的方式叫做JSONP JSONP不属于真正的Ajax请求，没有使用XMLHttpRequest这个对象。JSONP仅支持GET请求，不支持POST、PUT、DELETE请求。需要后台配合，将返回结果包装成callback(res)的形式。 JSONP接口要声明在CORS接口之前 防范那如果黑客植入script脚本通过jsonp的方式对服务器进行攻击，怎么办？可以通过页面设置的内容安全协议csp进行防范。","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"面试八股","slug":"面试八股","permalink":"http://example.com/tags/%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1/"}]},{"title":"uni-app","slug":"uni-app","date":"2024-10-24T03:02:00.000Z","updated":"2024-12-07T13:29:52.495Z","comments":true,"path":"2024/10/24/uni-app/","permalink":"http://example.com/2024/10/24/uni-app/","excerpt":"","text":"uniapp小兔鲜项目技术栈vue+pinia+TypeScript+ESLint+Prettier+git 配置 pages：业务页面存放的目录 index index.vue：index页面 static：存放应用引用的本地静态资源的目录 unpackage：非工程代码，一般存放运行或发行的编译结果 index.html：H5端页面 main.js：Vue初始化入口文件 App.vue：配置App全局样式、监听应用生命周期 pages.json：配置页面路由、导航栏、tabBar等页面类信息 manifest.json：配置appid、应用名称、logo、版本等打包信息 uni.scss：uni-app内置的常用样式变量 pages.json123456789101112131415161718192021222324252627282930313233343536373839404142&#123; &quot;pages&quot;: [ //页面路由及窗口表现 &#123; &quot;path&quot;: &quot;pages/index/index&quot;, &quot;style&quot;: &#123; &quot;navigationBarTitleText&quot;: &quot;首页&quot; &#125; &#125;, &#123; &quot;path&quot; : &quot;pages/my/my&quot;, &quot;style&quot; : &#123; &quot;navigationBarTitleText&quot; : &quot;我的&quot; &#125; &#125; ], &quot;globalStyle&quot;: &#123;//默认窗口表现 &quot;navigationBarTextStyle&quot;: &quot;white&quot;, &quot;navigationBarTitleText&quot;: &quot;uni-app&quot;, &quot;navigationBarBackgroundColor&quot;: &quot;#27BA9B&quot;, &quot;backgroundColor&quot;: &quot;#F8F8F8&quot; &#125;, &quot;tabBar&quot;: &#123; &quot;selectedColor&quot;: &quot;#27BA9B&quot;, &quot;list&quot;: [ &#123; &quot;pagePath&quot;: &quot;pages/index/index&quot;, &quot;text&quot;: &quot;首页&quot;, &quot;iconPath&quot;: &quot;static/tabs/home_default.png&quot;, &quot;selectedIconPath&quot;: &quot;static/tabs/home_selected.png&quot; &#125;, &#123; &quot;pagePath&quot;: &quot;pages/my/my&quot;, &quot;text&quot;: &quot;我的&quot;, &quot;iconPath&quot;: &quot;static/tabs/user_default.png&quot;, &quot;selectedIconPath&quot;: &quot;static/tabs/user_selected.png&quot; &#125; ] &#125;, &quot;uniIdRouter&quot;: &#123;&#125;&#125; 创建工程1git clone https://github.com/dcloudio/uni-preset-vue.git 安装uni-app插件和ts类型校验 uni-create-view uni-helper uniapp小程序扩展 Vue - Official 工作区禁用 @builtin typescript 插件（禁用后开启 Vue3 的 TS 托管模式） pnpm i -D miniprogram-api-typings @uni-helper&#x2F;uni-app-types 配置tsconfig.json 123456789101112131415161718192021222324252627282930313233&#123; &quot;compilerOptions&quot;: &#123; &quot;sourceMap&quot;: true, &quot;baseUrl&quot;: &quot;.&quot;, &quot;paths&quot;: &#123; &quot;@/*&quot;: [ &quot;./src/*&quot; ] &#125;, &quot;lib&quot;: [ &quot;esnext&quot;, &quot;dom&quot; ], // 类型声明文件 &quot;types&quot;: [ &quot;@dcloudio/types&quot;, // uni-app API 类型 &quot;miniprogram-api-typings&quot;, // 原生微信小程序类型 &quot;@uni-helper/uni-app-types&quot; // uni-app 组件类型 ] &#125;, // vue 编译器类型，校验标签类型 &quot;vueCompilerOptions&quot;: &#123; &quot;plugins&quot;: [ &quot;@uni-helper/uni-app-types/volar-plugin&quot; ] &#125;, &quot;include&quot;: [ &quot;src/**/*.ts&quot;, &quot;src/**/*.d.ts&quot;, &quot;src/**/*.tsx&quot;, &quot;src/**/*.vue&quot; ]&#125; 配置文件关联 项 值 manifest.json jsonc pages.json jsonc 引入 uni-ui 组件库操作步骤安装 uni-ui 组件库 1pnpm i @dcloudio/uni-ui 配置自动导入组件 1234567891011121314// pages.json&#123; // 组件自动导入 &quot;easycom&quot;: &#123; &quot;autoscan&quot;: true, &quot;custom&quot;: &#123; // uni-ui 规则如下配置 // [!code ++] &quot;^uni-(.*)&quot;: &quot;@dcloudio/uni-ui/lib/uni-$1/uni-$1.vue&quot; // [!code ++] &#125; &#125;, &quot;pages&quot;: [ // …省略 ]&#125; 安装类型声明文件 1pnpm i -D @uni-helper/uni-ui-types 配置类型声明文件 123456789101112131415161718// tsconfig.json&#123; &quot;compilerOptions&quot;: &#123; // ... &quot;types&quot;: [ &quot;@dcloudio/types&quot;, // uni-app API 类型 &quot;miniprogram-api-typings&quot;, // 原生微信小程序类型 &quot;@uni-helper/uni-app-types&quot;, // uni-app 组件类型 &quot;@uni-helper/uni-ui-types&quot; // uni-ui 组件类型 // [!code ++] ] &#125;, // vue 编译器类型，校验标签类型 &quot;vueCompilerOptions&quot;: &#123; &quot;plugins&quot;: [ &quot;@uni-helper/uni-app-types/volar-plugin&quot; ] &#125;&#125; 小程序端 Pinia 持久化说明：Pinia 用法与 Vue3 项目完全一致，uni-app 项目仅需解决持久化插件兼容性问题。 持久化存储插件安装持久化存储插件： pinia-plugin-persistedstate 1pnpm i pinia-plugin-persistedstate 插件默认使用 localStorage 实现持久化，小程序端不兼容，需要替换持久化 API。 基本用法&#123;28-31&#125; [stores/modules/member.ts]1234567891011121314151617181920212223242526272829303132import &#123; defineStore &#125; from &#x27;pinia&#x27;import &#123; ref &#125; from &#x27;vue&#x27;// 定义 Storeexport const useMemberStore = defineStore( &#x27;member&#x27;, () =&gt; &#123; // 会员信息 const profile = ref&lt;any&gt;() // 保存会员信息，登录时使用 const setProfile = (val: any) =&gt; &#123; profile.value = val &#125; // 清理会员信息，退出时使用 const clearProfile = () =&gt; &#123; profile.value = undefined &#125; // 记得 return return &#123; profile, setProfile, clearProfile, &#125; &#125;, // TODO: 持久化 &#123; persist: true, &#125;,) &#123;2,7&#125; [stores/index.ts]12345678910111213import &#123; createPinia &#125; from &#x27;pinia&#x27;import persist from &#x27;pinia-plugin-persistedstate&#x27;// 创建 pinia 实例const pinia = createPinia()// 使用持久化存储插件pinia.use(persist)// 默认导出，给 main.ts 使用export default pinia// 模块统一导出export * from &#x27;./modules/member&#x27; &#123;2,8&#125; [main.ts]123456789101112import &#123; createSSRApp &#125; from &#x27;vue&#x27;import pinia from &#x27;./stores&#x27;import App from &#x27;./App.vue&#x27;export function createApp() &#123; const app = createSSRApp(App) app.use(pinia) return &#123; app, &#125;&#125; 多端兼容网页端持久化 API 123// 网页端APIlocalStorage.setItem()localStorage.getItem() 多端持久化 API 123// 兼容多端APIuni.setStorageSync()uni.getStorageSync() 参考代码 &#123;7-20&#125;123456789101112131415161718192021// stores/modules/member.tsexport const useMemberStore = defineStore( &#x27;member&#x27;, () =&gt; &#123; //…省略 &#125;, &#123; // 配置持久化 persist: &#123; // 调整为兼容多端的API storage: &#123; setItem(key, value) &#123; uni.setStorageSync(key, value) // [!code warning] &#125;, getItem(key) &#123; return uni.getStorageSync(key) // [!code warning] &#125;, &#125;, &#125;, &#125;,) uni.request 请求封装请求和上传文件拦截器uniapp 拦截器： uni.addInterceptor 接口说明：接口文档 ::: tip 实现需求 拼接基础地址 设置超时时间 添加请求头标识 添加 token::: 参考代码 123456789101112131415161718192021222324252627282930313233// src/utils/http.ts// 请求基地址const baseURL = &#x27;https://pcapi-xiaotuxian-front-devtest.itheima.net&#x27;// 拦截器配置const httpInterceptor = &#123; // 拦截前触发 invoke(options: UniApp.RequestOptions) &#123; // 1. 非 http 开头需拼接地址 if (!options.url.startsWith(&#x27;http&#x27;)) &#123; options.url = baseURL + options.url &#125; // 2. 请求超时 options.timeout = 10000 // 3. 添加小程序端请求头标识 options.header = &#123; &#x27;source-client&#x27;: &#x27;miniapp&#x27;, ...options.header, &#125; // 4. 添加 token 请求头标识 const memberStore = useMemberStore() const token = memberStore.profile?.token if (token) &#123; options.header.Authorization = token &#125; &#125;,&#125;// 拦截 request 请求uni.addInterceptor(&#x27;request&#x27;, httpInterceptor)// 拦截 uploadFile 文件上传uni.addInterceptor(&#x27;uploadFile&#x27;, httpInterceptor) warning 注意事项 微信小程序端，需登录 微信公众平台 配置合法域名 👇 https://pcapi-xiaotuxian-front-devtest.itheima.net 封装 Promise 请求函数 返回 Promise 对象，用于处理返回值类型 成功 resolve 提取数据 添加泛型 失败 reject 401 错误 其他错误 网络错误 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556/** * 请求函数 * @param UniApp.RequestOptions * @returns Promise * 1. 返回 Promise 对象，用于处理返回值类型 * 2. 获取数据成功 * 2.1 提取核心数据 res.data * 2.2 添加类型，支持泛型 * 3. 获取数据失败 * 3.1 401错误 -&gt; 清理用户信息，跳转到登录页 * 3.2 其他错误 -&gt; 根据后端错误信息轻提示 * 3.3 网络错误 -&gt; 提示用户换网络 */type Data&lt;T&gt; = &#123; code: string msg: string result: T&#125;// 2.2 添加类型，支持泛型export const http = &lt;T&gt;(options: UniApp.RequestOptions) =&gt; &#123; // 1. 返回 Promise 对象 return new Promise&lt;Data&lt;T&gt;&gt;((resolve, reject) =&gt; &#123; uni.request(&#123; ...options, // 响应成功 success(res) &#123; // 状态码 2xx，参考 axios 的设计 if (res.statusCode &gt;= 200 &amp;&amp; res.statusCode &lt; 300) &#123; // 2.1 提取核心数据 res.data resolve(res.data as Data&lt;T&gt;) &#125; else if (res.statusCode === 401) &#123; // 401错误 -&gt; 清理用户信息，跳转到登录页 const memberStore = useMemberStore() memberStore.clearProfile() uni.navigateTo(&#123; url: &#x27;/pages/login/login&#x27; &#125;) reject(res) &#125; else &#123; // 其他错误 -&gt; 根据后端错误信息轻提示 uni.showToast(&#123; icon: &#x27;none&#x27;, title: (res.data as Data&lt;T&gt;).msg || &#x27;请求错误&#x27;, &#125;) reject(res) &#125; &#125;, // 响应失败 fail(err) &#123; uni.showToast(&#123; icon: &#x27;none&#x27;, title: &#x27;网络错误，换个网络试试&#x27;, &#125;) reject(err) &#125;, &#125;) &#125;)&#125; 代码规范如果没有统一代码风格，团队协作不便于查看代码提交时所做的修改。 统一代码风格 安装 eslint + prettier 1pnpm i -D eslint prettier eslint-plugin-vue @vue/eslint-config-prettier @vue/eslint-config-typescript @rushstack/eslint-patch @vue/tsconfig xxxxxxxxxx import create from ‘zustand’​&#x2F;&#x2F; 导入核心方法import { mountStoreDevtool } from ‘simple-zustand-devtools’​&#x2F;&#x2F; 省略部分代码…​​&#x2F;&#x2F; 开发环境开启调试if (process.env.NODE_ENV &#x3D;&#x3D;&#x3D; ‘development’) { mountStoreDevtool(‘channelStore’, useChannelStore)}​​export default useChannelStorejavascript 123456789101112131415161718192021222324252627282930313233343536373839404142434445/* eslint-env node */require(&#x27;@rushstack/eslint-patch/modern-module-resolution&#x27;)module.exports = &#123; root: true, extends: [ &#x27;plugin:vue/vue3-essential&#x27;, &#x27;eslint:recommended&#x27;, &#x27;@vue/eslint-config-typescript&#x27;, &#x27;@vue/eslint-config-prettier&#x27;, ], // 小程序全局变量 globals: &#123; uni: true, wx: true, WechatMiniprogram: true, getCurrentPages: true, getApp: true, UniApp: true, UniHelper: true, App: true, Page: true, Component: true, AnyObject: true, &#125;, parserOptions: &#123; ecmaVersion: &#x27;latest&#x27;, &#125;, rules: &#123; &#x27;prettier/prettier&#x27;: [ &#x27;warn&#x27;, &#123; singleQuote: true, semi: false, printWidth: 100, trailingComma: &#x27;all&#x27;, endOfLine: &#x27;auto&#x27;, &#125;, ], &#x27;vue/multi-word-component-names&#x27;: [&#x27;off&#x27;], &#x27;vue/no-setup-props-destructure&#x27;: [&#x27;off&#x27;], &#x27;vue/no-deprecated-html-element-is&#x27;: [&#x27;off&#x27;], &#x27;@typescript-eslint/no-unused-vars&#x27;: [&#x27;off&#x27;], &#125;,&#125; 配置 package.json 123456&#123; &quot;script&quot;: &#123; // ... 省略 ... &quot;lint&quot;: &quot;eslint . --ext .vue,.js,.ts --fix --ignore-path .gitignore&quot; &#125;&#125; 运行 1pnpm lint Git 工作流规范 安装并初始化 husky [pnpx]1pnpm dlx husky-init [npx]1npx husky-init 安装 lint-staged 1pnpm i -D lint-staged 配置 package.json 12345678&#123; &quot;script&quot;: &#123; // ... 省略 ... &#125;, &quot;lint-staged&quot;: &#123; &quot;*.&#123;vue,ts,js&#125;&quot;: [&quot;eslint --fix&quot;] &#125;&#125; 修改 .husky/pre-commit 文件 12npm test // [!code --]npm run lint-staged // [!code ++] 自定义导航配置123456789// src/pages.json&#123; &quot;path&quot;: &quot;pages/index/index&quot;, &quot;style&quot;: &#123; &quot;navigationStyle&quot;: &quot;custom&quot;, // 隐藏默认导航 &quot;navigationBarTextStyle&quot;: &quot;white&quot;, &quot;navigationBarTitleText&quot;: &quot;首页&quot; &#125;&#125; 组件安全区适配123456789101112&lt;!-- src/pages/index/componets/CustomNavbar.vue --&gt;&lt;script&gt;// 获取屏幕边界到安全区域距离const &#123; safeAreaInsets &#125; = uni.getSystemInfoSync()&lt;/script&gt;&lt;template&gt; &lt;!-- 顶部占位 --&gt; &lt;view class=&quot;navbar&quot; :style=&quot;&#123; paddingTop: safeAreaInsets?.top + &#x27;px&#x27; &#125;&quot;&gt; &lt;!-- ...省略 --&gt; &lt;/view&gt;&lt;/template&gt;","categories":[{"name":"项目","slug":"项目","permalink":"http://example.com/categories/%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://example.com/tags/vue/"}]},{"title":"api_server后端项目","slug":"api-server后端项目","date":"2024-10-17T02:43:35.000Z","updated":"2024-10-17T08:51:58.483Z","comments":true,"path":"2024/10/17/api-server后端项目/","permalink":"http://example.com/2024/10/17/api-server%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/","excerpt":"","text":"项目初始化安装依赖1npm i express cors mysql2 配置跨域、处理表单数据的中间件、路由 在项目根目录中，新建router文件夹，用来存放路由 在项目根目录中，新建router_handler文件夹，用来存放所有的路由处理函数模块 123456789// /router_handler/user.jsexports.regUser = (req, res) =&gt; &#123; res.send(&#x27;regUser ok&#x27;)&#125;exports.login = (req, res) =&gt; &#123; res.send(&#x27;login ok&#x27;)&#125; 12345678910// /router/user.jsconst express = require(&#x27;express&#x27;)const router = express.Router()const userHandler = require(&#x27;../router_handler/user&#x27;)router.post(&#x27;/reguser&#x27;, userHandler.regUser)router.post(&#x27;/login&#x27;, userHandler.login)module.exports = router 1234567891011121314151617// app.jsconst express = require(&#x27;express&#x27;)//创建服务器的实例对象const app = express()//配置cors跨域const cors = require(&#x27;cors&#x27;)app.use(cors())//配置解析application/x-www-form-urlencoded格式的表单数据的中间件app.use(express.urlencoded(&#123; extended: false &#125;))const useRouter = require(&#x27;./router/user.js&#x27;)app.use(&#x27;/api&#x27;, useRouter)app.listen(3007, () =&gt; &#123; console.log(&#x27;api server running at http://127.0.0.1:3007&#x27;);&#125;) 安装并配置mysql模块12345678910// /db/index.jsconst mysql = require(&#x27;mysql2&#x27;)const db = mysql.createPool(&#123; host: &#x27;127.0.0.1&#x27;, user: &#x27;root&#x27;, password: &#x27;123456&#x27;, database: &#x27;my_db_01&#x27;&#125;)module.exports = db 12345678910111213141516171819const db = require(&#x27;./db&#x27;)const bcrypt = require(&#x27;bcryptjs&#x27;)const userInfo = &#123; account: &#x27;sherlock&#x27;, password: &#x27;aptx4869&#x27;&#125;const sqlStr = &#x27;select * from rabbit_users where account=?&#x27;db.query(sqlStr, userInfo.account, (err, results) =&gt; &#123; if (err) &#123; console.log(err.message) &#125; if (results.length === 1 &amp;&amp; bcrypt.compareSync(userInfo.password, results[0].password)) &#123; console.log(&#x27;登录成功&#x27;) &#125; else &#123; res.cc(&#x27;登录失败！&#x27;) &#125;&#125;) 加密解密1npm i bcryptjs 12const bcrypt = require(&#x27;bcryptjs&#x27;)userinfo.password = bcrypt.hashSync(userinfo.password,10)","categories":[{"name":"项目","slug":"项目","permalink":"http://example.com/categories/%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"node.js","slug":"node-js","permalink":"http://example.com/tags/node-js/"}]},{"title":"数据库","slug":"数据库","date":"2024-10-15T09:17:26.000Z","updated":"2024-10-22T12:14:50.545Z","comments":true,"path":"2024/10/15/数据库/","permalink":"http://example.com/2024/10/15/%E6%95%B0%E6%8D%AE%E5%BA%93/","excerpt":"","text":"数据库系统概论概述 四个基本概念 数据(data)：描述事物的符号记录称为数据 数据库(DB)：长期储存在计算机内的，有组织的、可共享的大量数据的集合。 数据库管理系统(DBMS)：计算机基础软件。具有 数据定义功能(DDL)，定义数据对象的组成和结构 数据组织存储和管理 数据操纵功能（DML），实现数据的增删改查 数据库的事务管理和运行管理 数据库的建立和维护功能 数据库系统（DBS）：由数据库（DB）、数据库管理系统（DBMS）、应用程序（APP）和数据库管理员（DBA）组成的存储、管理、处理和维护数据的系统。 数据库系统的特点 数据结构化 数据共享性高、冗余度低且易扩充 数据独立性高 物理独立性：应用程序与数据库中数据的物理存储相互独立。 逻辑独立性：应用程序与数据库的逻辑结构相互独立。 数据由数据库管理系统统一管理和控制 数据模型——数据库系统的核心和基础 两类数据模型 概念模型 按用户的观点来对数据和信息建模 逻辑模型和物理模型 逻辑模型：按计算机系统的观点对数据建模。包括层次模型、网状模型、关系模型、面向对象模型、对象关系数据类型、半结构化数据类型等 物理模型：数据在系统内部的表示方式和方法 逻辑模型到物理模型的转换，主要由数据库管理系统实现 概念模型 基本概念 实体：客观存在并可区分的事物 属性：实体具有的某一特性 码：唯一标志实体的属性 实体型：用实体名及其属性名集合来刻画和抽象同类实体。 联系： 实体之间的联系，通常指不同实体集之间的联系。 一种表示方法：实体-联系方法，也称为E-R模型 数据模型的组成要素 数据结构 数据操作 数据的完整性约束条件 关系模型 术语： 关系：对应一张表 元组：表中的一行 属性：表中的一列 码：某个属性组，唯一确定一个元组 域：一组具有相同数据类型是的集合 关系模式：对关系的描述 优点 与格式化模型不同，建立在严格的数学概念基础上 数据独立性保密性更高 概念单一、结构简单、清晰 存取路径对用户透明 缺点 查询效率不如格式化模型数据 数据库系统的结构 模式 模式是相对稳定的，实例是相对变动的 三级模式结构 模式，也称逻辑模式，是所有用户的公共数据视图，模式不涉及物理存储和硬件环境，与应用程序和开发环境无关。 外模式，也称子模式或用户模式，数据库用户的数据视图，外模式通常是模式的子集。 内模式，也称存储模式，是数据在数据库内部的组织方式 二级映象功能与数据独立性 数据独立性是指应用程序与数据库的数据结构之间相互独立 在物理结构改变时，尽量不影响应用程序，称为物理数据独立性 在逻辑结构改变时，尽量不影响应用程序，称为逻辑数据独立性 外模式&#x2F;模式映像 模式改变时，可使外模式保持不变，保证逻辑独立性 模式&#x2F;内模式映像 存储结构发生改变时，可使模式保持不变，保证物理独立性 数据库模式是数据库的中心与关键，应首先确定。 关系数据库结构及定义 在数据库中存储的是数据以及数据之间的联系。 定义 域 笛卡尔积 元组和分量 基数：一个域允许的不同取值的个数 关系 关系的度（单元关系，二元关系） 候选码（能唯一表示一个元组的属性集）——&gt;挑一个作为主码 主属性：候选码的诸属性其余——非主属性或非码属性 全码：关系模式的所有属性是这个关系模式的候选码 三种类型： 基本关系，又称基本表 查询表 视图表 六条性质： 行的顺序无所谓 列的顺序无所谓 列是同质的 不同列可出自同一域 任意两个元组候选码不同 分量必须取原子值（最基本的一条，满足即为第一范式） 关系模式 关系模式是静态的、稳定的，而关系是动态的 基本关系操作 查询操作 选择 投影 并 差 笛卡尔积&#x2F;&#x2F;以上5种基本数据操作 连接 除 交 插入、删除、修改操作 结构化查询语言SQL集 查询 数据定义语言 数据操纵语言 数据控制语言于一体的关系数据语言。 关系的完整性 实体完整性：若属性A是关系R的主属性，则A不能取空值。 参照完整性：若属性F是关系R的外码，它与基本关系S的主码相对应，则对于R上的每一个元组在F上的值应该或者取空值、或者取S中某个元组的主码值。 用户定义的完整性 实体完整性和参照完整性是关系的两个不变性。 关系代数 传统集合运算 并 差 交 笛卡尔积 关系运算象集：给定关系R（X,Z）,x在R中的象集为Zx，表示R中属性组X上的属性值为x的诸元组在Z上分量的集合，是属性组值的子集关系运算的定义： 选择 投影 连接常用： 等值连接 自然连接，一种特殊的等值连接，它要求两个关系中进行比较的分量必须是同名的属性组，并且在结果中把重复的属性列去掉。 外连接：保留悬浮元组 左外连接：只保留左边关系的悬浮元组 右外连接：只保留右边关系的悬浮元组 除：若T为R除以S的结果，则T包含所有在R中而不在S中的属性及其值，且T与S的所有组合均在R中。 SQL SQL的特点 综合统一 高度非过程化 面向集合的操作方式 以同一种语法结构提供多种使用方式：交互式和嵌入式 语言简洁，易学易用 SQL的基本概念 外模式包括视图和若干基本表，模式包括若干基本表，内模式包括若干存储文件。 在关系数据库管理系统中一个关系就对应一个基本表。一个或多个表对应一个存储文件，一个表可以带若干索引。索引也放在存储文件当中。 数据定义模式的定义与删除 建立模式12CREATE SCHEMA &lt;模式名&gt; AUTHORIZATION &lt;用户名&gt;[&lt;表定义子句&gt;|&lt;视图定义子句&gt;|&lt;授权定义子句&gt;]; 删除模式1DROP SCHEMA &lt;CASCADE|RESRICT&gt;; 基本表的定义、删除与修改 创建表123456CREATE TABLE &lt;表名&gt; (&lt;列名&gt;&lt;数据类型&gt;[&lt;列级完整性约束条件&gt;][,&lt;列名&gt;&lt;数据类型&gt;[&lt;列级完整性约束条件&gt;]]...[,&lt;表级完整性约束条件&gt;]); 模式与表 在表中给出模式名，如CREATE TABLE “&lt;模式名&gt;”.&lt;表名&gt; 创建模式语句同时创建表 设置所属模式，如下123SHOW search_path; #显示当前搜索路径SET search_path TO &quot;&lt;模式名&gt;&quot;,PUBLIC; #设置搜索路径CREATE TABLE &lt;表名&gt;(); 修改基本表123456ALTER TABLE &lt;表名&gt;[ADD [COLUMN] &lt;新列名&gt;&lt;数据类型&gt; [完整性约束]][ADD &lt;表级完整性约束&gt;][DROP[COLUMN]&lt;列名&gt;[CASCADE|RESCTICT]][DROP CONSTRAINT&lt;完整性约束名&gt;[CASCADE|RESTRICT]][ALTER COLUMN &lt;列名&gt;&lt;数据类型&gt;]; 删除表1DROP TABLE &lt;表名&gt; [RESTRICT|CASCADE]; 索引的建立与删除 建立索引12CREATE [UNIQUE] [CLUSTER] INDEX &lt;索引名&gt;ON &lt;表名&gt;(&lt;列名&gt;[&lt;ASC|DESC&gt;][,&lt;列名&gt;[&lt;ASC|DESC&gt;]]...); 修改索引1ALTER INDEX &lt;旧索引名&gt; RENAME TO &lt;新索引名&gt;; 删除索引1DROP INDEX &lt;索引名&gt;; 数据操纵数据查询 SELECT语句 12345SELECT [ALL|DISTINCT]&lt;目标列表达式&gt;[,&lt;目标列表达式&gt;]...FROM &lt;表名或视图名&gt; [,&lt;表名或视图名&gt;...]|(SELECT语句)[AS](别名)[WHERE &lt;条件表达式&gt;][GROUP BY &lt;列名1&gt; [HAVING &lt;条件表达式&gt;]][ORDER BY &lt;列名2&gt; [ASC|DESC]]; tips SELECT * —-查询全部列 常用查询条件 &#x3D;,&gt;,&lt;,&gt;&#x3D;,&lt;&#x3D;,&lt;&gt;,!&gt;,!&lt;;NOT+ 上述比较符 [NOT] BETWEEN AND [NOT] IN [NOT] LIKE IS [NOT] NULL AND,OR,NOT 聚集函数 COUNT(*) ！！！不忽略空值NULL COUNT([DISTINCT|ALL]&lt;列名&gt;) SUM([DISTINCT|ALL]&lt;列名&gt;) AVG([DISTINCT|ALL]&lt;列名&gt;) MAX([DISTINCT|ALL]&lt;列名&gt;) MIN([DISTINCT|ALL]&lt;列名&gt;) GROUP BY子句 + HAVING子句 连接查询 等值与非等值连接查询 自身连接（要给表取两个别名） 外连接 多表连接 嵌套查询 相关定义： 一个SELECT-FROM-WHERE语句称为一个查询块，将一个查询块嵌套在另一个查询块的WHERE子句或HAVING短语的条件中的查询称为嵌套查询 外层查询又称父查询，内层查询又称子查询 子查询不能使用ORDER BY语句 不相关子查询：子查询的查询条件不依赖于父查询 相关子查询：子查询的查询条件依赖于父查询，不能一次性将子查询的结果求解出来，而是反复求值 嵌套查询中维持ANY&#x2F;SOME表示任一，ALL表示所有（任意） 带有EXISTS谓词的子查询，产生ture或false。（！！！所有带有IN谓词，、比较运算符、ANY和ALL谓词的子查询都能用带EXISTS的子查询等价替代） 空值进行四则运算还是空值 集合查询–各查询结果列数必须相同，对应数据项的数据类型也必须相同 UNION–自动去掉重复元组，如要保留则用UNION ALL操作符。 INTERSECT EXCEPT 派生表查询：子查询嵌套于FROM子句中。（！！！AS关键字可以省略，但必须为派生关系指定别名） 插入数据12INSERT INTO &lt;表名&gt;[(&lt;属性列1&gt;[,&lt;属性列2&gt;]...)]VALUES(&lt;常量1&gt;[,&lt;常量2&gt;]...); 或 12INSERT INTO &lt;表名&gt;[(&lt;属性列1&gt;[,&lt;属性列2&gt;]...)]子查询; 修改数据123UPDATE &lt;表名&gt;SET &lt;列名&gt;=&lt;表达式&gt; [,&lt;列名&gt;=&lt;表达式&gt;]...[WHERE &lt;条件&gt;]; 删除数据12DELETE FROM &lt;表名&gt;[WHERE &lt;条件&gt;]; 视图——只存放定义，不存放数据 建立视图123CREATE VIEW &lt;视图名&gt; [&lt;列名&gt;[,&lt;列名&gt;]...]AS &lt;子查询&gt;[WITH CHECK OPTION]; 创建视图时并不执行SELECT语句，对视图查询时，才将数据查出。 删除视图1DROP VIEW &lt;视图名&gt; CASCADE; 视图的作用 视图能够简化用户操作 视图使用户能以多角度看待同一数据 视图对重构数据库提供了一定程度的逻辑独立性 视图能够对机密数据提供安全保护 更加清晰地表达查询 数据库安全授予与收回权限（控制类指令）–实现自主存取控制 用户权限由两要素组成：数据库对象和操作类型 GRANT：授予用户对列的操作权限1234GRANT &lt;权限&gt;[,&lt;权限&gt;]...ON &lt;对象类型&gt;&lt;对象名&gt;[,&lt;对象类型&gt;&lt;对象名&gt;]...TO &lt;用户&gt;[,&lt;用户&gt;]...[WITH GRANT OPTION]; REVOKE1234REVOKE &lt;权限&gt;[,&lt;权限&gt;]...ON &lt;对象类型&gt;&lt;对象名&gt;[,&lt;对象类型&gt;&lt;对象名&gt;]...FROM &lt;用户&gt;[,&lt;用户&gt;]...[CASCADE|RESTRINCT]; 创建数据库模式的权限1CREATE USER &lt;username&gt; [WITH][DBA|RESOURCE|CONNECT]; 数据库角色 数据库角色是被命名的一组与数据库操作相关的权限，角色是权限的集合。 创建角色1CREATE ROLE &lt;角色名&gt;; 给角色授权123GRANT &lt;权限&gt;[,&lt;权限&gt;]...ON &lt;对象类型&gt; &lt;对象名&gt;TO &lt;角色&gt;[,&lt;角色&gt;]...; 将一个角色授权给其他角色或用户123GRANT &lt;角色1&gt;[,&lt;角色2&gt;]...TO &lt;角色3&gt;[,&lt;用户1&gt;]...[WITH ADMIN OPTION]; 角色权限的收回123REVOKE &lt;权限&gt;[,&lt;权限&gt;]...ON &lt;对象类型&gt; &lt;对象名&gt;FROM &lt;角色&gt;[,&lt;角色&gt;]... 强制存取控制敏感度标记：TS&gt;&#x3D;S&gt;&#x3D;C&gt;&#x3D;P规则： 仅当主体的许可证级别大于或者等于客体的密级时，改主体才能读取相应的客体。 仅当主体的许可证级别小于或者等于客体的密级时，改主体才能写相应的客体。 审计功能–一种事后检查的安全机制 记录一切成功和不成功的操作-AUDIT&#x2F;NOAUDIT12[NO]AUDIT &lt;操作名&gt;[,&lt;操作名&gt;]...ON &lt;表名&gt;; 数据加密 存储加密 传输加密 其他安全性保护 推理控制 隐蔽信道 数据隐私保护 数据库完整性——数据库的正确性和相容性 实体完整性 检查主码值是否唯一，如果不唯一则拒绝插入或修改 检查主码的各个属性是否为空，只要有一个空值就拒绝插入或修改。 参照完整性 （破坏参照完整性的）操作 违约处理 参照表插入元组 拒绝 参照表修改外码值 拒绝 被参照表删除元组 拒绝&#x2F;级联删除&#x2F;设置为空值 被参照表修改主码值 拒绝&#x2F;级联删除&#x2F;设置为空值 3. 用户自定义的完整性 1. 属性上的约束条件——不满足则拒绝执行 - NOT NULL - UNIQUE - CHECK短语 2. 元组上的约束条件——不满足则拒绝执行 完整性命令约束命名子句 完整性约束命名子句(新建表时)1CONSTRAINT &lt;完整性约束条件名&gt; &lt;完整性约束条件&gt;; 修改表中的完整性限制 删除完整性约束 12ALTER TABLE &lt;表名&gt;DROP CONSTRAINT &lt;完整性约束条件名&gt;; 增加完整性约束 12ALTER TABLE &lt;表名&gt;ADD CONSTRAINT &lt;完整性约束条件名&gt; &lt;完整性约束条件&gt;; 断言 通过声明断言来指定更具一般性的约束。可以定义涉及多个表或聚集操作的比较复杂的完整性约束，任何使断言不为真值的操作都会被拒绝执行。 创建断言语句1CREATE ASSERTION &lt;断言名&gt; &lt;CHECK 子句&gt;; 删除断言语句1DROP ASSERTION &lt;断言名&gt;; 触发器 定义触发器12345CREATE TRIGGER &lt;触发器名&gt;&#123;BEFORE|AFTER&#125; &lt;触发事件&gt; ON &lt;表名&gt;REFERENCES NEW|OLD ROW AS &lt;变量&gt;FOR EACH &#123;ROW|STATEMENT&#125;[WHEN &lt;触发条件&gt;] &lt;触发动作体&gt;; 激活触发器， 多个触发器时： 执行该表上的BEFORE触发器 激活触发器的SQL语句 执行该表上的AFTER触发器 删除触发器1DROP TRIGGER &lt;触发器名&gt; ON &lt;表名&gt;; 关系数据理论 相关术语 函数依赖：R(U)是属性集U上的关系模式，X，Y是U的子集。对于R的任意一个可能关系r，r中不可能存在两个元组在X上的属性值相等，在Y上的属性值不等，称Y函数依赖于X，记作X-&gt;Y。 若Y$\\subseteqq$X，为平凡的函数依赖。 部分函数依赖：X-&gt;Y，若对于X的每一个真子集X’，X’-&#x2F;-&gt;Y，则称Y对X完全函数依赖，记作X$\\frac{F}{}$&gt;Y。否则称为部分函数依赖。 传递函数依赖：X-&gt;Y,Y-&#x2F;-&gt;X，Y-&gt;Z(Z$\\subsetneqq$Y，Y$\\subsetneqq$X)，称Z传递函数依赖于X，记作X$\\frac{传递}{}$&gt;Z。 超码：K为R&lt;U,F&gt;中的属性或属性组合，K-&gt;U，称K为超码。 候选码：K$\\frac{F}{}$&gt;U,称K为候选码。(特殊的超码) 主码：选定的一个候选码。 全码：整个属性组是码。 主属性：包含在任何一个候选码中的属性。 非主属性&#x2F;非码属性：不包含在任何候选码中的属性。 多值依赖：X，Y，Z是U的子集，且Z&#x3D;U-X-Y，若给定一对(x,z)值，有一组Y值，这组值仅仅决定于x值而与z无关。称Y多值依赖于X，记作X-&gt;-&gt;Y。 闭包：$X^{+}{F}$&#x3D;{A|X-&gt;A能由F导出}，$X^{+}{F}$称为属性集X关于函数依赖集F的闭包。 最小依赖集&#x2F;最小覆盖： 任一函数依赖右部仅含一个属性。 函数依赖个数精简到最少 函数依赖的左部精简到最少 范式 第一范式（1NF）：每一个分量都是不可分的数据项 第二范式（2NF）：1NF&amp;不存在非主属性对任一候选码的部分函数依赖。 第三范式（3NF）：2NF&amp;不存在非主属性对任一候选码的传递函数依赖。 所有属性都是主属性的模式最高一定可以达到 BC范式（BCNF）:每一个决定因素都包含码，消除了插入、删除的异常。满足： 3NF 所有主属性对于任一不包含它的码也是完全函数依赖 没有任何属性完全函数依赖于非码的任何一组属性。 (全码组成的关系模式最高一定可以到达||3NF+唯一候选码||二元模式最高一定可以到达) 4NF：属性之间不允许有非平凡且非函数依赖的多值依赖 判断范式 求候选码 如果有属性只在函数依赖集的左边出现，则该属性一定包含在候选码中（继续求它的闭包，如果他的闭包是属性全集，则为候选码，如果不是，则需要结合其他属性求闭包，继而判断是否是候选码） 只在函数依赖集右边出现的属性，一定不属于候选码 对于左右都出现过的属性：（1）先结合只在左边出现的属性求闭包，看看是否包括所有属性，如果他的闭包是属性全集，则为候选码；（2）如果没有包括所有属性，就结合其他左右都出现的求闭包，看看是否包括所有属性，如果他的闭包是属性全集，则为候选码 如果有属性不在函数依赖集中出现（外部属性），那么一定包含在候选码中（继续求它的闭包，如果他的闭包是属性全集，则为候选码，如果不是，则需要结合其他属性求闭包，继而判断是否是候选码） 分主属性、非主属性 判断范式。 规范化1NF$\\frac{消除非主属性对码的部分函数依赖}{}$&gt;2NF$\\frac{消除非主属性对码的传递函数依赖}{}$&gt;3NF$\\frac{消除主属性对码的部分和传递函数依赖}{}$&gt;BCNF$\\frac{消除非平凡且非函数依赖的多值依赖}{}$&gt;4NF 函数依赖的公理系统 推理规则——Armstrong公理系统 自反率：若Y$\\subseteqq$X$\\subseteqq$U，则X——&gt;Y被F所蕴含 增广率：若X——&gt;Y被F所蕴含，且Z$\\subseteqq$U，则XZ——&gt;YZ被F所蕴含 传递率：若X——&gt;Y及Y——&gt;Z被F所蕴含，则X——&gt;Z被F所蕴含 模式的分解无损连接性 保证不丢失信息 判断无损连接 保持函数依赖性 减轻或解决各种异常情况 判断保持函数依赖： 求投影F’&#x3D;F1∪F2∪…Fn是否包含全部函数依赖。 对于缺少的函数依赖，求左侧属性在判断F’中的闭包是否蕴含右侧。（$F’^{+}$&#x3D;&#x3D;$F^{+}$?） 模式分解算法 保持函数依赖，最多可以达到3NF。 保持无损连接性，最多可以达到4NF。 保持函数依赖和无损连接性，最多可以达到3NF 数据库恢复技术 事务的基本概念 事务的定义：用户定义的一个数据库操作序列，这些操作要么全做，要么全不做，是一个不可分割的工作单位。 事务通常以BEGIN TRANSACTION开始，以COMMIT（提交）或ROLLBACK（回滚）结束。 事务的ACID特性： 原子性：事务是数据库的逻辑工作单位，事务中所包括的诸操作要么都做，要么都不做。 一致性：事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。 隔离性：对于并发执行而言，一个事务的执行不能被其他事务干扰。 持久性：也称永久性，一个事务一旦提交，它对数据库中数据的改变就应该是永久的。 故障的种类 事务内部的故障：非预期的，不能由应用程序处理的。 常见原因： 运算溢出 并发进程发生死锁而被选中撤销该事务 违反了某些完整性限制 恢复操作：事务撤销（UNDO）：反向扫描日志文件，查找事务的更新操作执行逆操作 系统故障：称为软故障，指造成系统停止运转的任何事件，使得系统要重新启动 常见原因 特定类型的硬件错误 操作系统故障 DBMS代码错误 系统断电 恢复策略 正向扫描日志文件 发生系统故障时，事务未提交：强行撤销所有未完成的事务 发生系统故障时，事务已提交，但缓冲区的信息未完全写回到磁盘上：重做所有已提交的事务。 介质故障：称为硬故障，指外存故障。 常见原因 磁盘损坏 磁头碰撞 操作系统的某种潜在错误 瞬时强磁场干扰 恢复策略 装入数据库发生介质故障前某个时刻的数据副本 重做此时起的所有成功事务，将这些事务已提交的结果重新记入数据库。 使用检查点改善恢复效率 数据库镜像 计算机病毒 人为故障或破坏的计算机程序，可以繁殖和传播，等同于介质故障。 恢复的实现技术 基本原理：冗余——利用存储在系统其他地方的冗余数据来重建数据库中已被破坏或不正确的那部分数据。 如何建立冗余数据？数据转储和登记日志文件 数据转储 转储方式分类 海量转储 增量转储 转储状态分类 动态转储 静态转储 登记日志文件——用来记录事务对数据库的更新操作的文件 登记内容（每个登记内容作为日志文件的一个日志记录）： 各个事务开始标记 各个事务结束登记 各个事务的所有更新操作 日志记录内容 事务标识 操作类型 操作对象 更新前数据的旧值 更新后数据的新值 作用： 进行事务故障和系统故障恢复 协助后备副本对介质故障进行恢复 登记日志文件时必须遵循两条原则： 登记的次序严格按并发事务执行的时间次序。 必须先写日志文件，后写数据库。 并发控制 概述 事务是并发控制的基本单位 并发操作带来的数据不一致性 丢失修改 读“脏”数据 不可重复读&#x2F;幻影现象 主要方法 封锁 时间戳 乐观控制法 多版本控制 封锁 排他锁&#x2F;写锁（X锁） 共享锁（S锁） 封锁协议： 一级封锁协议：修改数据之前必须加X锁，直到事务结束才释放——解决丢失修改 二级封锁协议：读数据之前必须加S锁，读完后释放——解决读脏数据 三级封锁协议：读数据之前必须加S锁，直到事务结束才释放——解决不可重复读 活锁和死锁 当两个（或多个）并发的事务分别等待对方释放封锁的资源，而使事务处于长期等待状态的现象称为死锁。 解决活锁的方法：先来先服务策略 解决死锁的两种方法： 预防： 一次封锁法:为了完成一个事务，一次性封锁所需要的全部表 顺序封锁法:所有的事务约定都按相同的顺序来封锁表 诊断与解除 超时法 事务等待图法 并发调度的可串行性——并发事务正确调度的准则 冲突可串行化是可串行化的充分条件 两段锁协议 事务分为两个阶段 扩展阶段，获得封锁 收缩阶段，释放封锁 事务遵守两段锁协议是可串行化的充分条件 封锁的粒度 封锁对象的大小称为封锁粒度，封锁对象可以是逻辑对象，也可以是物理对象 封锁粒度越大、数据库所能封锁的数据单元就越少，并发度就越小，系统开销越小；反之，封锁粒度越小、数据库所能封锁的数据单元就越多，并发度就越大，系统开销越大 多粒度封锁 显示封锁：应事务要求直接加到数据对象上的锁 隐式封锁：由于上级对象加锁而导致该数据对象加上了锁","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"node.js","slug":"node-js","date":"2024-10-12T13:31:48.000Z","updated":"2024-12-18T11:27:40.796Z","comments":true,"path":"2024/10/12/node-js/","permalink":"http://example.com/2024/10/12/node-js/","excerpt":"","text":"fs文件系统读取文件内容12345678910111213141516171819202122232425const fs = require(&quot;fs&quot;);// 异步读取fs.readFile(&#x27;input.txt&#x27;,&#x27;utf8&#x27;, function (err, data) &#123; //如果读取成功，则err的值为null //如果读取失败，则err的值为错误对象，dataStr的值为undefined if (err) &#123; return console.error(err); &#125; console.log(&quot;异步读取: &quot; + data.toString());&#125;);// 同步读取var data = fs.readFileSync(&#x27;input.txt&#x27;);console.log(&quot;同步读取: &quot; + data.toString());console.log(&quot;程序执行完毕。&quot;);//执行结果同步读取: 文件读取实例程序执行完毕。异步读取: 文件读取实例 写入文件内容1234567const fs = require(&quot;fs&quot;);fs.writeFile(&#x27;input.txt&#x27;, &#x27;我是通 过fs.writeFile 写入文件的内容&#x27;, function(err) &#123; if (err) &#123; return console.error(err); &#125;&#125;) 处理路径问题__dirname表示当前文件所处目录 path路径模块1const path = require(&quot;path&quot;) 方法 描述 path.join([path1][, path2][, …]) 用于连接路径。 path.basename() 获取路径中的文件名 path.extname(p) 获取文件的扩展名 path.dirname(p) 返回路径中代表文件夹的部分 path.resolve([from …], to) 将 to 参数解析为绝对路径 path.relative(from, to) xxxxxxxxxx import requestInstance from ‘.&#x2F;http’​export { requestInstance as http }typescript http创建服务器123456789const http = require(&#x27;http&#x27;)const server = http.createServer()server.on(&#x27;request&#x27;, function (req, res) &#123; console.log(&#x27;Someone visit our web server.&#x27;)&#125;)server.listen(8080, function () &#123; console.log(&#x27;服务器启动了，运行在http://127.0.0.1:8080&#x27;)&#125;) req请求对象属性 描述 req.url 客户端请求的url地址 req.method 客户端请求方式 req.session 访问和使用session对象，需要配置express-session中间件 req.session.destroy() 清空session对象 res响应对象属性 描述 res.end() 向客户端响应内容 res.writeHead(200, { “Content-Type”: “text&#x2F;html; charset&#x3D;utf-8” }) 写入响应头 res.setHeader(“Content-Type”,”text&#x2F;html; charset&#x3D;utf-8”) 设置响应头的内容类型，解决中文乱码 模块化模块作用域自定义模块中定义的方法、变量等成员，只能在当前模块内被访问，这种模块级别的访问限制，叫做模块作用域。 module对象在每一个.js自定义模块中都有一个module对象，它里面存储了和当前模块有关的信息 module.exports可以将模块内的成员共享出去，供外界使用。外界用require()方法导入自定义模块时，得到的就是module.exports所指向的对象（也可写成exports） npm命令 npm init -y：新建包管理配置文件 npm uninstall：卸载包 npm install -D：安装包到开发环境中，这些包只在项目开发环境中用到，如sass,记录在devDependencies节点中 npm install：安装到开发和生产环境中，记录在dependencies节点中 npm install -g：安装为全局包 Express封装的http模块 安装1npm i express 创建基本的Web服务器1234567891011121314//1.导入 expressconst express = require(&#x27;express&#x27;)//2.创建 web 服务器const app = express()app.get(&#x27;/user&#x27;, (req, res) =&gt; &#123; res.send(&#123; name: &#x27;hzx&#x27;, age: 20, gender: &#x27;男&#x27; &#125;)&#125;)app.post(&#x27;/user&#x27;, (req, res) =&gt; &#123; res.send(&#x27;请求成功&#x27;)&#125;)//3. 启动 web 服务器app.listen(80, () =&gt; &#123; console.log(&#x27;express server running at http://127.0.0.1&#x27;)&#125;) 获取请求参数req.query 通过?匹配到的参数 req.params 通过:匹配到的动态参数 req.body 请求体数据，需要调用express.json()和express.urlencoded({extended:false})中间件 托管静态资源app.use(express.static(‘public’)) 如果要托管多个静态资源目录，多次调用express.static()函数，访问静态资源函数时，根据目录的添加顺序查找所需的文件 挂载路径前缀：app.use(“&#x2F;public”,express.static(‘public’)) nodemonnodemon能够监听项目文件的变动，当代码被修改后，nodemon会自动帮我们重启项目。 安装npm install -g nodemon 使用nodemon test.js 路由Express中的路由分3部分组成，分别是请求的类型、请求的URL地址、处理函数 1app.METHOD(PATH,HANDLER(req,res)) 模块化路由为了方便对路由进行模块化的管理，推荐将路由抽离为单独的模块 创建路由模块对应的.js文件 调用express.Router()函数创建路由对象 向路由对象上挂载具体的路由 module.exports向外共享路由对象 使用app.use()函数注册路由模块 示例代码12345678910//router.jsconst express = require(&#x27;express&#x27;)const router = express.Router()router.get(&#x27;/user/list&#x27;, (req, res) =&gt; &#123; res.send(&#x27;Get user list.&#x27;)&#125;)router.post(&#x27;/user/add&#x27;, (req, res) =&gt; &#123; res.send(&#x27;Add new user.&#x27;)&#125;)module.exports = router 12345678910111213//index.js//1.导入 expressconst express = require(&#x27;express&#x27;)//2.创建 web 服务器const app = express()//注册路由模块const router = require(&#x27;./router&#x27;)app.use(router)//3. 启动 web 服务器app.listen(80, () =&gt; &#123; console.log(&#x27;express server running at http://127.0.0.1&#x27;)&#125;) 中间件作用：对请求进行预处理 中间件的格式123app.get(&#x27;/&#x27;,function(req,res,next)&#123;next()//把流转关系转交给下一个中间件或者路由&#125;) 全局生效的中间件123456789101112const app = express()const mw = function (req,res,next)&#123; console.log(&#x27;这是最简单的中间件函数&#x27;) next()&#125;app.use(mw)app.get(&#x27;/&#x27;,(req,res)=&gt;&#123; res.send(&#x27;Home Page.&#x27;)&#125;)app.get(&#x27;/user&#x27;,(req,res)=&gt;&#123; res.send(&quot;User Page&quot;)&#125;) 局部生效的中间件12345678const app = express()const mw = function (req,res,next)&#123; console.log(&#x27;这是最简单的中间件函数&#x27;) next()&#125;app.get(&#x27;/&#x27;,mw,(req,res)=&gt;&#123; res.send(&#x27;Home Page.&#x27;)&#125;) 多个局部生效的中间件123456app.get(&#x27;/&#x27;,mw1,mw2,(req,res)=&gt;&#123; res.send(&#x27;Home Page.&#x27;)&#125;)app.get(&#x27;/&#x27;,[mw1,mw2],(req,res)=&gt;&#123; res.send(&#x27;Home Page.&#x27;)&#125;) 注意事项 在路由之前注册中间件 客户端发送的请求，可以连续调用多个中间件进行处理 执行完中间件后，要调用next()函数 调用next()函数后，不要再写业务逻辑 多个中间件共享req、res对象 中间件的分类 应用级别：app.use(),app.get(),app.post() 路由级别：绑定在express.Router()实例上 错误级别：function处理函数中必须有4个形参，分别是(err,req,res,next)。必须注册在所有路由之后！ Express内置 express.static快速托管静态资源的内置中间件 express.json解析JSON格式的请求体数据 12345app.use(express.json())app.post(&#x27;/user&#x27;, function (req, res) &#123; console.log(req.body) res.send(&#x27;ok&#x27;)&#125;) express.urlencoded({extended:false})解析URL-encoded格式的请求体数据 第三方 1234567891011121314151617//定义中间件const bodyParser = (req, res, next) =&gt; &#123; let str = &#x27;&#x27; req.on(&#x27;data&#x27;, (chunk) =&gt; &#123; str += chunk &#125;) req.on(&#x27;end&#x27;, () =&gt; &#123; req.body = querystring.parse(str) &#125;) next()&#125;module.exports = bodyParser------------------------------------//使用中间件const bodyParser = require(&#x27;./bodyParser&#x27;)app.use(bodyParser) 基于CORS解决跨域问题安装1npm install cors 导入并配置12const cors = require(&#x27;cors&#x27;)app.use(cors()) 注意：先配置cors（跨域资源共享）再配置路由 原理：CORS由一系列HTTP响应头组成，这些响应头决定浏览器是否阻止前端JS代码跨域获取资源。浏览器的同源安全策略（协议、ip地址、端口号必须相同）默认会阻止网页”跨域“获取资源。但是如果接口服务器配置了CORS相关的HTTP响应头，就可以解除浏览器端的跨域访问限制。 CORS响应头部 描述 res.setHeader(‘Access-Control-Allow-Origin’,’*’) 设置允许访问该资源的外域URL res.setHeader(‘Access-Control-Allow-Headers’,’X-Custom-Header’) 对额外的请求头进行声明 res.setHeader(‘Access-Control-Allow-Methods’,’*’) 设置实际请求所允许使用的HTTP方法 预检请求只要符合以下任何条件之一，都需要进行预检请求： 请求方式为GET、POST、HEAD之外的请求Method类型 请求头中包含自定义头部字段 向服务器发送了application&#x2F;json格式的数据 在浏览器与服务器正式通信之前，浏览器会先发送OPTION请求进行预检，以获知服务器是否允许该实际请求，所以这一次的OPTION请求称为“预检请求”。服务器成功响应预检请求后，才会发送真正的请求，并携带真实数据。 JSONP接口浏览器通过&lt;script&gt;标签的src属性，请求服务器上的数据，同时，服务器返回一个函数的调用。这种请求数据的方式叫做JSONP JSONP不属于真正的Ajax请求，没有使用XMLHttpRequest这个对象。JSONP仅支持GET请求，不支持POST、PUT、DELETE请求。 JSONP接口要声明在CORS接口之前 操作MySQL 安装mysql2模块 1npm i mysql2 配置mysql模块 1234567const mysql = require(&#x27;mysql2&#x27;)const db = mysql.createPool(&#123; host: &#x27;127.0.0.1&#x27;, user: &#x27;root&#x27;, password: &#x27;123456&#x27;, database: &#x27;my_db_01&#x27;&#125;) 测试mysql模块是否正常工作 1234db.query(&#x27;SELECT 1&#x27;,(err,results)=&gt;&#123;if(err) return console.log(err.message)console.log(results)&#125;) 增删改查123456789101112131415const user = &#123; username:&#x27;spider-man&#x27;, password:&#x27;pcc123&#x27;&#125;const sqlStr = &#x27;insert into users (username,password) values (?,?)&#x27;db.query(sqlStr,[user.username,user.password],(err,results)=&gt;&#123; if(err) return console.log(err.message) //insert into 的返回结果为对象,select 的结果为数组 if(results.affectedRows === 1) console.log(&#x27;数据插入成功！&#x27;)&#125;)//若对象的属性值与数据表的字段一一对应const sqlStr = &#x27;insert into users set ?&#x27;db.query(sqlStr, user, (err, results) =&gt; &#123; if (err) return console.log(err.message) if (results.affectedRows === 1) console.log(&#x27;数据插入成功！&#x27;)&#125;) 12345678910111213141516const user = &#123; id: 5, username: &#x27;aaa&#x27;, password: &#x27;000123&#x27; &#125;const sqlStr = &#x27;update users set username=?,password=? where id=?&#x27;db.query(sqlStr, [user.username, user.password, user.id], (err, results) =&gt; &#123; if (err) return console.log(err.message) //update 的返回结果为对象 if (results.affectedRows === 1) console.log(&#x27;数据修改成功！&#x27;)&#125;)//若对象的属性值与数据表的字段一一对应const sqlStr = &#x27;update users set ? where id=?&#x27;db.query(sqlStr, [user, user.id], (err, results) =&gt; &#123; if (err) return console.log(err.message) //update 的返回结果为对象 if (results.affectedRows === 1) console.log(&#x27;数据修改成功！&#x27;)&#125;) 123456const sqlStr = &#x27;delete from users where id=?&#x27;db.query(sqlStr, 5, (err, results) =&gt; &#123; if (err) return console.log(err.message) //update 的返回结果为对象 if (results.affectedRows === 1) console.log(&#x27;数据删除成功！&#x27;)&#125;) 前后端的身份认证Session认证机制http的无状态性客户端的每次HTTP请求都是独立的，服务器不会主动保留每次HTTP请求的状态 突破http的无状态性设置cookie CookieCookie是存储在用户浏览器中一段不超过4KB的字符串。它由一个名称、一个值和其他几个用于控制Cookie有效期、安全性、使用范围的可选属性组成。 客户端第一次请求服务器时，服务器通过响应头的形式，向客户端发送一个身份认证的Cookie。当客户端每次请求服务器时，浏览器自动将身份认证相关的Cookie，通过请求头的形式发送给服务器，服务器即可验明客户端的身份。 使用1npm install express-session 12345678const express = require(&#x27;express&#x27;)const session = require(&#x27;express-session&#x27;)const app = express()app.use(session(&#123; secret: &#x27;keyboard cat&#x27;,//可以为任意字符串 resave: false, saveUninitialized: true&#125;)) JWT认证机制session不支持跨域访问，当前端请求后端接口不跨域时，推荐使用session。当前端请求后端接口跨域时，推荐使用JWT（JSON Web Token) JWT组成成分Header.Payload.Signature Payload是真正的用户信息，是用户信息经过加密后生成的字符串 Header和Signature是安全性相关的部分，只是为了保证Token的安全性 JWT使用方式客户端收到服务器返回的JWT后，通常将它存储在localStorage和sessionStorage中 客户端把JWT放在HTTP请求头的Authorization字段中，此后每次通信都要带上这个JWT的字符串，格式如下 1Authorization: Bear &lt;token&gt; 安装及使用1npm install jsonwebtoken express-jwt 1234567891011121314151617181920212223// 1.导入用于生成JWT字符串的包const jwt = require(&#x27;jsonwebtoken&#x27;)// 2.导入将JWT字符串还原成JSON对象的包const &#123;expressjwt&#125; = require(&#x27;express-jwt&#x27;)//错误级别的中间件app.use((err, req, res, next) =&gt; &#123; //token解析失败 if (err.name === &quot;UnauthorizedError&quot;) &#123; return res.send(&#123; status: 401, message: &quot;无效的token&quot;, &#125;) &#125; res.send(&#123; status: 500, message: &quot;服务端错误&quot;, &#125;)&#125;)//.unless(&#123;&#125;)用来指定哪一些接口不需要访问权限，以下匹配/api/开头的路径const secretKey = &#x27;Sherlock Holmes ^_^&#x27;app.use(expressjwt(&#123;secret:secretKey,algorithms:[&#x27;HS256&#x27;]&#125;).unless(&#123;path:[/^\\/api\\//]&#125;)) 123456789//登录获取tokenapp.post(&#x27;/api/login&#x27;,function(req,res)&#123; res.send(&#123; status:200, message:&#x27;登录成功！&#x27;, //参数1：用户的信息对象，参数2：加密的密钥，参数3：配置对象：可以配置当前token的有效期 token:jwt.sign(&#123;username:userinfo.username&#125;,secretKey,&#123;expiresIn:&#x27;30s&#x27;&#125;) &#125;)&#125;) 12345678app.get(&#x27;/admin/getinfo&#x27;, function (req, res) &#123; res.send(&#123; status: 200, message: &quot;获取用户信息成功!&quot;, data: req.auth &#125;)&#125;) 密码加密1npm i bcryptjs 加密存储密码： 123456var bcrypt = require(&#x27;bcryptjs&#x27;);//生成随机盐var salt = bcrypt.genSaltSync(10);//生成加密密码var hash = bcrypt.hashSync(&quot;B4c0/\\/&quot;, salt);// 存入数据库 检测密码： 123// 从数据库中获取加密密码bcrypt.compareSync(&quot;B4c0/\\/&quot;, hash); // truebcrypt.compareSync(&quot;not_bacon&quot;, hash); // false 自动生成随机盐和哈希值: 12// bcrypt.hashSync(明文密码，随机盐的长度)var hash = bcrypt.hashSync(&#x27;bacon&#x27;, 8);","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"node.js","slug":"node-js","permalink":"http://example.com/tags/node-js/"}]},{"title":"设计模式","slug":"设计模式","date":"2024-10-11T16:00:44.000Z","updated":"2024-12-21T03:15:22.704Z","comments":true,"path":"2024/10/12/设计模式/","permalink":"http://example.com/2024/10/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/","excerpt":"","text":"设计模式的分类 模式 &amp; 描述 包括 创建型模式 这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。 工厂模式（Factory Pattern）抽象工厂模式（Abstract Factory Pattern）单例模式（Singleton Pattern）建造者模式（Builder Pattern）原型模式（Prototype Pattern） 结构型模式 这些模式关注对象之间的组合和关系，旨在解决如何构建灵活且可复用的类和对象结构。 适配器模式（Adapter Pattern）桥接模式（Bridge Pattern）过滤器模式（Filter、Criteria Pattern）组合模式（Composite Pattern）装饰器模式（Decorator Pattern）外观模式（Facade Pattern）享元模式（Flyweight Pattern）代理模式（Proxy Pattern） 行为型模式 这些模式关注对象之间的通信和交互，旨在解决对象之间的责任分配和算法的封装。 责任链模式（Chain of Responsibility Pattern）命令模式（Command Pattern）解释器模式（Interpreter Pattern）迭代器模式（Iterator Pattern）中介者模式（Mediator Pattern）备忘录模式（Memento Pattern）观察者模式（Observer Pattern）状态模式（State Pattern）空对象模式（Null Object Pattern）策略模式（Strategy Pattern）模板模式（Template Pattern）访问者模式（Visitor Pattern） 设计模式工厂模式表现形式调用工厂函数返回新对象 使用场景 Vue3-createApp：将全局改变Vue实例的行为，移到Vue实例上 axios-create：基于自定义配置新建实例 单例模式表现形式整个系统只有一个单例对象 使用场景vant中的toast和notify组件 vue中的use方法 观察者模式表现形式在对象之间定义一个一对多的依赖，当一个对象状态改变的时候，所有依赖的对象都会自动收到通知 使用场景addEventListener vue中的watch react中的useEffect 发布订阅模式表现形式与观察者模式相似，有中间商进行发布订阅 使用场景pubsub.js vue的provide与inject 原型模式表现形式复制一个已经存在的实例来返回新的实例，而不是新建实例 使用场景Object.create() vue的数组方法重写 代理模式表现形式为一个对象提供一个代用品或占位符，以便控制对它的访问 使用场景缓存代理：第一次查询的数据通过接口获取，重复查询通过缓存获取 迭代器模式表现形式遍历容器中的每一个元素 使用场景for in 和 for of 区别： for in 遍历的是索引，继承而来的也可以遍历 for of 遍历的是值，继承而来的无法遍历，无法遍历对象 可迭代对象：实现迭代协议","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"面试八股","slug":"面试八股","permalink":"http://example.com/tags/%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1/"}]},{"title":"linux","slug":"linux","date":"2024-10-11T15:25:06.000Z","updated":"2024-10-14T08:47:45.124Z","comments":true,"path":"2024/10/11/linux/","permalink":"http://example.com/2024/10/11/linux/","excerpt":"","text":"linux常用命令处理目录的常用命令 ls（英文全拼：list files）: 列出目录及文件名 cd（英文全拼：change directory）：切换目录 pwd（英文全拼：print work directory）：显示目前的目录 mkdir（英文全拼：make directory）：创建一个新的目录 rmdir（英文全拼：remove directory）：删除一个空的目录 cp（英文全拼：copy file）: 复制文件或目录 rm（英文全拼：remove）: 删除文件或目录 mv（英文全拼：move file）: 移动文件与目录，或修改文件与目录的名称 可以使用 *man [命令]*来查看各个命令的使用文档，如 ：man cp。 ls (列出目录)语法： 123[root@www ~]# ls [-aAdfFhilnrRSt] 目录名称[root@www ~]# ls [--color=&#123;never,auto,always&#125;] 目录名称[root@www ~]# ls [--full-time] 目录名称 选项与参数： -a ：全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来(常用) -d ：仅列出目录本身，而不是列出目录内的文件数据(常用) -l ：长数据串列出，包含文件的属性与权限等等数据；(常用) 将目录下的所有文件列出来(含属性与隐藏档) 1[root@www ~]# ls -al ~ ~为根目录 cd (切换目录)cd是Change Directory的缩写，这是用来变换工作目录的命令。 pwd (显示目前所在的目录)pwd 是 Print Working Directory 的缩写，也就是显示目前所在目录的命令。 1[root@www ~]# pwd [-P] 选项与参数： -P ：显示出确实的路径，而非使用链接 (link) 路径。 mkdir (创建新目录)语法： 1mkdir [-mp] 目录名称 选项与参数： -m ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～ -p ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来！ 123456[root@www ~]# cd /tmp[root@www tmp]# mkdir test &lt;==创建一名为 test 的新目录[root@www tmp]# mkdir test1/test2/test3/test4mkdir: cannot create directory `test1/test2/test3/test4&#x27;: No such file or directory &lt;== 没办法直接创建此目录啊！[root@www tmp]# mkdir -p test1/test2/test3/test4 加了这个 -p 的选项，可以自行帮你创建多层目录！ 实例：创建权限为 rwx–x–x 的目录。 12345[root@www tmp]# mkdir -m 711 test2[root@www tmp]# ls -ldrwxr-xr-x 3 root root 4096 Jul 18 12:50 testdrwxr-xr-x 3 root root 4096 Jul 18 12:53 test1drwx--x--x 2 root root 4096 Jul 18 12:54 test2 上面的权限部分，如果没有加上 -m 来强制配置属性，系统会使用默认属性。 如果我们使用 -m ，如上例我们给予 -m 711 来给予新的目录 drwx–x–x 的权限。 rmdir (删除空的目录)语法： 1rmdir [-p] 目录名称 选项与参数： -p ：从该目录起，一次删除多级空目录 删除 runoob 目录 1[root@www tmp]# rmdir runoob/ 将 mkdir 实例中创建的目录(&#x2F;tmp 底下)删除掉！ 12345678910[root@www tmp]# ls -l &lt;==看看有多少目录存在？drwxr-xr-x 3 root root 4096 Jul 18 12:50 testdrwxr-xr-x 3 root root 4096 Jul 18 12:53 test1drwx--x--x 2 root root 4096 Jul 18 12:54 test2[root@www tmp]# rmdir test &lt;==可直接删除掉，没问题[root@www tmp]# rmdir test1 &lt;==因为尚有内容，所以无法删除！rmdir: `test1&#x27;: Directory not empty[root@www tmp]# rmdir -p test1/test2/test3/test4[root@www tmp]# ls -l &lt;==您看看，底下的输出中test与test1不见了！drwx--x--x 2 root root 4096 Jul 18 12:54 test2 利用 -p 这个选项，立刻就可以将 test1&#x2F;test2&#x2F;test3&#x2F;test4 一次删除。 要注意的是，这个 rmdir 仅能删除空的目录，可以使用 rm 命令来删除非空目录。 cp (复制文件或目录)cp 即拷贝文件和目录。 语法: 12[root@www ~]# cp [-adfilprsu] 来源档(source) 目标档(destination)[root@www ~]# cp [options] source1 source2 source3 .... directory 选项与参数： -a：相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用) -d：若来源档为链接档的属性(link file)，则复制链接档属性而非文件本身； -f：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次； -i：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用) -l：进行硬式链接(hard link)的链接档创建，而非复制文件本身； -p：连同文件的属性一起复制过去，而非使用默认属性(备份常用)； -r：递归持续复制，用于目录的复制行为；(常用) -s：复制成为符号链接档 (symbolic link)，亦即『捷径』文件； -u：若 destination 比 source 旧才升级 destination ！ 用 root 身份，将 root 目录下的 .bashrc 复制到 &#x2F;tmp 下，并命名为 bashrc 123[root@www ~]# cp ~/.bashrc /tmp/bashrc[root@www ~]# cp -i ~/.bashrc /tmp/bashrccp: overwrite `/tmp/bashrc&#x27;? n &lt;==n不覆盖，y为覆盖 rm (移除文件或目录)语法： 1rm [-fir] 文件或目录 选项与参数： -f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息； -i ：互动模式，在删除前会询问使用者是否动作 -r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！ mv (移动文件与目录，或修改名称)语法： 12[root@www ~]# mv [-fiu] source destination[root@www ~]# mv [options] source1 source2 source3 .... directory 选项与参数： -f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖； -i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！ -u ：若目标文件已经存在，且 source 比较新，才会升级 (update) 复制一文件，创建一目录，将文件移动到目录中 1234[root@www ~]# cd /tmp[root@www tmp]# cp ~/.bashrc bashrc[root@www tmp]# mkdir mvtest[root@www tmp]# mv bashrc mvtest 查看文件cat由第一行开始显示文件内容 语法： 1cat [-AbEnTv] 选项与参数： -A ：相当於 -vET 的整合选项，可列出一些特殊字符而不是空白而已； -b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！ -E ：将结尾的断行字节 $ 显示出来； -n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同； -T ：将 [tab] 按键以 ^I 显示出来； -v ：列出一些看不出来的特殊字符 检看 &#x2F;etc&#x2F;issue 这个文件的内容： 123[root@www ~]# cat /etc/issueCentOS release 6.4 (Final)Kernel \\r on an \\m 创建文件touchtouch命令用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件。 语法1touch [-acfm][-d&lt;日期时间&gt;][-r&lt;参考文件或目录&gt;] [-t&lt;日期时间&gt;][--help][--version][文件或目录…] 参数说明： a 改变档案的读取时间记录。 m 改变档案的修改时间记录。 c 假如目的档案不存在，不会建立新的档案。与 –no-create 的效果一样。 f 不使用，是为了与其他 unix 系统的相容性而保留。 r 使用参考档的时间记录，与 –file 的效果一样。 d 设定时间与日期，可以使用各种不同的格式。 t 设定档案的时间记录，格式与 date 指令相同。 –no-create 不会建立新档案。 –help 列出指令格式。 –version 列出版本讯息。 vim","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://example.com/tags/linux/"}]},{"title":"2024-10-9","slug":"2024-10-9","date":"2024-10-09T15:58:54.000Z","updated":"2024-10-09T16:11:22.592Z","comments":true,"path":"2024/10/09/2024-10-9/","permalink":"http://example.com/2024/10/09/2024-10-9/","excerpt":"","text":"好累好累，每天高强度学习，脑子转不过来了555，明天应该可以把vue3项目做完吧","categories":[{"name":"随笔","slug":"随笔","permalink":"http://example.com/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[]},{"title":"vue3","slug":"vue3","date":"2024-10-02T15:00:05.000Z","updated":"2025-02-13T08:04:09.771Z","comments":true,"path":"2024/10/02/vue3/","permalink":"http://example.com/2024/10/02/vue3/","excerpt":"","text":"组合式API - reactive和ref函数1. reactive 接受对象类型数据的参数传入并返回一个响应式的对象 1234567891011121314151617&lt;script setup&gt; // 导入 import &#123; reactive &#125; from &#x27;vue&#x27; // 执行函数 传入参数 变量接收 const state = reactive(&#123; msg:&#x27;this is msg&#x27; &#125;) const setState = ()=&gt;&#123; // 修改数据更新视图 state.msg = &#x27;this is new msg&#x27; &#125;&lt;/script&gt;&lt;template&gt; &#123;&#123; state.msg &#125;&#125; &lt;button @click=&quot;setState&quot;&gt;change msg&lt;/button&gt;&lt;/template&gt; 2. ref 接收简单类型或者对象类型的数据传入并返回一个响应式的对象 1234567891011121314&lt;script setup&gt; // 导入 import &#123; ref &#125; from &#x27;vue&#x27; // 执行函数 传入参数 变量接收 const count = ref(0) const setCount = ()=&gt;&#123; // 修改数据更新视图必须加上.value count.value++ &#125;&lt;/script&gt;&lt;template&gt; &lt;button @click=&quot;setCount&quot;&gt;&#123;&#123;count&#125;&#125;&lt;/button&gt;&lt;/template&gt; 3. reactive 对比 ref 都是用来生成响应式数据 不同点 reactive不能处理简单类型的数据 ref参数类型支持更好，但是必须通过.value做访问和修改 ref函数内部的实现依赖于reactive函数 组合式API - computed 计算属性基本思想和Vue2保持一致，组合式API下的计算属性只是修改了API写法 12345678910111213&lt;script setup&gt;// 导入import &#123;ref, computed &#125; from &#x27;vue&#x27;// 原始数据const count = ref(0)// 计算属性const doubleCount = computed(()=&gt;count.value * 2)// 原始数据const list = ref([1,2,3,4,5,6,7,8])// 计算属性listconst filterList = computed(()=&gt;list.value.filter(item=&gt;item &gt; 2))&lt;/script&gt; 组合式API - watch 侦听一个或者多个数据的变化，数据变化时执行回调函数，俩个额外参数 immediate控制立刻执行，deep开启深度侦听 123456789&lt;script setup&gt; // 1. 导入watch import &#123; ref, watch &#125; from &#x27;vue&#x27; const count = ref(0) // 2. 调用watch 侦听变化 watch(count, (newValue, oldValue)=&gt;&#123; console.log(`count发生了变化，老值为$&#123;oldValue&#125;,新值为$&#123;newValue&#125;`) &#125;)&lt;/script&gt; 2. 侦听多个数据 侦听多个数据，第一个参数可以改写成数组的写法 12345678910&lt;script setup&gt; // 1. 导入watch import &#123; ref, watch &#125; from &#x27;vue&#x27; const count = ref(0) const name = ref(&#x27;cp&#x27;) // 2. 调用watch 侦听变化 watch([count, name], ([newCount, newName],[oldCount,oldName])=&gt;&#123; console.log(`count或者name变化了，[newCount, newName],[oldCount,oldName]) &#125;)&lt;/script&gt; 3. immediate 在侦听器创建时立即出发回调，响应式数据变化之后继续执行回调 1234567891011&lt;script setup&gt; // 1. 导入watch import &#123; ref, watch &#125; from &#x27;vue&#x27; const count = ref(0) // 2. 调用watch 侦听变化 watch(count, (newValue, oldValue)=&gt;&#123; console.log(`count发生了变化，老值为$&#123;oldValue&#125;,新值为$&#123;newValue&#125;`) &#125;,&#123; immediate: true &#125;)&lt;/script&gt; 4. deep 通过watch监听的ref对象默认是浅层侦听的，直接修改嵌套的对象属性不会触发回调执行，需要开启deep 12345678910111213141516171819202122232425262728&lt;script setup&gt; // 1. 导入watch import &#123; ref, watch &#125; from &#x27;vue&#x27; const state = ref(&#123; count: 0 &#125;) // 2. 监听对象state watch(state, ()=&gt;&#123; console.log(&#x27;数据变化了&#x27;) &#125;) const changeStateByCount = ()=&gt;&#123; // 直接修改不会引发回调执行 state.value.count++ &#125;&lt;/script&gt;&lt;script setup&gt; // 1. 导入watch import &#123; ref, watch &#125; from &#x27;vue&#x27; const state = ref(&#123; count: 0 &#125;) // 2. 监听对象state 并开启deep watch(state, ()=&gt;&#123; console.log(&#x27;数据变化了&#x27;) &#125;,&#123;deep:true&#125;) const changeStateByCount = ()=&gt;&#123; // 此时修改可以触发回调 state.value.count++ &#125;&lt;/script&gt; 组合式API - 生命周期函数1. API setup() onBeforemount() onMounted() onBeforeUpdate() onUpdated() onBeforeUnMount() onUnMounted() 2. 生命周期函数基本使用 导入生命周期函数 执行生命周期函数，传入回调 123456&lt;scirpt setup&gt;import &#123; onMounted &#125; from &#x27;vue&#x27;onMounted(()=&gt;&#123; // 自定义逻辑&#125;)&lt;/script&gt; 3. 执行多次 生命周期函数执行多次的时候，会按照顺序依次执行 12345678910&lt;scirpt setup&gt;import &#123; onMounted &#125; from &#x27;vue&#x27;onMounted(()=&gt;&#123; // 自定义逻辑&#125;)onMounted(()=&gt;&#123; // 自定义逻辑&#125;)&lt;/script&gt; 组合式API - 父子通信1. 父传子 基本思想 父组件中给子组件绑定属性 子组件内部通过props选项接收数据 123456789101112131415161718192021222324//App.vue&lt;template&gt; &lt;div&gt; &lt;SonCom message=&quot;this is a message&quot;&gt;&lt;/SonCom&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import SonCom from &#x27;./SonCom.vue&#x27;&lt;/script&gt;//SonCom.vue&lt;template&gt; &lt;div&gt; &#123;&#123; message &#125;&#125; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;const props = defineProps(&#123; message:String&#125;)&lt;/script&gt; 2. 子传父 基本思想 父组件中给子组件标签通过@绑定事件 子组件内部通过 emit 方法触发事件 12345678910111213141516171819202122232425262728//App.vue&lt;template&gt; &lt;div&gt; &lt;SonCom @get-message=&quot;messageHandler&quot;&gt;&lt;/SonCom&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import SonCom from &#x27;./SonCom.vue&#x27;const messageHandler = (message)=&gt;&#123; console.log(message)&#125;&lt;/script&gt;//SonCom.vue&lt;template&gt; &lt;div&gt; &lt;button @click=&quot;sendMsg&quot;&gt;点我发送信息&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;const emit = defineEmits([&#x27;get-message&#x27;])const sendMsg = ()=&gt;&#123; emit(&#x27;get-message&#x27;,&quot;this is son message&quot;)&#125;&lt;/script&gt; 组合式API - 模版引用 概念：通过 ref标识 获取真实的 dom对象或者组件实例对象 1. 基本使用 实现步骤： 调用ref函数生成一个ref对象 通过ref标识绑定ref对象到标签 12345678910&lt;template&gt; &lt;div&gt; &lt;h1 ref=&quot;h1Ref&quot;&gt;我是dom标签对象h1&lt;/h1&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; ref &#125; from &#x27;vue&#x27;;const h1Ref = ref(null)&lt;/script&gt; 2. defineExpose 默认情况下在 语法糖下组件内部的属性和方法是不开放给父组件访问的，可以通过defineExpose编译宏指定哪些属性和方法容许访问说明：指定testMsg属性可以被访问到 1234567&lt;script setup&gt;import &#123; ref &#125; from &#x27;vue&#x27;;const testMsg = ref(&quot;this is a test message&quot;)defineExpose(&#123; testMsg&#125;)&lt;/script&gt; 组合式API - provide和inject顶层组件向任意的底层组件传递数据和方法，实现跨层组件通信 1234//顶层组件provide(&#x27;key&#x27;,refObj)//底层组件const refObj = inject(&#x27;key&#x27;) 12345//顶层组件const func = ()=&gt;&#123;&#125;provide(&#x27;key&#x27;,func)//底层组件const func = inject(&#x27;key&#x27;) piniaPinia 是 Vue 的专属状态管理库，可以实现跨组件或页面共享状态，是 vuex 状态管理工具的替代品， 更加轻量级，支持ts、支持服务端渲染、支持 Vue DevTools。 移除 mutations，只剩下 state 、 actions 、 getters 。 无需手动添加每个 store，模块默认情况下创建就自动注册。 创建空Vue项目并安装Pinia1. 创建空Vue项目1npm init vue@latest 2. 安装Pinia并注册1npm i pinia 1234567import &#123; createPinia &#125; from &#x27;pinia&#x27;const app = createApp(App)// 以插件的形式注册app.use(createPinia())app.use(router)app.mount(&#x27;#app&#x27;) 实现counter 核心步骤： 定义store 组件使用store 1- 定义store 12345678910111213141516171819import &#123; defineStore &#125; from &#x27;pinia&#x27;import &#123; ref &#125; from &#x27;vue&#x27;export const useCounterStore = defineStore(&#x27;counter&#x27;, ()=&gt;&#123; // 数据 （state） const count = ref(0) // 修改数据的方法 （action） const increment = ()=&gt;&#123; count.value++ &#125; // 以对象形式返回 return &#123; count, increment &#125;&#125;) 2- 组件使用store 123456789101112&lt;script setup&gt; // 1. 导入use方法 import &#123; useCounterStore &#125; from &#x27;@/stores/counter&#x27; // 2. 执行方法得到store store里有数据和方法 const counterStore = useCounterStore()&lt;/script&gt;&lt;template&gt; &lt;button @click=&quot;counterStore.increment&quot;&gt; &#123;&#123; counterStore.count &#125;&#125; &lt;/button&gt;&lt;/template&gt; 实现getters getters直接使用计算属性即可实现 1234// 数据（state）const count = ref(0)// getter (computed)const doubleCount = computed(() =&gt; count.value * 2) 实现actions 思想：action函数既支持同步也支持异步，和在组件中发送网络请求写法保持一致步骤： store中定义action 组件中触发action 1- store中定义action 12345678910111213141516const API_URL = &#x27;http://geek.itheima.net/v1_0/channels&#x27;export const useCounterStore = defineStore(&#x27;counter&#x27;, ()=&gt;&#123; // 数据 const list = ref([]) // 异步action const loadList = async ()=&gt;&#123; const res = await axios.get(API_URL) list.value = res.data.data.channels &#125; return &#123; list, loadList &#125;&#125;) 2- 组件中调用action 123456789101112&lt;script setup&gt; import &#123; useCounterStore &#125; from &#x27;@/stores/counter&#x27; const counterStore = useCounterStore() // 调用异步action counterStore.loadList()&lt;/script&gt;&lt;template&gt; &lt;ul&gt; &lt;li v-for=&quot;item in counterStore.list&quot; :key=&quot;item.id&quot;&gt;&#123;&#123; item.name &#125;&#125;&lt;/li&gt; &lt;/ul&gt;&lt;/template&gt; storeToRefs保持响应式解构 直接基于store进行解构赋值，响应式数据（state和getter）会丢失响应式特性，使用storeToRefs辅助保持响应式 12345678910111213141516&lt;script setup&gt; import &#123; storeToRefs &#125; from &#x27;pinia&#x27; import &#123; useCounterStore &#125; from &#x27;@/stores/counter&#x27; const counterStore = useCounterStore() // 使用它storeToRefs包裹之后解构保持响应式 const &#123; count &#125; = storeToRefs(counterStore) const &#123; increment &#125; = counterStore &lt;/script&gt;&lt;template&gt; &lt;button @click=&quot;increment&quot;&gt; &#123;&#123; count &#125;&#125; &lt;/button&gt;&lt;/template&gt; Pinia持久化存储1npm i pinia-plugin-persistedstate 1234567//main.jsimport &#123; createPinia &#125; from &#x27;pinia&#x27;import piniaPluginPersistedstate from &#x27;pinia-plugin-persistedstate&#x27;const pinia = createPinia()pinia.use(piniaPluginPersistedstate) 12345678910111213//定义store时import &#123; defineStore &#125; from &#x27;pinia&#x27;export const useStore = defineStore( &#x27;main&#x27;, () =&gt; &#123; const someState = ref(&#x27;hello pinia&#x27;) return &#123; someState &#125; &#125;, &#123; persist: true, &#125;,) 全局组件统一插件化插件化开发1234567891011// 把components中的所组件都进行全局化注册// 通过插件的方式import ImageView from &#x27;./ImageView/index.vue&#x27;import Sku from &#x27;./XtxSku/index.vue&#x27;export const componentPlugin = &#123; install (app) &#123; // app.component(&#x27;组件名字&#x27;，组件配置对象) app.component(&#x27;XtxImageView&#x27;, ImageView) app.component(&#x27;XtxSku&#x27;, Sku) &#125;&#125; 插件注册1234// 引入全局组件插件import &#123; componentPlugin &#125; from &#x27;@/components&#x27;app.use(componentPlugin) 响应式原理就是数据劫持结合发布者-订阅者模式，Vue在初始化数据时，会使用Object.defineProperty重新定义data中的所有属性，劫持各个属性的setter和getter，读取属性时触发getter方法，修改属性时触发setter方法，在方法中记录相应的数据依赖，在数据发生改变时，通知观察者更新视图。Vue3改用Proxy替代Object.defineProperty。Proxy可以直接监听对象和数组的变化，并且有多种拦截方法。 MVVM的理解MVVM是一种软件架构模式，MVVM 分为 Model、View、ViewModel： Model代表数据模型，数据和业务逻辑都在Model层中定义； View代表UI视图，负责数据的展示； ViewModel负责监听Model中数据的改变并且控制视图的更新，处理用户交互操作； vue和react的区别，有什么相同不同： 模版语法不同，react采用JSX语法，vue使用基于HTML的模版语法 数据绑定不同，vue 使用双向数据绑定，react 则需要手动控制组件的状态和属性。 状态管理不同，vue使用vuex状态管理，react使用redux状态管理 组件通信不同，vue使用props和事件的方式进行父子组件通信，react则通过props和回调函数的方式进行通信。 生命周期不同，vue有8个生命周期钩子，react有10个 响应式原理不同，vue使用双向绑定来实现数据更新，react则通过单向数据流来实现 相同： 组件化开发：Vue 和 React 都采用了组件化开发的方式，将用户界面划分为独立、可复用的组件，从而使代码更加模块化、可维护和可扩展。 虚拟 DOM：Vue 和 React 都使用虚拟 DOM 技术，通过在 JavaScript 和真实 DOM 之间建立一个轻量级的虚拟 DOM 层，实现高效的 DOM 更新和渲染。 响应式更新：Vue 和 React 都支持响应式更新，即当数据发生变化时，会自动更新相关的组件和视图，以保持用户界面的同步性。 集成能力：Vue 和 React 都具有良好的集成能力，可以与其他库和框架进行整合，例如 Vue 可以与 Vuex、Vue Router 等配套使用，React 可以与 Redux、React Router 等配套使用。 Vue2和Vue3有哪些区别 Vue2使用的是optionsAPI ，Vue3使用composition API，更好的组织代码，提高代码可维护性 Vue3使用Proxy代理实现了新的响应式系统，比Vue2有着更好的性能和更准确的数据变化追踪能力。 Vue3引入了Teleport组件，可以将DOM元素渲染到DOM数的其他位置，用于创建模态框、弹出框等。 Vue3全局API名称发生了变化，同时新增了watchEffect、Hooks等功能 Vue3对TypeScript的支持更加友好 Vue3核心库的依赖更少，减少打包体积 3支持更好的Tree Shanking，可以更加精确的按需要引入模块 SPA的理解，有什么优缺点SPA（单页应用）是一种前端应用程序的架构模式，它通过在加载应用程序时只加载单个 HTML 页面，并通过使用 JavaScript 动态地更新页面内容，从而实现无刷新的用户体验。 SPA和多页面有什么区别区别 页面加载方式：在多页面应用中，每个页面都是独立的 HTML 文件，每次导航时需要重新加载整个页面。而在 SPA 中，初始加载时只加载一个 HTML 页面，后续的导航通过 JavaScript 动态地更新页面内容，无需重新加载整个页面。 用户体验：SPA 提供了流畅、快速的用户体验，因为页面切换时无需等待整个页面的重新加载，只有需要的数据和资源会被加载，减少了页面刷新的延迟。多页面应用则可能会有页面刷新的延迟，给用户带来较长的等待时间。 代码复用：SPA 通常采用组件化开发的方式，可以在不同的页面中复用组件，提高代码的可维护性和可扩展性。多页面应用的每个页面都是独立的，组件复用的机会较少。 路由管理：在多页面应用中，页面之间的导航和路由由服务器处理，每个页面对应一个不同的 URL。而在 SPA 中，前端负责管理页面的导航和路由，通过前端路由库（如 React Router 或 Vue Router）来管理不同路径对应的组件。 SEO（搜索引擎优化）：由于多页面应用的每个页面都是独立的 HTML 文件，搜索引擎可以直接索引和抓取每个页面的内容，有利于搜索引擎优化。相比之下，SPA 的内容是通过 JavaScript 动态生成的，搜索引擎的爬虫可能无法正确地获取和索引页面的内容，需要采取额外的优化措施。 服务器负载：SPA 只需初始加载时获取 HTML、CSS 和 JavaScript 文件，后续的页面更新和数据获取通常通过 API 请求完成，减轻了服务器的负载。而多页面应用每次导航都需要从服务器获取整个页面的内容。 优点 用户体验：SPA 提供了流畅、快速的用户体验，在页面加载后，只有需要的数据和资源会被加载，减少了页面刷新的延迟。 响应式交互：由于 SPA 依赖于异步数据加载和前端路由，可以实现实时更新和动态加载内容，使用户可以快速地与应用程序交互。 代码复用：SPA 通常采用组件化开发的方式，提高了代码的可维护性和可扩展性。 服务器负载较低：由于只有初始页面加载时需要从服务器获取 HTML、CSS 和 JavaScript 文件，减轻了服务器的负载。 缺点： 首次加载时间：SPA 首次加载时需要下载较大的 JavaScript 文件，这可能导致初始加载时间较长。 SEO（搜索引擎优化）问题：由于 SPA 的内容是通过 JavaScript 动态生成的，搜索引擎的爬虫可能无法正确地获取和索引页面的内容。 内存占用：SPA 在用户浏览应用程序时保持单个页面的状态，这可能导致较高的内存占用。 安全性：由于 SPA 通常使用 API 进行数据获取，因此需要特别注意安全性。 Vue的性能优化有哪些编码阶段 v-if和v-for不一起使用 v-for保证key的唯一性 使用keep-alive缓存组件 v-if和v-show酌情使用 路由懒加载、异步组件 图片懒加载 节流防抖 第三方模块按需引入 服务端与渲染 打包优化 压缩代码 使用CDN加载第三方模块 抽离公共文件 用户体验 骨架屏 客户端缓存 SEO优化 预渲染 服务端渲染 合理使用 meta 标签 Vue生命周期创建前后： beforeCreate（创建前）： 数据观测和初始化事件还未开始，不能访问data、computed、watch、methods上的数据方法。 created(创建后)：实例创建完成，可以访问data、computed、watch、methods上的数据方法，但此时渲染节点还未挂在到DOM上，所以不能访问。 挂载前后： beforeMount（挂载前）: Vue实例还未挂在到页面HTML上，此时可以发起服务器请求 mounted（挂载后）:Vue实例已经挂在完毕，可以操作DOM 更新前后： beforeUpdate（更新前）: 数据更新之前调用，还未渲染页面 updated（更新后）:DOM重新渲染，此时数据和界面都是新的。 销毁前后： beforeDestorye（销毁前）:实例销毁前调用，这时候能够获取到this destoryed（销毁后）:实例销毁后调用，实例完全被销毁。 常用的属性、指令有哪些属性： data：用于定义组件的初始数据。 props：用于传递数据给子组件。 computed：用于定义计算属性。 methods：用于定义组件的方法。 watch：用于监听组件的数据变化。 components：用于注册子组件。可以通过 components 属性将其他组件注册为当前组件的子组件，从而在模板中使用这些子组件。 指令： v-if：条件渲染指令，根据表达式的真假来决定是否渲染元素。 v-show：条件显示指令，根据表达式的真假来决定元素的显示和隐藏。 v-for：列表渲染指令，用于根据数据源循环渲染元素列表。 v-bind：属性绑定指令，用于动态绑定元素属性到 Vue 实例的数据。 v-on：事件绑定指令，用于监听 DOM 事件，并执行对应的 Vue 方法。 v-model：双向数据绑定指令，用于在表单元素和 Vue 实例的数据之间建立双向绑定关系。 v-text：文本插值指令，用于将数据插入到元素的文本内容中。 v-html：HTML 插值指令，用于将数据作为 HTML 解析并插入到元素中。 Computed 和 Watch 的区别computed计算属性，通过对已有的属性值进行计算得到一个新值。它需要依赖于其他的数据，当数据发生变化时，computed会自动计算更新。computed属性值会被缓存，只有当依赖数据发生变化时才会重新计算，这样可以避免重复计算提高性能。 watch用于监听数据的变化，并在变化时执行一些操作。它可以监听单个数据或者数组，当数据发生变化时会执行对应的回调函数，和computed不同的是watch不会有缓存。 Vue组件通信父传子 props $children $refs 子传父 $emit $parent 兄弟组件 provied inject eventBus Vuex 常见的事件修饰符及其作用 .stop阻止冒泡 .prevent阻止默认事件 .capture ：与事件冒泡的方向相反，事件捕获由外到内； .self ：只会触发自己范围内的事件，不包含子元素； .once：只会触发一次。 v-if和v-show的区别v-if元素不可见，直接删除DOM，有更高的切换消耗。 v-show通过设置元素display: none控制显示隐藏，更高的初始渲染消耗。 v-html 的原理会先移除节点下的所有节点，调用html方法，通过addProp添加innerHTML属性，归根结底还是设置innerHTML为v-html的值。 v-model 是如何实现的，语法糖实际是什么？Vue 中数据双向绑定是一个指令v-model，可以绑定一个响应式数据到视图，同时视图的变化能改变该值。 当作用在表单上：通过v-bind:value绑定数据，v-on:input来监听数据变化并修改value 当作用在组件上：本质上是一个父子通信语法糖，通过props和$emit实现。 data为什么是一个函数而不是对象因为对象是一个引用类型，如果data是一个对象的情况下会造成多个组件共用一个data，data为一个函数，每个组件都会有自己的私有数据空间，不会干扰其他组件的运行。 mixin 和 mixins 区别 mixin 用于全局混入，会影响到每个组件实例，通常插件都是这样做初始化的。 mixins 应该是最常使用的扩展组件的方式了。如果多个组件中有相同的业务逻辑，就可以将这些逻辑剥离出来，通过 mixins 混入代码，比如上拉下拉加载数据这种逻辑等等。 路由的hash和history模式的区别hash模式 开发中默认的模式，地址栏URL后携带#，后面为路由。 原理是通过onhashchange()事件监听hash值变化，在页面hash值发生变化后，window就可以监听到事件改变，并按照规则加载相应的代码。hash值变化对应的URL都会被记录下来，这样就能实现浏览器历史页面前进后退。 history模式 history模式中URL没有#，这样相对hash模式更好看，但是需要后台配置支持。 history原理是使用HTML5 history提供的pushState、replaceState两个API，用于浏览器记录历史浏览栈，并且在修改URL时不会触发页面刷新和后台数据请求。 router和route的区别 $route 是路由信息，包括path、params、query、name等路由信息参数 $router 是路由实例，包含了路由跳转方法、钩子函数等 如何设置动态路由 params传参 路由配置： /index/:id 路由跳转：this.$router.push(&#123;name: &#39;index&#39;, params: &#123;id: &quot;zs&quot;&#125;&#125;); 路由参数获取：$route.params.id 最后形成的路由：/index/zs query传参 路由配置：/index正常的路由配置 路由跳转：this.$rouetr.push(&#123;path: &#39;index&#39;, query:&#123;id: &quot;zs&quot;&#125;&#125;); 路由参数获取：$route.query.id 最后形成的路由：/index?id=zs 区别 获取参数方式不一样，一个通过$route.params，一个通过 $route.query 参数的生命周期不一样，query参数在URL地址栏中显示不容易丢失，params参数不会在地址栏显示，刷新后会消失 路由守卫 全局前置钩子：beforeEach、beforeResolve、afterEach 路由独享守卫：beforeEnter 组件内钩子：beforeRouterEnter、beforeRouterUpdate、beforeRouterLeave Vue中key的作用key的作用主要是为了高效的更新虚拟DOM，其原理是vue在patch过程中通过key可以精准判断两个节点是否是同一个，从而避免频繁更新不同元素，减少DOM操作量，提高性能。 为什么不建议用index作为key?如果将数组下标作为key值，那么当列表发生变化时，可能会导致key值发生改变，从而引发不必要的组件重新渲染，甚至会导致性能问题。例如，当删除列表中某个元素时，其后面的所有元素的下标都会发生改变，导致Vue重新渲染整个列表。 为什么v-for和v-if不能一起使用v-for比v-if优先级更高，一起使用的话每次渲染列表时都要执行一次条件判断，造成不必要的计算，影响性能。 原理知识双向数据绑定的原理采用数据劫持结合发布者-订阅者模式的方式，data数据在初始化的时候，会实例化一个Observe类，在它会将data数据进行递归遍历，并通过Object.defineProperty方法，给每个值添加上一个getter和一个setter。在数据读取的时候会触发getter进行依赖（Watcher）收集，当数据改变时，会触发setter，对刚刚收集的依赖进行触发，并且更新watcher通知视图进行渲染。 使用 Object.defineProperty() 来进行数据劫持有什么缺点？该方法只能监听到数据的修改，监听不到数据的新增和删除，从而不能触发组件更新渲染。vue2中会对数组的新增删除方法push、pop、shift、unshift、splice、sort、reserve通过重写的形式，在拦截里面进行手动收集触发依赖更新。 和Vue3相比有什么区别？Vue3采用了Proxy代理的方式，Proxy是ES6引入的一个新特性，它提供了一个用于创建代理对象的构造函数。它是对整个对象的监听和拦截，可以对对象所有操作进行处理。而Object.defineProperty只能监听单个属性的读写，无法监听新增、删除等操作。 Vue是如何收集依赖的？依赖收集发生在defineReactive()方法中，在方法内new Dep()实例化一个Dep()实例，然后在getter中通过dep.depend()方法对数据依赖进行收集，然后在settter中通过dep.notify()通知更新。整个Dep其实就是一个观察者，吧收集的依赖存储起来，在需要的时候进行调用。在收集数据依赖的时候，会为数据创建一个Watcher，当数据发生改变通知每个Watcher，由Wathcer进行更新渲染。 slot是什么？有什么作用？原理是什么？slot插槽，一般在封装组件的时候使用，在组件内不知道以那种形式来展示内容时，可以用slot来占据位置，最终展示形式由父组件以内容形式传递过来，主要分为三种： 默认插槽：又名匿名插槽，当slot没有指定name属性值的时候一个默认显示插槽，一个组件内只有有一个匿名插槽。 具名插槽：带有具体名字的插槽，也就是带有name属性的slot，一个组件可以出现多个具名插槽。 作用域插槽：默认插槽、具名插槽的一个变体，可以是匿名插槽，也可以是具名插槽，该插槽的不同点是在子组件渲染作用域插槽时，可以将子组件内部的数据传递给父组件，让父组件根据子组件的传递过来的数据决定如何渲染该插槽。 实现原理：当子组件vm实例化时，获取到父组件传入的slot标签的内容，存放在vm.$slot中，默认插槽为vm.$slot.default，具名插槽为vm.$slot.xxx，xxx 为插槽名，当组件执行渲染函数时候，遇到slot标签，使用$slot中的内容进行替换，此时可以为插槽传递数据，若存在数据，则可称该插槽为作用域插槽。 对keep-alive的理解，它是如何实现的，具体缓存的是什么？keep-alive是Vue.js的一个内置组件。它能够将不活动的组件实例保存在内存中，而不是直接将其销毁，它是一个抽象组件，不会被渲染到真实DOM中，也不会出现在父组件链中。 include 字符串或正则表达式，只有名称匹配的组件会被匹配； exclude 字符串或正则表达式，任何名称匹配的组件都不会被缓存； max 数字，最多可以缓存多少组件实例。 2 个生命周期 activated ， deactivated activated：当缓存的组件被激活时，该钩子函数被调用。可以在该钩子函数中进行一些状态恢复、数据更新等操作。 deactivated：当缓存的组件被停用时，该钩子函数被调用。可以在该钩子函数中进行一些状态保存、数据清理等操作。 keep-alive内部其实是一个函数式组件，没有template标签。在render中通过获取组件的name和include、exclude进行匹配。匹配不成功，则不需要进行缓存，直接返回该组件的vnode。 匹配成功就进行缓存，获取组件的key在cache中进行查找，如果存在，则将他原来位置上的 key 给移除，同时将这个组件的 key 放到数组最后面（LRU）也就实现了max功能。 不存在的话，就需要对组件进行缓存。将当前组件push(key)添加到尾部，然后再判断当前缓存的max是否超出指定个数，如果超出直接将第一个组件销毁（缓存淘汰策略LRU）。 LRU（Least recently used，最近最少使用）算法根据数据的历史访问记录来进行淘汰数据，其核心思想是“如果数据最近被访问过，那么将来被访问的几率也更高”。 $nextTick 原理及作用Vue 的 nextTick 其本质是对 JavaScript 执行原理 EventLoop 的一种应用。 nextTick是将回调函数放到一个异步队列中，保证在异步更新DOM的watcher后面，从而获取到更新后的DOM。 因为在created()钩子函数中，页面的DOM还未渲染，这时候也没办法操作DOM，所以，此时如果想要操作DOM，必须将操作的代码放在nextTick()的回调函数中。 Vue模版编译原理模版编译主要过程：template ---&gt; ast ---&gt; render，分别对象三个方法 parse 函数解析 template optimize 函数优化静态内容 generate 函数创建 render 函数字符串 调用parse方法，将template转化为AST（抽象语法树），AST定义了三种类型，一种html标签，一种文本，一种插值表达式，并且通过 children 这个字段层层嵌套形成了树状的结构。 optimize方法对AST树进行静态内容优化，分析出哪些是静态节点，给其打一个标记，为后续更新渲染可以直接跳过静态节点做优化。 generate将AST抽象语法树编译成 render字符串，最后通过new Function(render)生成可执行的render函数 VuexVuex 的原理Vuex是专门为Vue设计的状态管理，当Vue从store中读取数据后，数据发生改变，组件中的数据也会发生变化。 Vue Components 负责接收用户操作交互行为，执行dispatch触发对应的action进行回应 dispatch唯一能执行action的方法 action用来接收components的交互行为，包含异步同步操作 commit对mutation进行提交，唯一能执行mutation的方法 mutation唯一可以修改state状态的方法 state页面状态管理容器，用于存储状态 getters读取state方法 Vue组件接收交互行为，调用dispatch方法触发action相关处理，若页面状态需要改变，则调用commit方法提交mutation修改state，通过getters获取到state新值，重新渲染Vue Components，界面随之更新。 Vuex中action和mutation的区别 mutation更专注于修改state，必须是同步执行。 action提交的是mutation，而不是直接更新数据，可以是异步的，如业务代码，异步请求。 action可以包含多个mutation Vuex 和 localStorage 的区别 Vuex存储在内存中，页面关闭刷新就会消失。而localstorage存储在本地，读取内存比读取硬盘速度要快 Vuex应用于组件之间的传值，localstorage主要用于不同页面之间的传递 Vuex是响应式的，localstorage需要刷新 虚拟DOM对虚拟DOM的理解虚拟DOM就是用JS对象来表述DOM节点，是对真实DOM的一层抽象。可以通过一些列操作使这个棵树映射到真实DOM上。 如在Vue中，会把代码转换为虚拟DOM，在最终渲染到页面，在每次数据发生变化前，都会缓存一份虚拟DOM，通过diff算法来对比新旧虚拟DOM记录到一个对象中按需更新，最后创建真实DOM，从而提升页面渲染性能。 虚拟DOM就一定比真实DOM更快吗虚拟DOM不一定比真实DOM更快，而是在特定情况下可以提供更好的性能。 在复杂情况下，虚拟DOM可以比真实DOM操作更快，因为它是在内存中维护一个虚拟的DOM树，将真实DOM操作转换为对虚拟DOM的操作，然后通过diff算法找出需要更新的部分，最后只变更这部分到真实DOM就可以。在频繁变更下，它可以批量处理这些变化从而减少对真实DOM的访问和操作，减少浏览器的回流重绘，提高页面渲染性能。 而在一下简单场景下，直接操作真实DOM可能会更快，当更新操作很少或者只是局部改变时，直接操作真实DOM比操作虚拟DOM更高效，省去了虚拟DOM的计算、对比开销。 虚拟DOM的解析过程 首先对将要插入到文档中的 DOM 树结构进行分析，使用 js 对象将其表示出来，比如一个元素对象，包含 TagName、props 和 Children 这些属性。然后将这个 js 对象树给保存下来，最后再将 DOM 片段插入到文档中。 当页面的状态发生改变，需要对页面的 DOM 的结构进行调整的时候，首先根据变更的状态，重新构建起一棵对象树，然后将这棵新的对象树和旧的对象树进行比较，记录下两棵树的的差异。 最后将记录的有差异的地方应用到真正的 DOM 树中去，这样视图就更新了。 DIFF算法原理diff的目的是找出差异，最小化的更新视图。 diff算法发生在视图更新阶段，当数据发生变化的时候，diff会对新旧虚拟DOM进行对比，只渲染有变化的部分。 对比是不是同类型标签，不是同类型直接替换 如果是同类型标签，执行patchVnode方法，判断新旧vnode是否相等。如果相等，直接返回。 新旧 1vnode 不相等，需要比对新旧节点，比对原则是以新节点为主，主要分为以下几种。 newVnode 和 oldVnode都有文本节点，用新节点替换旧节点。 newVnode有子节点，oldVnode没有，新增newVnode的子节点。 newVnode没有子节点，oldVnode有子节点，删除oldVnode中的子节点。 newVnode和oldVnode都有子节点，通过updateChildren对比子节点。 双端diff updateChildren方法用来对比子节点是否相同，将新旧节点同级进行比对，减少比对次数。会创建4个指针，分别指向新旧两个节点的首尾，首和尾指针向中间移动。 每次对比下两个头指针指向的节点、两个尾指针指向的节点，头和尾指向的节点，是不是 key是一样的，也就是可复用的。如果是重复的，直接patch更新一下，如果是头尾节点，需要进行移动位置，结果以新节点的为主。 如果都没有可以复用的节点，就从旧的vnode中查找，然后进行移动，没有找到就插入一个新节点。 当比对结束后，此时新节点还有剩余，就批量增加，如果旧节点有剩余就批量删除。","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"vue3","slug":"vue3","permalink":"http://example.com/tags/vue3/"}]},{"title":"vue3-rabbit小兔鲜电商项目","slug":"vue3-rabbit小兔鲜电商项目","date":"2024-10-01T14:48:11.000Z","updated":"2025-01-21T13:30:04.330Z","comments":true,"path":"2024/10/01/vue3-rabbit小兔鲜电商项目/","permalink":"http://example.com/2024/10/01/vue3-rabbit%E5%B0%8F%E5%85%94%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE/","excerpt":"","text":"技术栈vue3+JavaScript+vue-router+pinia+element-plus+axios+echarts+vueuse 创建项目并整理目录1npm init vue@latest 目录结构 文件夹 作用 apis 接口 assets 静态资源 components 通用组件 composables 组合函数 directives 全局指令 router 路由Router stores Pinia仓库 styles 全局样式文件夹 utils 工具函数 views 页面级组件 关联远程github项目git init git add . git commit -m “init” git remote add origin … git branch -M main git push –set-upstream origin main jsconfig.json配置别名路径 配置别名路径可以在写代码时联想提示路径 12345678&#123; &quot;compilerOptions&quot; : &#123; &quot;baseUrl&quot; : &quot;./&quot;, &quot;paths&quot; : &#123; &quot;@/*&quot;:[&quot;src/*&quot;] &#125; &#125;&#125; elementPlus引入安装elementPlus和自动导入插件12npm install element-plusnpm install -D unplugin-vue-components unplugin-auto-import 配置自动按需导入1234567891011121314151617// 引入插件import AutoImport from &#x27;unplugin-auto-import/vite&#x27;import Components from &#x27;unplugin-vue-components/vite&#x27;import &#123; ElementPlusResolver &#125; from &#x27;unplugin-vue-components/resolvers&#x27;export default defineConfig(&#123; plugins: [ // 配置插件 AutoImport(&#123; resolvers: [ElementPlusResolver()], &#125;), Components(&#123; resolvers: [ElementPlusResolver()], &#125;), ]&#125;) 测试组件123&lt;template&gt; &lt;el-button type=&quot;primary&quot;&gt;i am button&lt;/el-button&gt;&lt;/template&gt; 定制elementPlus主题安装sass 基于vite的项目默认不支持css预处理器，需要开发者单独安装 1npm i sass -D 准备定制化的样式文件12345678910111213141516171819202122232425/* 只需要重写你需要的即可 */@forward &#x27;element-plus/theme-chalk/src/common/var.scss&#x27; with ( $colors: ( &#x27;primary&#x27;: ( // 主色 &#x27;base&#x27;: #27ba9b, ), &#x27;success&#x27;: ( // 成功色 &#x27;base&#x27;: #1dc779, ), &#x27;warning&#x27;: ( // 警告色 &#x27;base&#x27;: #ffb302, ), &#x27;danger&#x27;: ( // 危险色 &#x27;base&#x27;: #e26237, ), &#x27;error&#x27;: ( // 错误色 &#x27;base&#x27;: #cf4444, ), )) 自动导入配置 这里自动导入需要深入到elementPlus的组件中，按照官方的配置文档来 自动导入定制化样式文件进行样式覆盖 按需定制主题配置 （需要安装 unplugin-element-plus） 1234567891011121314151617181920212223242526272829303132import &#123; fileURLToPath, URL &#125; from &#x27;node:url&#x27;import &#123; defineConfig &#125; from &#x27;vite&#x27;import vue from &#x27;@vitejs/plugin-vue&#x27;import AutoImport from &#x27;unplugin-auto-import/vite&#x27;import Components from &#x27;unplugin-vue-components/vite&#x27;import &#123; ElementPlusResolver &#125; from &#x27;unplugin-vue-components/resolvers&#x27;export default defineConfig(&#123; plugins: [ vue(), AutoImport(&#123; resolvers: [ElementPlusResolver()], &#125;), Components(&#123; resolvers: [ElementPlusResolver(&#123;importStyle: &quot;sass&quot;&#125;)], &#125;), ], resolve: &#123; alias: &#123; &#x27;@&#x27;: fileURLToPath(new URL(&#x27;./src&#x27;, import.meta.url)) &#125; &#125;, css: &#123; preprocessorOptions: &#123; scss: &#123; // 自动导入定制化样式文件进行样式覆盖 additionalData: ` @use &quot;@/styles/element/index.scss&quot; as *; `, &#125; &#125; &#125;&#125;) axios安装并简单封装安装axios1npm i axios 基础配置 官方文档地址：https://axios-http.com/zh/docs/intro基础配置通常包括： 实例化 - baseURL + timeout 拦截器 - 携带token 401拦截等 1234567891011121314151617181920212223242526272829303132333435363738import router from &#x27;@/router&#x27;import &#123; useUserStore &#125; from &#x27;@/stores/user&#x27;import axios from &#x27;axios&#x27;import &#123; ElMessage &#125; from &#x27;element-plus&#x27;import &#x27;element-plus/theme-chalk/el-message.css&#x27;// 创建axios实例const httpInstance = axios.create(&#123; baseURL: &#x27;http://pcapi-xiaotuxian-front-devtest.itheima.net&#x27;, timeout: 5000&#125;)// axios请求拦截器httpInstance.interceptors.request.use(config =&gt; &#123; const userStore = useUserStore() const token = userStore.userInfo.token if (token) &#123; config.headers.Authorization = `Bearer $&#123;token&#125;` &#125; return config&#125;, e =&gt; Promise.reject(e))// axios响应式拦截器httpInstance.interceptors.response.use(res =&gt; res.data, e =&gt; &#123; const userStore = useUserStore() ElMessage(&#123; type: &#x27;warning&#x27;, message: e.response.data.message &#125;) //401token失效处理 if (e.response.status === 401) &#123; userStore.clearUserInfo() router.push(&#x27;/login&#x27;) &#125; return Promise.reject(e)&#125;)export default httpInstance 封装请求函数并测试1234567import http from &#x27;@/utils/http&#x27;export function getCategoryAPI () &#123; return http(&#123; url: &#x27;home/category/head&#x27; &#125;)&#125; 路由整体设计路由设计原则：找页面的切换方式，如果是整体切换，则为一级路由，如果是在一级路由的内部进行的内容切换，则为二级路由 123&lt;template&gt; 我是登录页&lt;/template&gt; 123&lt;template&gt; 我是首页&lt;/template&gt; 123&lt;template&gt; 我是home&lt;/template&gt; 123&lt;template&gt; 我是分类&lt;/template&gt; 1234567891011121314151617181920212223242526272829303132333435// createRouter：创建router实例对象// createWebHistory：创建history模式的路由import &#123; createRouter, createWebHistory &#125; from &#x27;vue-router&#x27;import Login from &#x27;@/views/Login/index.vue&#x27;import Layout from &#x27;@/views/Layout/index.vue&#x27;import Home from &#x27;@/views/Home/index.vue&#x27;import Category from &#x27;@/views/Category/index.vue&#x27;const router = createRouter(&#123; history: createWebHistory(import.meta.env.BASE_URL), // path和component对应关系的位置 routes: [ &#123; path: &#x27;/&#x27;, component: Layout, children: [ &#123; path: &#x27;&#x27;, component: Home &#125;, &#123; path: &#x27;category&#x27;, component: Category &#125; ] &#125;, &#123; path: &#x27;/login&#x27;, component: Login &#125; ]&#125;)export default router 静态资源引入和Error Lens安装静态资源引入 图片资源 - 把 images 文件夹放到 assets 目录下 样式资源 - 把 common.scss 文件放到 styles 目录下 Error Lens插件安装scss变量自动导入123456// src/styles/var.scss$xtxColor: #27ba9b;$helpColor: #e26237;$sucColor: #1dc779;$warnColor: #ffb302;$priceColor: #cf4444; 1234567891011css: &#123; preprocessorOptions: &#123; scss: &#123; // 自动导入scss文件 additionalData: ` @use &quot;@/styles/element/index.scss&quot; as *; @use &quot;@/styles/var.scss&quot; as *; `, &#125; &#125;&#125; 懒加载指令实现封装全局指令123456789101112131415161718192021import &#123; useIntersectionObserver &#125; from &#x27;@vueuse/core&#x27;export const lazyPlugin = &#123; install(app) &#123; app.directive(&#x27;img-lazy&#x27;, &#123; mounted(el, binding) &#123; // el: 指令绑定的那个元素 img // binding: binding.value 指令等于号后面绑定的表达式的值 图片url const &#123; stop &#125; = useIntersectionObserver( el, ([&#123; isIntersecting &#125;]) =&gt; &#123; if (isIntersecting) &#123; el.src = binding.value stop() &#125; &#125;, ) &#125; &#125;) &#125;&#125; 注册全局指令123// 全局指令注册import &#123; lazyPlugin &#125; from &#x27;@/directives&#x27;app.use(lazyPlugin) 图片懒加载123456789101112131415161718&lt;div class=&quot;home-product&quot;&gt; &lt;HomePanel :title=&quot;cate.name&quot; v-for=&quot;cate in goodsProduct&quot; :key=&quot;cate.id&quot;&gt; &lt;div class=&quot;box&quot;&gt; &lt;RouterLink class=&quot;cover&quot; to=&quot;/&quot;&gt; &lt;!-- 指令替换 --&gt; &lt;img v-img-lazy=&quot;cate.picture&quot; /&gt; &lt;/RouterLink&gt; &lt;ul class=&quot;goods-list&quot;&gt; &lt;li v-for=&quot;goods in cate.goods&quot; :key=&quot;goods.id&quot;&gt; &lt;RouterLink to=&quot;/&quot; class=&quot;goods-item&quot;&gt; &lt;!-- 指令替换 --&gt; &lt;img v-img-lazy=&quot;goods.picture&quot; alt=&quot;&quot; /&gt; &lt;/RouterLink&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/HomePanel&gt;&lt;/div&gt; 路由缓存路由缓存问题：路由只有参数变化时，会复用组件实例，导致页面不更新 解决方法： 不在意性能，在RouterView标签里加key属性 选择路由的onBeforeRouteUpdate方法 123onBeforeRouteUpdate((to)=&gt;&#123; &#125;) 路由切换自动滚动至顶部12345678910const router = createRouter(&#123; history: createWebHistory(import.meta.env.BASE_URL), routes: [... ], scrollBehavior()&#123; return &#123; top:0 &#125; &#125;&#125;) Pinia持久化存储12345678910111213141516171819202122import &#123; loginAPI &#125; from &quot;@/apis/user&quot;import &#123; defineStore &#125; from &quot;pinia&quot;import &#123; ref &#125; from &quot;vue&quot;export const useUserStore = defineStore(&#x27;user&#x27;, () =&gt; &#123; let userInfo = ref(&#123;&#125;) const getUserInfo = async (&#123; account, password &#125;) =&gt; &#123; const res = await loginAPI(&#123; account, password &#125;) userInfo.value = res.result &#125; const clearUserInfo = () =&gt; &#123; userInfo.value = &#123;&#125; &#125; return &#123; userInfo, getUserInfo, clearUserInfo &#125;&#125;, &#123; persist: true, &#125;,) 项目亮点1) 自定义vue指令v-lazy-img背景: 电商平台项目有大量的商品图与详情图, 同时大量加载与渲染图片资源会挤占带宽, 首页白屏与加载时间过长,体验不好, 所以需要使用到图片懒加载。封装成vue指令是为了在项目各文件中更便捷使用。 原理：使用vueUse函数库里的useIntersectionObserver函数，检测目标元素在窗口中是否可见。利用这个函数来定义懒加载插件,核心逻辑就是当图片进入到视口区域,就把url赋值给src,但是因为useIntersectionObserver对于元素的监听是一直存在的,这样就存在一个内存浪费的问题，虽然图片已经加载完毕了,但是鼠标滑动时仍然在监听，这时要调用函数的返回对象的stop函数,让它对于已经加载好的图片不再重复监听。 2) axios的二次封装引入axios并创建实例, 添加请求拦截器与响应拦截器, 在请求拦截器中，如果token存在，则在请求头中添加一个Authorization字段。在响应拦截器中，配置请求出错时的错误处理函数，使用element-plus的ELMessage组件来显示服务器返回的错误信息，如果返回状态码为401（未授权），就要进行token失效处理，需要清除用户信息并重定向到登录页面。 为什么要在请求拦截器携带Token参数Token作为用户标识，在很多个接口中都需要携带才可以正确获取数据。为了统一控制采取在请求拦截器携带的方案 3) pinia在项目中的使用Pinia是Vue的专属的最新状态管理库，是Vuex状态管理工具的替代品 项目中使用到了pinia的模块： 用户模块：获取用户信息并登录成功后储存用户信息、退出登录时清除用户信息 首页的nav模块：定义导航数据，接口获取导航。在首页导航与吸顶导航中调用，避免代码重复与冗余。 购物车模块：购物车的增删改查，清空购物车，以及一些总价、总数量等的计算属性 4）如何持久化本地pinia数据？1、用户数据中有一个关键的数据叫做Token（用来标识当前用户是否登录），而Token持续一段时间才会过期 2、Pinia的存储是基于内存的，刷新就丢失，为了保持登录状态就要做到刷新不丢失，需要配合持久化进行存储 3、有两种方式，本地存储localStorage，以及pinia的插件pinia-plugin-persistedstate 5）路由缓存问题，即路由跳转时，页面没有更新什么是路由缓存问题：使用带有参数的路由时需要注意的是，当用户从／users／johnny 导航到／users／jolyne 时，相同的组件实例将被重复使用。因为两个路由都渲染同个组件，比起销毁再创建，复用则显得更加高效。不过，这也意味着组件的生命周期钩子不会被调用。 问题：一级分类的切换正好满足上面的条件，组件实例复用，导致分类数据无法更新 解决问题的思路： 让组件实例不复用，强制销毁重建 。 给router-view添加key属性 监听路由变化，变化之后执行数据更新操作。 当router更新时重新发送页面请求 onBeforeRouteUpdate((to)=&gt;&#123;getNavList(to.params.id)&#125;) 6）瀑布流布局，实现商品列表的无限加载功能需求背景：在商品筛选结果页与商品列表页，监听页面触底时重新触发列表数据的请求与加载，使得用户浏览行为不被打断。 核心实现逻辑：使用elementPlus提供的v-infinite-scroll指令监听是否满足触底条件，满足加载条件时让页数参数加一获取下一页数据，做新老数据拼接渲染。加载完毕结束监听。 7）支付业务流程 主要关注客户端与后端服务之间的交互 8）定制路由滚动行为当切换路由时，页面自动滚动到顶部，在router文件中进行配置 12345678910const router = createRouter(&#123; history: createWebHistory(import.meta.env.BASE_URL), routes: [], // 路由行为的配置项 切换路由时自动滚回顶部 scrollBehavior()&#123; return &#123; top:0 &#125; &#125;&#125;) 9）手动实现导航组件的吸顶展示功能 需求背景：当首页页面过长时，使用吸顶效果，使得用户在滑动读取数据的时候把导航条一直固定在屏幕上方，以便用户快速操作和交互。 逻辑实现：vueuse中的获取滚动距离顶部的y轴参数，当滚动距离大于100（页面header部分的高度）时，添加show类名，实现吸顶效果 10）在路由页面，使用导航守卫，配置路由跳转前后的行为主要实现以下几点： 1、配置页面跳转的loading动效 2、切换路由时自动滚回页面顶部 3、没有登录时，在地址栏输入url，不能直接跳转到相对应的页面 4、页面标题随着meta进行变化 12345678910111213141516171819import &#123; ElLoading &#125; from &#x27;element-plus&#x27;import &#x27;element-plus/theme-chalk/el-loading.css&#x27;// 跳转前router.beforeEach((to,from,next)=&gt;&#123; ElLoading.service(&#123; fullscreen: true, text: &#x27;Loading...&#x27; &#125;) window.scrollTo(0,0) next()&#125;)// 跳转后router.afterEach((to)=&gt;&#123; setTimeout(()=&gt;&#123; const loadingInstance = ElLoading.service() loadingInstance.close() &#125;,1000) document.title = to.meta.title || &#x27;my project&#x27;&#125;)","categories":[{"name":"项目","slug":"项目","permalink":"http://example.com/categories/%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://example.com/tags/vue/"}]},{"title":"2024-9-30","slug":"2024-9-30","date":"2024-09-30T12:56:07.000Z","updated":"2024-10-09T16:09:43.468Z","comments":true,"path":"2024/09/30/2024-9-30/","permalink":"http://example.com/2024/09/30/2024-9-30/","excerpt":"","text":"😀😀 发财了发财了！","categories":[{"name":"随笔","slug":"随笔","permalink":"http://example.com/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[]},{"title":"JavaScript","slug":"JavaScript","date":"2024-09-28T03:21:13.000Z","updated":"2025-01-05T11:48:07.862Z","comments":true,"path":"2024/09/28/JavaScript/","permalink":"http://example.com/2024/09/28/JavaScript/","excerpt":"","text":"输入输出语句 prompt(info) alert(msg) console.log(msg) undefined与null undefined表示没有赋值，未定义数据类型 null表示值为空，空数据类型。如果一个变量里面确定存放的是对象，如果还没准备好对象，可以放一个null 类型转换隐式转换 +号两边只要有一个是字符串，都会把另外一个转成字符串 -，*，&#x2F;，%：字符串转数字型后计算 +作为正号解析可以转换成数字型 显示转换 +|Number()|parseInt()|parseFloat():转换为数字型 数组 方法&#x2F;属性 作用 arr.length 获取数组长度 arr.at() 接收一个整数值并返回该索引对应的元素，允许正数和负数。负整数从数组中的最后一个元素开始倒数。 arr.concat() 合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。可以用来拷贝数组 arr.every() 测试一个数组内的所有元素是否都能通过指定函数的测试。它返回一个布尔值。 arr.fill(element,i,j) 用一个固定值填充一个数组中从起始索引（默认为 0）到终止索引（默认为 array.length）内的全部元素。它返回修改后的数组。 arr.filter() 创建给定数组一部分的浅拷贝，其包含通过所提供函数实现的测试的所有元素。 arr.find() 返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。 arr.findIndex() 返回数组中满足提供的测试函数的第一个元素的索引。若没有找到对应元素则返回 -1。 arr.findLast() 反向迭代数组，并返回满足提供的测试函数的第一个元素的值。如果没有找到对应元素，则返回 undefined。 arr.findLastIndex() 反向迭代数组，并返回满足所提供的测试函数的第一个元素的索引。若没有找到对应元素，则返回 -1。 arr.flat(Infinity) 创建一个新的数组，并根据指定深度递归地将所有子数组元素拼接到新的数组中。 arr.forEach() 对数组的每个元素执行一次给定的函数。 arr.includes() 判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回 false。 arr.indexOf() 返回数组中第一次出现给定元素的下标，如果不存在则返回 -1。 arr.join() 将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串，用逗号或指定的分隔符字符串分隔。 arr.findLastIndexOf(element,fromIndex) 返回数组中给定元素最后一次出现的索引，如果不存在则返回 -1。该方法从 fromIndex 开始向前搜索数组。 arr.map() 创建一个新数组，这个新数组由原数组中的每个元素都调用一次提供的函数后的返回值组成。 arr.pop() 数组中删除最后一个元素，并返回该元素的值。 arr.push() 将指定的元素添加到数组的末尾，并返回新的数组长度。 arr.reduce((pre,current)&#x3D;&gt;func,initial) 对数组中的每个元素按序执行一个提供的 reducer 函数，每一次运行 reducer 会将先前元素的计算结果作为参数传入，最后将其结果汇总为单个返回值。 arr.reverse() 就地反转数组中的元素，并返回同一数组的引用。 arr.toReversed() 不改变原始数组的情况下反转数组中的元素。 arr.shift() 从数组中删除第一个元素，并返回该元素的值。 arr.slice(start,end) 返回一个新的数组对象，这一对象是一个由 start 和 end 决定的原数组的浅拷贝（包括 start，不包括 end），其中 start 和 end 代表了数组元素的索引。原始数组不会被改变。 arr.some() 测试数组中是否至少有一个元素通过了由提供的函数实现的测试。如果在数组中找到一个元素使得提供的函数返回 true，则返回 true；否则返回 false arr.sort((a,b)&#x3D;&gt;a-b) 就地对数组的元素进行排序，并返回对相同数组的引用。默认排序是将元素转换为字符串，然后按照它们的 UTF-16 码元值升序排序。 arr.toSorted() 对数组的元素进行排序，不改变原数组，并返回新的数组。 arr.splice(splice(start, deleteCount, item1,……)) 就地移除或者替换已存在的元素和&#x2F;或添加新的元素。 arr.toSpliced() 创建一个删除和&#x2F;或替换部分内容而不改变原数组的新数组。 arr.unshift() 将指定元素添加到数组的开头，并返回数组的新长度。 对象 属性&#x2F;方法 描述 Object.keys(obj) 获得所有的属性名（数组） Object.values(obj) 获得所有的属性值（数组） Object.assign(copyObj,obj) 拷贝对象（浅拷贝）,常用以配置对象合并 Object.entries(obj) 返回对象的所有可枚举属性[key,value]数组 for(let key in obj) obj[key] 遍历对象 Math.random() 生成0-1之间的随机数 Math.ceil() 向上取整 Math.floor() 向下取整 Math.max() 找最大值 Math.min() 找最小值 Math.pow() 幂运算 Math.abs() 绝对值 Math.sign() 获取符号 date.getfullYear() 以四位数字返回年份。 date.getMonth() 返回月份 (0 ~ 11)。 date.getDate() 返回一个月中的某一天 (1 ~ 31)。 date.getDay() 返回一周中的某一天 (0 ~ 6)。 date.getHours() 返回小时 (0 ~ 23)。 date.getMinutes() 返回分钟 (0 ~ 59)。 date.getSeconds() 返回秒数 (0 ~ 59)。 date.getTime()|+new Date()|Date.now() 获取时间戳 str.length 字符串的长度 str.concat(s) 连接两个或更多字符串，并返回新的字符串 str.endsWith(s[,检测位置索引号]) 判断当前字符串是否是以指定的子字符串结尾的（区分大小写） str.indexOf(s) 返回某个指定的字符串值在字符串中首次出现的位置 str.lastIndexOf(s) 从后向前搜索字符串，并从起始位置（0）开始计算返回字符串最后出现的位置。 str.includes(s[,检测位置索引号]) 查找字符串中是否包含指定的子字符串 str.match(reg) 查找找到一个或多个正则表达式的匹配 str.split(‘分隔符’) 把字符串分割为字符串数组 str.substring(from,to) 提取字符串中两个指定的索引号[form,to)之间的字符 str.startsWith(s[,检测位置索引号]) 查看字符串是否以指定的子字符串开头 str.toLowerCase() 把字符串转换为小写 str.toUpperCase() 把字符串转换为大写 str.substr(startIndex,n) 从起始索引号提取字符串中指定数目的字符。 str.replace() 在字符串中查找匹配的子串，并替换与正则表达式匹配的子串 str.replaceAll() 在字符串中查找匹配的子串，并替换与正则表达式匹配的所有子串 str.search() 查找与正则表达式相匹配的值,返回匹配的起始位置 str.trim() 去除字符串两边的空白 Number.EPSILON JavaScript能表示的最小精度数 Number.isFinite() 检测是否为有限数 Number.isNaN() 检测是否为NaN Number.parseInt() 转化为整数 Number.parseFloat() 转化为浮点数 Number.isInteger() 判断是否为整数 正则表达式定义正则表达式1const reg = /表达式/修饰符 匹配字符 字符 描述 . 匹配任意字符，除了\\n、\\r abc 匹配对应的字符串 [abc] 查找方括号之间的任何字符 [^abc] 匹配除了括号内的字符以外的任意一个字符 [0-9] 查找任何从 0 至 9 的数字 (x|y) 查找任何以|分隔的选项，匹配不同模式 \\d 查找数字 \\s 查找空白字符,等于[\\t\\r\\n\\v\\f] \\w 匹配数字、字母、下划线，等价于[0-9a-zA-Z_] \\D \\S \\W 与对应的小写形式相反 \\b 匹配单词边界 \\uxxxx 查找以十六进制数 xxxx 规定的 Unicode 字符 ^ 匹配字符串的开头 $ 匹配字符串的结尾 量词 *：匹配前面的模式零次或一次或多次。 +：匹配前面的模式一次或多次。 ?：匹配前面的模式零次或一次。 &#123;n&#125;：匹配前面的模式恰好 n 次。 &#123;n,&#125;：匹配前面的模式至少 n 次。 &#123;n,m&#125;：匹配前面的模式至少 n 次且不超过 m 次。 分组和捕获 ( )：用于分组和捕获子表达式。 (?: )：用于分组但不捕获子表达式。 修饰符 i:执行对大小写不敏感的匹配。 g:全局匹配 m:多行匹配 匹配123456const reg = /she/string str = &#x27;sherlock-holmes&#x27;reg.test(str)//返回true|falsereg.exec(str)//返回数组|nullstr.replace(reg,&#x27;substitute&#x27;)str.search(reg) test() 方法用于检测一个字符串是否匹配某个模式。 exec() 方法用于检索字符串中的正则表达式的匹配。 search() 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。 replace() 方法用于在字符串中用一些字符串替换另一些字符串，或替换一个与正则表达式匹配的子串。 DOM对象document对象 属性&#x2F;方法 描述 document.querySelector() 返回文档中匹配指定的CSS选择器的第一元素 document.querySelectorAll() 返回文档中匹配的CSS选择器的所有元素节点列表 document.write() 向文档写 HTML 表达式 或 JavaScript 代码 document.createElement() 创建元素节点。 document.body 返回文档的body元素 document.documentElement 返回文档的根节点 document.title 返回当前文档的标题 DOM元素对象 属性&#x2F;方法 描述 element.innerHTML 设置或者返回元素的内容（解析标签）。 element.innerText 设置或者返回元素的文字内容（不解析标签）。 element.style 设置或返回元素的样式属性。 element.src|title|value|type 设置或返回元素的源|标题|值|类型。 element.className 设置或返回元素的类名。 element.classList.add()|remove()|toggle() 追加类名|移除类名|切换类名 element.dataset 获取data-属性 element.addEventListener(‘事件类型’,Func，是否使用捕获机制)|on事件 添加事件 element.removeEventListener(‘事件类型’,Func，是否使用捕获机制) 解绑事件（匿名函数无法解绑） element.parentNode 返回元素的父节点 element.children 返回元素的子元素的集合 element.nextElementSibling 返回元素的下一个兄弟节点 element.previousElementSibling 返回元素的上一个兄弟节点 element.appendChild(ele) 为元素添加一个新的子元素 element.insertBefore(insertEle,ele) 现有的子元素之前插入一个新的子元素 element.cloneNode(false|true) 克隆某个元素,参数为true时，同时克隆子元素 element.removeChild(ele) 删除一个子元素 事件对象 属性&#x2F;方法 描述 e.target 返回触发此事件的元素（事件的目标节点）。 e.type 返回当前 Event 对象表示的事件的名称。 e.currentTarget 返回其事件监听器触发该事件的元素。 e.timeStamp 返回事件生成的日期和时间。 e.preventDefault() 通知浏览器不要执行与事件关联的默认动作。 e.stopPropagation() 阻止冒泡。 BOM对象 window对象是一个全局对象，也可以说是JavaScript中的顶级对象 document、alert()、console都是window的属性和方法 所有通过var定义在全局作用域中的变量、函数都会变成window对象的属性和方法 window对象下的属性和方法调用时可以省略window location对象 属性&#x2F;方法 描述 location.href 返回完整的URL,可以用来跳转页面 location.hostname 返回URL的主机名 location.port 返回一个URL服务器使用的端口号 location.protocol 返回一个URL协议 location.search 返回一个URL的查询部分(?后部分) location.hash 返回一个URL的锚部分(#后部分) location.reload(true) 刷新页面 navigator对象12345678!(function()&#123; const userAgent = navigator.userAgent const android = userAgent.match(/(Android);?[\\s\\/]+([\\d.]+)?/) const iphone = userAgent.match(/(iPhone\\sOS)\\s([\\d_]+)/) if(android||iphone)&#123; location.href = &#x27;http://m.itcast.cn&#x27; &#125;&#125;)() history对象 属性方法 作用 history.length 返回历史列表中的网址数 history.back() 加载 history 列表中的前一个 URL history.forword() 加载 history 列表中的下一个 URL history.go(n) 加载 history 列表中的某个具体页面,正数前进、负数后退 localStorage对象 属性&#x2F;方法 描述 localStorage.length 返回存储对象中包含多少条数据 localStorage.key(n) 返回存储对象中第 n 个键的名称 localStorage.getItem(keyname) 返回指定键的值 localStorage.setItem(keyname,value) 添加键和值，如果对应的值存在，则更新该键对应的值 localStorage.removeItem(keyname) 移除键 localStorage.clear() 清除存储对象中所有的键 JSON.stringfy(复杂数据类型) JSON.parse(json数据) 定时器 const timer &#x3D; setInterval(function(){},ms) clearInterval(timer) const timer &#x3D; setTimeout(Func,ms) clearTimeout(timer)","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/tags/JavaScript/"}]},{"title":"2024-9-26","slug":"2024-9-26","date":"2024-09-26T14:20:07.000Z","updated":"2024-10-09T16:11:04.056Z","comments":true,"path":"2024/09/26/2024-9-26/","permalink":"http://example.com/2024/09/26/2024-9-26/","excerpt":"","text":"学生证发啦 学校里随机刷新的🐱学长 今天把css的基础课程看完了，做了一个名侦探柯南旋转海报的网页 名侦探柯南旋转海报 明天看一下flex布局还有学一下组合数学和cpp。 唉，感觉翘课自学效率比较高，但是软院又发文件要求上课点名，被23科憨害惨了。。。 下学期要不要翘课出去实习呢？如果厦门没有合适的实习岗怎么办呢？ 本以为考上可以休息一会儿，发现事情好像没有变少， 高中同学，大学同学有的已经工作了，有的还在谋出路， 我又要走去哪呢？","categories":[{"name":"随笔","slug":"随笔","permalink":"http://example.com/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[]},{"title":"css","slug":"css","date":"2024-09-23T05:03:55.000Z","updated":"2024-12-23T08:09:41.169Z","comments":true,"path":"2024/09/23/css/","permalink":"http://example.com/2024/09/23/css/","excerpt":"","text":"通配符选择器1234* &#123; margin:0; padding:0;&#125; 字体属性 font-family:字体系列 font-size:字体大小 默认16px font-weight:字体粗细 normal|bold|bolder|lighter|number(默认400) font-style:字体样式 normal|italic font: font-style font-weight font-size&#x2F;line-height font-family; font-size:14px&#x2F;1.5 1.5倍行高 文本属性 color:文本颜色 text-align:对齐方式 left|center|right text-decoration:添加&#x2F;删除一条线none|underline|overline|line-through text-index:首行缩进 em为1个文字的大小 line-height:行间距 要比font-size大 text-shadow:h-shadow v-shadow blur color 复合选择器 div a 后代选择器 div&gt;a 子元素选择器 div,span 并集选择器 a:link|a:visited|a:hover|a:active 链接伪类选择器（LoVe HaTe顺序编写） input:focus focus伪类选择器 E:first-child E:last-child E:nth-child(n|even|odd|5n|n+3|-n+5) E:first-of-type E:last-of-type E:nth-of-type(n|even|odd|5n|n+3|-n+5) 显示模式 块元素 自己独占一行 高度、宽度、外边距、内边距都可以控制 默认宽度是父级宽度的100% （除了文字类块元素）里面可以放行内或块级元素 行内元素 相邻行内元素在一行上 设置宽高无效 默认宽度为内容宽度 行内元素只能容纳文本或者行内元素 行内块元素：&lt;img/&gt;&lt;input/&gt;&lt;td/&gt; 相邻行内块元素在一行上 默认宽度为内容宽度 高度、宽度、外边距、内边距都可以控制 显示模式切换： display:none|block|inline 设置居中 类别 居中方法 块级元素 margin-left:auto;margin-right auto; 行内元素 父级元素添加text-align:center; 行内块元素 父级元素添加text-align:center; 所有元素的垂直居中 line-height:height 行内块（图片）和文字居中对齐 vertical-align:middle background background-image:url() background-repeat:repeat|no-repeat|repeat-x|repeat-y background-attachment:scroll|fixed background-position: x y|left center right|top center down background-size:x y|x|cover|contain cover可能显示不全，contain可能无法完全覆盖而显示空白 background:bg-color bg-image position&#x2F;bg-size bg-repeat bg-origin bg-attachment; 默认值为 transparent none 0% 0%&#x2F;auto repeat padding-box scroll; 选择器优先级 选择器 选择器权重 继承或者* 0，0，0，0 元素选择器，伪元素选择器 0，0，0，1 类选择器，伪类选择器 0，0，1，0 ID选择器 0，1，0，0 行内样式 1，0，0，0 !important ∞ 边框 border-width:5px border-style:none|solid|dashed|dotted border-color: border-top|down|left|down: border-collapse:separate|collapse 控制边框合并 border-radius:圆角边框 border:border-width||border-style||border-color 盒子模型由内至外(均会影响盒子大小)： padding border margin：设置左右边距为auto居中盒子 盒子阴影 box-shadow: h-shadow v-shadow blur spread color inset; 嵌套块元素的塌陷问题对于两个父子关系的块元素，父元素有上外边距同时子元素也有上外边距，此时父元素会塌陷比较大的外边距值 解决方案： 为父元素定义上边框 为父元素定义内边距 为父元素添加overflow:hidden 传统网页布局方式 标准流 浮动：多个块级元素横向排列 定位 float:none|left|right 浮动特性 脱离标准流浮动到指定位置，不再保留原先位置 如果多个盒子设置了浮动，则它们会按照属性值一行内显示并且顶端对齐排列 浮动元素具有行内块元素特性 流程： 先用标准流的父元素排列上下位置，之后内部元素采取浮动排列左右位置 浮动的盒子只会影响浮动盒子后面的标准流，不会影响前面的标准流 清除浮动父元素未指定高度，子元素全部浮动，导致父元素高度为0的问题，解决方法： 额外标签法 最后一个元素后添加块级元素清除浮动&lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt; 父元素添加overflow:hidden|auto|scroll; 缺点：无法显示溢出部分 :after伪元素法 1234567.clearfix:after&#123; content:&quot;&quot;; display:block; height:0; clear:both; visibility:hidden;&#125; 父元素添加类名clearfix 双伪元素法 12345678.clearfix:before,.clearfix:after&#123; content:&quot;&quot;; display:table;&#125;.clearfix:after&#123; clear:both;&#125; 定位定位&#x3D;定位模式+边偏移 定位模式 position:static|relative|absolute|fixed|sticky 边偏移 top|bottom|left|right 静态定位默认方式，没有边偏移。 相对定位相对原来位置，原来的位置继续保留。 绝对定位相对最近一级祖先元素位置，若祖先元素无定位（静态定位）或无祖先元素，则相对浏览器。若要固定与祖先元素的某个位置，祖先元素应添加相对定位。原来的位置不保留。 固定定位固定于浏览器可视区的位置，不随滚动条滚动，原来的位置不保留，特殊的绝对定位。 粘性定位相对定位+固定定位 以浏览器窗口为参照点移动元素，占有原来位置。 定位叠放次序z-index:取值越大越靠上 定位的其他特性绝对定位和固定定位也和浮动类似。 行内元素添加绝对或者固定定位，可以直接设置宽度和高度。 块级元素添加绝对或者固定定位，不给宽度和高度，默认大小为内容的大小。 浮动、定位的盒子不会引起外边距合并的问题。 浮动的元素不会压住下面标准流的文字（可以用来做文字环绕），而绝对定位和固定定位会。 元素的显示与隐藏 display:none|block 不保留位置 visibility:hidden|visible 保留位置 overflow:visible|auto|hidden|scroll （内容溢出元素框时，会发生什么。有定位的盒子慎用） 精灵图将小背景图片整合到一张大图中，减少服务器接收和发送请求的次数，提高页面加载速度 background-position: -x -y; 字体图标 文件小 放大缩小不失真 灵活，可以改变颜色、产生阴影、透明效果、旋转等 iconfont-阿里巴巴矢量图标库 三角形123456.box&#123; width:0; height:0; border:50px solid transparent; border-left-color:pink;//朝右的三角形&#125; 鼠标样式&amp;表单轮廓线&amp;f防止拖拽文本域cursor:default|pointer|move|text|no-allowed outline:none textarea{ ​ resize:none; } 行内块和文字垂直居中对齐image{ ​ vertical-align:top|bottom|middle 可以解决图片底部默认空白的问题 } 文字省略号显示1234div &#123; white-space:norap; text-overflow:ellipsis;&#125; 视频&#x2F;音频播放器12&lt;video src=&quot;&quot; autoplay=&quot;autoplay&quot; muted=&quot;muted&quot; controls=&quot;controls&quot; loop=&quot;loop&quot; poster=&quot;&quot;&gt;&lt;/video&gt;&lt;audio src=&quot;&quot; autoplay=&quot;autoplay&quot; controls=&quot;controls&quot; loop=&quot;loop&quot;&gt;&lt;/audio&gt; 属性选择器 选择符 简介 E[att&#x3D;”val”] 选择具有att属性的E元素 E[att&#x3D;”val”]] 选择具有att属性且属性值等于val的E元素 E[att^&#x3D;”val”]] 选择具有att属性且值以val开头的E元素 E[att$&#x3D;”val”]] 选择具有att属性且值以val结尾的E元素 E[att*&#x3D;”val”]] 选择具有att属性且值中含有val的E元素 伪元素选择器 before和after创建一个元素，但是属于行内元素 新创建的这个元素在文档树中是找不到的，所以我们称为伪元素 语法： element::before{} before和after必须有content属性 before在父元素内容前面创建元素，after在父元素内容后面插入元素 伪元素选择器与标签选择器权重一样 切换盒子模型 box-sizing:content-box 盒子大小为width+padding+border box-sizing:border-box 盒子大小为width CSS3过度鼠标悬浮时触发 transition:要过度的属性 花费时间(2s) 运动曲线(ease|liner) 何时开始(1s),要过度的属性 花费时间(2s) 运动曲线(ease) 何时开始(1s)； 全部变化，填all 2D转换 tranform:translate(x,y); tranform:translateX(x); tranform:translateY(y); transform:rotate(45deg); transform:scale(x,y) transform-origin: x y; 设置中心点 3D转换 transform:translate3d(x,y,z); tranform:translateX(x); tranform:translateY(y); transform:translateZ(z); perspective: px; &#x2F;&#x2F;透视写在观察元素的父元素上 transform-style:preserve-3d; &#x2F;&#x2F;子元素开启立体空间 动画 定义动画 12345678@keyframes move &#123; 0%(from) &#123; transform: translate(0px); &#125; 100%(to) &#123; transform: translate(100px); &#125;&#125; 调用动画 1animation: name duration timing-function delay iteration-count(1|infinite) direction(normal|alternate) fill-mode(backwords|forwords); 移动端常见布局 单独制作移动端页面 流式布局(百分比布局) flex弹性布局 less+rem+媒体查询布局 混合布局 响应式页面兼容移动端 媒体查询 bootstrap 流式布局 max-width: px;&#x2F;&#x2F;页面拉抻最大宽度 min-width: px;&#x2F;&#x2F;页面拉抻最小宽度 width:x% flex布局与浮动效果相似,但默认不换行，装不下时自动缩小子元素宽度 给父元素添加 display:flex; 给子元素设置宽高或分配比例 flex:1; 父元素属性 flex-direction:row|row-reverse|column|column-reverse 设置主轴 justify-content:flex-start|flex-end|center|space-around|space-between 设置主轴子元素排列方式 flex-wrap:nowrap|wrap 是否换行 align-items:flex-start|flex-end|center|stretch 设置侧轴子元素排列方式(单行) align-content:flex-start|flex-end|center|space-around|space-between|stretch 设置侧轴子元素排列方式(多行) flex-flow: flex-direction flex-wrap; 子元素属性 flex: 分配比例，可实现拉伸效果 align-self: 控制自己在侧轴的排列方式 order: 控制项目的排列顺序，越小越靠前，默认为0 rem适配方案通过修改html里面的文字大小来改变页面中元素的大小 媒体查询1234567891011121314151617181920212223//从小到大写，后面覆盖前面 &lt;link rel=&quot;stylesheet&quot; href=&quot;style320.css&quot; media=&quot;screen and (max-width:320px)&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;style640.css&quot; media=&quot;screen and (min-width:640px)&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;style960.css&quot; media=&quot;screen and (min-width:960px)&quot;&gt;//或@media screen and (max-width:539px) &#123; html&#123; &#125;&#125;@media screen and (min-width:540px) &#123; html &#123; &#125;&#125;@media screen and (min-width:970px) &#123; html &#123; &#125;&#125; lessvscode插件：easy less，cssrem 基本语法 @变量名:变量值 后代——嵌套 伪类&#x2F;伪元素选择器 &amp;: &amp;:: 运算符+-*&#x2F; 空格隔开 除法运算要加 () 单位不同则取第一个值的单位 @import “” 导入less文件 元素大小取值方法页面元素的rem值&#x3D;页面元素值（px)&#x2F;font-size字体大小","categories":[],"tags":[{"name":"css","slug":"css","permalink":"http://example.com/tags/css/"}]},{"title":"面试八股","slug":"面试八股","date":"2024-09-21T12:28:26.000Z","updated":"2025-02-13T07:28:59.741Z","comments":true,"path":"2024/09/21/面试八股/","permalink":"http://example.com/2024/09/21/%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1/","excerpt":"","text":"直接赋值、浅拷贝和深拷贝 直接赋值：传递的是地址，修改操作影响原对象 浅拷贝：创建一个新的对象，但只复制原始对象的基本数据类型的字段或引用（地址），而不复制引用指向的对象 深拷贝：创建一个新的对象，并且递归地复制原始对象的所有字段和引用指向的对象，而不仅仅是复制引用本身。深拷贝会递归复制整个对象结构，包括对象内部的对象，确保新对象和原始对象之间的所有关系都是独立的。 深拷贝实现123456789101112131415161718192021222324252627282930const obj = &#123; uname: &#x27;pink&#x27;, age: 18, hobby: [&#x27;乒乓球&#x27;, &#x27;足球&#x27;], family: &#123; baby: &#x27;小pink&#x27; &#125; &#125; const o = &#123;&#125;; function deepCopy(newObj, oldObj) &#123; for (let k in oldObj) &#123; if (oldObj[k] instanceof Array) &#123; newObj[k] = [] deepCopy(newObj[k], oldObj[k]) &#125; else if (oldObj instanceof Object) &#123; newObj[k] = &#123;&#125; deepCopy(newObj[k], oldObj[k]) &#125; else &#123; newObj[k] = oldObj[k] &#125; &#125; &#125; deepCopy(o, obj) o.uname = &#x27;hzx&#x27; o.hobby[0] = &#x27;篮球&#x27; o.family.baby = &#x27;小zx&#x27; console.log(obj) console.log(o) lodash 12import _ from &#x27;lodash&#x27;o = _.cloneDeep(obj) JSON 1o = JSON.parse(JSON.stringfy(obj)) 确定this的值在非严格模式下，总是指向同一个对象，在严格模式下可以是任意值 非严格模式 严格模式 全局环境 window window 直接调用 window undefined 对象方法调用 调用者 调用者 开启严格模式 1&#x27;use strict&#x27; 指定this的值 调用时指定 call方法 1func.call(thisArg,arg1,arg2...) apply方法 1func.apply(thisArg,[arg1,arg2...]) 创建时指定 bind方法 1const bindFunc = func.bind(thisArg,arg1,arg2...) 箭头函数 12345678const dog = &#123; name:&#x27;ason&#x27;, eat()&#123; setTimeout(()=&gt;&#123; console.log(this)//输出eat()的调用者dog &#125;) &#125;&#125; 面试回答: ​ call与apply,bind都可以改变函数内部this指向 call和apply传递的参数形式不一样 bind不会立即调用函数，而是返回一个新函数 箭头函数:创建时会绑定上一级作用域中的this 手写call方法与apply方法1234567891011121314151617181920212223242526272829303132333435363738Function.prototype.myCall = function(thisArg,...args)&#123; const key = Symbol(&#x27;key&#x27;) thisArg[key] = this const res = thisArg[key](...args) delete thisArg[key] return res&#125;Function.prototype.myApply = function(thisArg,args)&#123; const key = Symbol(&#x27;key&#x27;) thisArg[key] = this const res = thisArg[key](args) delete thisArg[key] return res&#125;const person = &#123; name:&#x27;hzx&#x27;&#125;function func(numA,numB) &#123; console.log(this) console.log(numA,numB) return numA+numB&#125;function func2([numA,numB]) &#123; console.log(this) console.log(numA,numB) return numA+numB&#125;const res = func.myCall(person,2,8)console.log(&#x27;myCall返回值为：&#x27;,res)const res2 = func2.myApply(person,[2,8])console.log(&#x27;myApply的返回值为：&#x27;,res2) 面试回答：手写call方法的步骤为 在function的原型上添加myCall方法,保证所有函数都可以调用 方法内部,通过动态为对象添加方法的形式来指定this指向 调用完毕之后通过delete关键字删除上一步动态增加的方法 方法的名字通过Symbol进行设置,避免和默认名重复 使用剩余参数的形式传递参数2-参数n(函数参数) 手写apply方法 在function的原型上添加myApply方法,保证所有函数都可以调用 方法内部,通过动态为对象添加方法的形式来指定this指向 调用完毕之后通过delete关键字删除上一步动态增加的方法 方法的名字通过Symbol进行设置,避免和默认名重复 直接使用数组传递函数的参数,内部调用时结合...运算符展开数组 手写bind方法12345678910111213141516171819Function.prototype.myBind = function(thisArg,...args1)&#123; return (...args2)=&gt;&#123; return this.call(thisArg,...args1,...args2) &#125;&#125;const person = &#123; name:&#x27;hzx&#x27;&#125;function func(numA,numB,numC,numD) &#123; console.log(this) console.log(numA,numB,numC,numD) return numA+numB+numC+numD&#125;const bindFunc = func.myBind(person,1,2)const res = bindFunc(3,4)console.log(&#x27;myBind返回值为：&#x27;,res) 面试回答:手写bind方法 function原型上添加myBind函数,参数1为绑定的this,参数2-参数2为绑定的参数 内部返回一个新箭头函数,目的是绑定作用域中的this 返回的函数内部,通过call进行this和参数绑定 通过call的参数2和参数3指定绑定的参数,和调用时传递的参数 防抖防抖：单位时间内频繁触发事件，只执行最后一次 12import _ from &#x27;lodash&#x27;触发函数时调用的函数=_.debounce(func, [wait=0], [options=]) 手写防抖函数1234567891011function debounce(fn, t) &#123; // 1. 声明定时器变量 let timber; return function()&#123; // 2. 每次事件触发时先判断是否有定时器，如果有先清除以前的定时器 if(timber) clearTimeout(timber) // 3. 如果没有定时器，则开启定时器，存入到定时器变量里 // 4. 定时器里面写函数调用 timber = setTimeout(fn, t) &#125;&#125; 节流单位时间内频繁触发事件，只执行一次 12import _ from &#x27;lodash&#x27;触发函数时调用的函数=_.throttle(func, [wait=0], [options=]) 123456789101112131415function throttle(fn, t) &#123; // 1. 声明定时器变量 let timber = null; return function () &#123; if (!timber) &#123; // 2. 如果没有定时器，则开启定时器，存入到定时器变量里 // 3. 定时器里面写函数调用,并删除定时器 timber = setTimeout(function () &#123; fn() timber = null &#125;, t) &#125; &#125;&#125; JavaScript静态属性和私有属性面试回答:class实现继承 子类通过extends继承继承父类 子类如果需要重新定义构造函数,必须在内部通过super关键字调用父类的构造函数 静态：类通过static关键字定义静态方法。不能在类的实例上调用静态方法，而应该通过类本身调用。 私有：类属性默认共有，可以使用增加哈希前缀#的方法来定义私有类字段，声明和访问时也需要加上,只能在类的内部访问。 123456789101112131415class Test &#123; static 静态属性 static 静态方法() &#123;&#125; #私有属性 #私有方法() &#123; &#125; info() &#123; this.#私有属性 this.#私有方法() &#125;&#125;Test.静态属性Test.静态方法() 面试回答:class语法补充 class中私有属性&#x2F;方法 定义和使用时需要使用关键字# 私有属性只能在类的内部使用,外部无法使用(代码中) Chrome的控制台中为了方便调试,可以直接访问 class中静态属性&#x2F;方法 定义和使用时需要使用关键字static 通过类访问 静态方法中的this是类 寄生组合继承123456789101112131415function Person(name) &#123; this.name = name&#125;Person.prototype.sayHi = function()&#123; console.log(`你好，我叫$&#123;this.name&#125;`)&#125;function Student(name) &#123; Person.call(this,name)&#125;Student.prototype = Object.create(Person,&#123; constructor:&#123; value:Student &#125;&#125;) 面试回答:ES5-寄生组合式继承 寄生组合式继承的核心步骤是:通过构造函数来继承属性,通过原型链来继承方法 寄生组合式继承和组合式继承的区别是:原型链的继承并没有调用父类的构造函数,而是直接基于父类的原型创建一个新副本实现继承 fetch方法123const res = await fetch(URL);res.statusconst data = await res.json(); 生成查询字符串： 12const p = new URLSearchParams(&#123;pname:&#x27;广东省&#x27;,cname:&#x27;深圳市&#x27;&#125;)p.toString() 1234567891011121314&lt;input type=&quot;file&quot; class=&quot;file&quot; accept=&quot;image/*&quot;&gt; &lt;script&gt; document.querySelector(&#x27;.file&#x27;).addEventListener(&#x27;change&#x27;, async function (e) &#123; // 生成FormData对象并添加数据 const data = new FormData() data.append(&#x27;img&#x27;, this.files[0]) const res = await fetch(&#x27;http://hmajax.itheima.net/api/uploadimg&#x27;, &#123; method: &#x27;post&#x27;, body: data &#125;) const json = await res.json() console.log(json) &#125;) &lt;/script&gt; 12345678910111213141516async function () &#123; // 通过headers设置请求头 const headers = new Headers() // 通过 content-type指定请求体数据格式 headers.append(&#x27;content-type&#x27;, &#x27;application/json&#x27;) // 参数1 url // 参数2 请求配置 const res = await fetch(&#x27;http://hmajax.itheima.net/api/register&#x27;, &#123; method: &#x27;post&#x27;,// 请求方法 headers, // 请求头 // 请求体 body: JSON.stringify(&#123; username: &#x27;itheima9876&#x27;, password: &#x27;123456&#x27; &#125;) &#125;) const json = await res.json() console.log(json) &#125; GeneratorGenerator-核心语法核心语法: 如何定义生成器函数: 如何获取generator对象 yield表达式的使用 通过for of获取每一个yield的值 12345678910111213141516171819202122232425262728293031// 1. 通过function* 创建生成器函数 function* foo() &#123; // 遇到yield表达式时会暂停后续的操作 yield &#x27;a&#x27; yield &#x27;b&#x27; yield &#x27;c&#x27; return &#x27;d&#x27;&#125;// 2. 调用函数获取生成器const f = foo()// 3. 通过next方法获取yield 之后的表达式结果，会被包装到一个对象中// 执行一次next 即可获取一次 yield之后的表达式结果const res1 = f.next()console.log(res1)// &#123;value: &#x27;a&#x27;, done: false&#125;const res2 = f.next()console.log(res2)// &#123;value: &#x27;b&#x27;, done: false&#125;const res3 = f.next()console.log(res3)// &#123;value: &#x27;c&#x27;, done: false&#125;// 最后一次可以拿到return的结果const res4 = f.next()console.log(res4)// &#123;value: &#x27;d&#x27;, done: true&#125; // done 为true之后，获取到的value为undefinedconst res5 = f.next()console.log(res5)// &#123;value: undefined, done: true&#125; // 4. 通过for of 获取每一个yield之后的值，const f2 = foo()for (const iterator of f2) &#123; console.log(iterator)&#125; 面试回答:Generator-核心语法 可以通过生成器函数(function* xxx()&#123;&#125;)来生成Generator对象: 通过Generator对象的next方法可以获取yield表达式之后的结果 Generator-id生成器**需求:**使用Generator实现一个id生成器id 12345678910function* idGenerator() &#123; // 逻辑略&#125;const idMaker = idGenerator()// 调用next方法,获取id(每次累加1)const &#123; value: id1 &#125; = idMaker.next()console.log(id1)const &#123; value: id2 &#125; = idMaker.next()console.log(id2) 核心步骤: 定义生成器函数 内部使用循环,通过yield返回id并累加 12345678910111213141516// 1. 通过function* 创建生成器函数 function* generator() &#123; let id = 0 // 无限循环 while (true) &#123; // id累加并返回 yield id++ &#125;&#125;// 2. 调用函数获取生成器const idMaker = generator()// 3. 需要id的时候 通过next获取即可const &#123; value: id1 &#125; = idMaker.next()console.log(id1)const &#123; value: id2 &#125; = idMaker.next()console.log(id2) 面试回答:Generator-id生成器 生成器函数内部的代码会在调用next方法时执行,利用这一特点,可以实现任意的生成器,需要时调用next即可获取结果 Generator-流程控制遇到yield表达式时会暂停后续的操作 **需求:**使用Generator实现流程控制 12345678function* weatherGenerator() &#123; // 逻辑略 yield axios()&#125;// 获取Generator实例const weather = weatherGenerator()// 依次获取 北上广深的天气 (axios)weather.next() 123456789101112131415161718192021222324252627282930&lt;button class=&quot;getWeather&quot;&gt;天气查询&lt;/button&gt;&lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/axios/1.3.6/axios.js&quot;&gt;&lt;/script&gt;&lt;script&gt; /** * 需求：流程控制，依次查询，北上广深的天气预报 * 参考code: 北京 110100 上海 310100 广州 440100 深圳 440300 * 接口文档: https://apifox.com/apidoc/project-1937884/api-49760220 * */ function* weatherGenerator() &#123; // 北京 yield axios(&#x27;http://hmajax.itheima.net/api/weather?city=110100&#x27;) // 上海 yield axios(&#x27;http://hmajax.itheima.net/api/weather?city=310100&#x27;) // 广州 yield axios(&#x27;http://hmajax.itheima.net/api/weather?city=440100&#x27;) // 深圳 yield axios(&#x27;http://hmajax.itheima.net/api/weather?city=440300&#x27;) &#125; const cityWeather = weatherGenerator() document.querySelector(&#x27;.getWeather&#x27;).addEventListener(&#x27;click&#x27;,() =&gt; &#123; cityWeather.next().value.then(res=&gt;&#123; console.log(res) return cityWeather.next().value &#125;).then(res=&gt;&#123; console.log(res) return cityWeather.next().value &#125;) &#125;)&lt;/script&gt; 面试回答:Generator-流程控制 使用Generator控制流程的本质是利用yield关键字来分隔逻辑比如示例中依次调用了多个接口,通过yield分隔,通过next来触发调用 函数柯里化柯里化是把接收多个参数的函数变换成接收一个单一参数的函数，并返回接收剩余参数而且返回结果的新函数的技术。 1234567891011function sum(a,b)&#123; return a + b&#125;sum(a,b)function sum(a)&#123; return function(b)&#123; return a + b &#125;&#125;sum(a)(b) 123456789101112//改写函数sum实现：参数传递到5个即可实现累加const nums = []function sum(...args)&#123; nums.push(..args) if(nums.length&gt; = 5)&#123; const res = nums.slice(0,5).reduce((p,c)=&gt;p+c,0) nums = [] return res &#125;else&#123; return sum &#125;&#125; 1234567891011121314function sumMaker(length)&#123; const nums = [] function sum(...args)&#123; nums.push(..args) if(nums.length&gt; = length)&#123; const res = nums.slice(0,length).reduce((p,c)=&gt;p+c,0) nums = [] return res &#125;else&#123; return sum &#125; &#125; return sum&#125; 12345const typeofTest = function (type) &#123; return (thing)=&gt;&#123; return typeof thing === type &#125;&#125; Vue和React有什么区别","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"面试八股","slug":"面试八股","permalink":"http://example.com/tags/%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1/"}]},{"title":"2024-9-21","slug":"2024-9-21","date":"2024-09-21T11:48:00.000Z","updated":"2024-09-30T12:56:51.687Z","comments":true,"path":"2024/09/21/2024-9-21/","permalink":"http://example.com/2024/09/21/2024-9-21/","excerpt":"","text":"高新区的晚霞，我想我会想念这里的 今天状态不错 学信网档案更新啦","categories":[{"name":"随笔","slug":"随笔","permalink":"http://example.com/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[]},{"title":"git","slug":"git","date":"2024-09-20T13:23:00.000Z","updated":"2025-02-09T07:56:13.009Z","comments":true,"path":"2024/09/20/git/","permalink":"http://example.com/2024/09/20/git/","excerpt":"","text":"常用命令 git init 初始化git仓库 git clone [本地目录] 克隆仓库到本地 git add (file) 添加工作区文件到暂存区 git commit -m (“message”) 从暂存区提交到本地仓库 git push [-f] [–set-upstream] [远端仓库名称 [本地分支名] [:远端分支名]] 推送到远程分支（同名可省略远端分支名） –set-upstream 推送的同时建立起和远程分支的关联关系 git status 查看仓库状态 git reset –hard (commitId) 版本回退 git-log&#x2F;git log 查看版本 git branch 查看分支 git branch (dev) 创建分支 git branch -d (dev) 删除分支 -D 强制删除 git checkout (dev) 切换分支 git checkout -b (dev) 创建并切换分支 git merge (dev) 将某分支合并到当前分支 git fetch [remote name] [branch name] 抓取仓库里的更新到本地，不会进行合并 git pull [remote name] [branch name] 拉取远程仓库里的更新到本地,自动进行合并 实现使用git init创建git仓库，或者使用git clone克隆已有的git项目。git brach 查看分支，git branch ＋分支名创建分支并通过git checkout 切换分支。也可以通过git check out -b 创建并切换分支， 常见分支 master分支 线上运行分支，主分支 dev分支 从master创建的分支，开发分支，开发完成后合并到master分支 feature分支 从dev创建的分支，同期并行开发一些功能，完成后合并到dev分支 hotfix分支 master派生的分支，线上bug修复使用，修复完成后合并到master、test、develop分支 配置公&#x2F;私钥 用户（hzx）目录下 12ssh-keygen -t rsacat .ssh/id_rsa.pub 到代码托管平台粘贴公钥 1ssh -T git@github.com 关联远程仓库 创建仓库时README,.gitignore，liscence都不要添加 1git remote add origin(远端仓库名称) git@github.com:hzx-bit/git_test.git(远程仓库地址) git remote 查看远程仓库 git push origin main 本地仓库推送到远程仓库 同步远程仓库，远程解决冲突 git fetch+git merge git pull","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"git","slug":"git","permalink":"http://example.com/tags/git/"}]},{"title":"react-jike-mobile","slug":"react-jike-mobile","date":"2024-09-19T15:21:56.000Z","updated":"2024-09-20T07:20:03.521Z","comments":true,"path":"2024/09/19/react-jike-mobile/","permalink":"http://example.com/2024/09/19/react-jike-mobile/","excerpt":"","text":"初始化项目 npm create vite@latest react-jike-mobile – –template react-ts 精简项目结构 git init git commit -m “初始化项目” git add origin https://github.com/hzx-bit/react-jike-mobile.git git branch -M main git push -u origin main 安装依赖12npm i antd-mobile react-router-dom axiosnpm i sass @types/node -D 配置路径别名修改vite配置123456789101112131415//vite.config.tsimport &#123; defineConfig &#125; from &#x27;vite&#x27;import react from &#x27;@vitejs/plugin-react&#x27;import path from &#x27;path&#x27;// https://vitejs.dev/config/export default defineConfig(&#123; plugins: [react()], resolve: &#123; alias: &#123; &#x27;@&#x27;: path.resolve(__dirname, &#x27;./src&#x27;), &#125;, &#125;,&#125;) 安装node类型包1npm i @types/node -D 修改tsconfig.app.json文件12345678&#123; &quot;baseUrl&quot;: &quot;.&quot;, &quot;paths&quot;: &#123; &quot;@/*&quot;: [ &quot;src/*&quot; ] &#125;,&#125; axios安装配置安装axios1npm i axios 简易封装123456789101112131415161718192021222324252627282930313233import axios from &#x27;axios&#x27;//1.根域名配置//2.超时时间//3.请求拦截器 响应拦截器const requestInstance = axios.create(&#123; baseURL: &#x27;http://geek.itheima.net/v1_0&#x27;, timeout: 5000,&#125;)// 添加请求拦截器//在请求发送之前 做拦截 处理参数requestInstance.interceptors.request.use( (config) =&gt; &#123; return config &#125;, (error) =&gt; &#123; return Promise.reject(error) &#125;)//添加响应拦截器requestInstance.interceptors.response.use( (response) =&gt; &#123; // 2xx 范围内的状态码都会触发该函数。 // 对响应数据做点什么 return response &#125;, (error) =&gt; &#123; // 超出 2xx 范围的状态码都会触发该函数。 // 对响应错误做点什么 return Promise.reject(error) &#125;)export default requestInstance 123import requestInstance from &#x27;./http&#x27;export &#123; requestInstance as http &#125;","categories":[{"name":"项目","slug":"项目","permalink":"http://example.com/categories/%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"react","slug":"react","permalink":"http://example.com/tags/react/"}]},{"title":"《我与地坛》文摘","slug":"《我与地坛》文摘","date":"2024-09-18T06:02:32.000Z","updated":"2025-02-13T06:47:17.663Z","comments":true,"path":"2024/09/18/《我与地坛》文摘/","permalink":"http://example.com/2024/09/18/%E3%80%8A%E6%88%91%E4%B8%8E%E5%9C%B0%E5%9D%9B%E3%80%8B%E6%96%87%E6%91%98/","excerpt":"","text":"一个人，出生了，这就不再是一个可以辩论的问题，而只是上帝交给他的一个事实；上帝在交给我们这件事实的时候，已经顺便保证了它的结果，所以死是一件不必急于求成的事，死是一个必然会降临的节日。这样想过之后我安心多了，眼前的一切不再那么可怕。比如你起早熬夜准备考试的时候，忽然想起有一个长长的假期在前面等待你，你会不会觉得轻松一点儿？并且庆幸并且感激这样的安排？ 有一年，十月的风又翻动起安详的落叶，我在园中读书，听见两个散步的老人说：“没想到这园子有这么大。”我放下书，想，这么大一座园子，要在其中找到她的儿子，母亲走过了多少焦灼的路。多年来我头一次意识到，这园中不单是处处都有过我的车辙，有过我的车辙的地方也都有过母亲的脚印。 谁又能把这世界想个明白呢？世上的很多事是不堪说的。你可以抱怨上帝何以要降诸多苦难给这人间，你也可以为消灭种种苦难而奋斗，并为此享有崇高与骄傲，但只要你再多想一步你就会坠入深深的迷茫了：假如世界上没有了苦难，世界还能够存在么？要是没有愚钝，机智还有什么光荣呢？要是没了丑陋，漂亮又怎么维系自己的幸运？要是没有了恶劣和卑下，善良与高尚又将如何界定自己又如何成为美德呢？要是没有了残疾，健全会否因其司空见惯而变得腻烦和乏味呢？我常梦想着在人间彻底消灭残疾，但可以相信，那时将由患病者代替残疾人去承担同样的苦难。如果能够把疾病也全数消灭，那么这份苦难又将由(比如说)相貌丑陋的人去承担了。就算我们连丑陋，连愚昧和卑鄙和一切我们所不喜欢的事物和行为，也都可以统统消灭掉，所有的人都一样健康、漂亮、聪慧、高尚，结果会怎样呢？怕是人间的剧目就全要收场了，一个失去差别的世界将是一潭死水，是一块没有感觉没有肥力的沙漠。 看来差别永远是要有的。看来就只好接受苦难——人类的全部剧目需要它，存在的本身需要它。看来上帝又一次对了。 于是就有一个最令人绝望的结论等在这里：由谁去充任那些苦难的角色？又有谁去体现这世间的幸福、骄傲和快乐？只好听凭偶然，是没有道理好讲的。 就命运而言，休论公道。 那么，一切不幸命运的救赎之路在哪里呢？ 设若智慧或悟性可以引领我们去找到救赎之路，难道所有的人都能够获得这样的智慧和悟性吗？ 我常以为是丑女造就了美人。我常以为是愚氓举出了智者。我常以为是懦夫衬照了英雄。我常以为是众生度化了佛祖。 这下好了，您不再恐慌了不再是个人质了，您自由了。算了吧你，我怎么可能自由呢？别忘了人真正的名字是：欲望。所以您得知道，消灭恐慌的最有效的办法就是消灭欲望。可是我还知道，消灭人性的最有效的办法也是消灭欲望。那么，是消灭欲望同时也消灭恐慌呢？还是保留欲望同时也保留人生？ 我在这园子里坐着，我听见园神告诉我：每一个有激情的演员都难免是一个人质。每一个懂得欣赏的观众都巧妙地粉碎了一场阴谋。每一个乏味的演员都是因为他老以为这戏剧与自己无关。每一个倒霉的观众都是因为他总是坐得离舞台太近了。我在这园子里坐着，园神成年累月地对我说：孩子，这不是别的，这是你的罪孽和福祉。 要是有些事我没说，地坛，你别以为是我忘了，我什么也没忘，但是有些事只适合收藏。不能说，也不能想，却又不能忘。它们不能变成语言，它们无法变成语言，一旦变成语言就不再是它们了。它们是一片朦胧的温馨与寂寥，是一片成熟的希望与绝望，它们的领地只有两处：心与坟墓。比如说邮票，有些是用于寄信的，有些仅仅是为了收藏。 我说不好我想不想回去。我说不好是想还是不想，还是无所谓。我说不好我是像那个孩子，还是像那个老人，还是像一个热恋中的情人。很可能是这样：我同时是他们三个。我来的时候是个孩子，他有那么多孩子气的念头所以才哭着喊着闹着要来，他一来一见到这个世界便立刻成了不要命的情人，而对一个情人来说，不管多么漫长的时光也是稍纵即逝，那时他便明白，每一步每一步，其实一步步都是走在回去的路上。当牵牛花初开的时节，葬礼的号角就已吹响。 但是太阳，它每时每刻都是夕阳也都是旭日。当它熄灭着走下山去收尽苍凉残照之际，正是它在另一面燃烧着爬上山巅布散烈烈朝辉之时。那一天，我也将沉静着走下山去，扶着我的拐杖。有一天，在某一处山洼里，势必会跑上来一个欢蹦的孩子，抱着他的玩具。 当然，那不是我。 但是，那不是我吗？ 宇宙以其不息的欲望将一个歌舞炼为永恒。这欲望有怎样一个人间的姓名，大可忽略不计。 因此偶尔有人说我是活在世外桃源，语气中不免流露了一点儿讥讽，仿佛这全是出于我的自娱甚至自欺。我颇不以为然。我既非活在世外桃源，也从不相信有什么世外桃源。但我相信世间桃源，世间确有此源，如果没有恐怕谁也就不想再活；倘此源有时弱小下去，依我看，至少讥讽并不能使其强大。千万年来它作为现实，更作为信念，这才不断。它源于心中再流入心中，它施于心又由于心，这才不断。欲其强大，舍心之虔诚又向何求呢？ 也有人说我是不是一直活在童话里？语气中既有赞许又有告诫。赞许并且告诫，这很让我信服。赞许既在，告诫并不意指人们之间应该加固一条防线，而只是提醒我：童话的缺憾不在于它太美，而在于它必要走进一个更为纷繁而且严酷的世界，那时只怕它太娇嫩。 我想，倘有来世，我先要占住几项先天的优越：聪明、漂亮和一副好身体。命运从一开始就不公平，人一生下来就有走运的和不走运的。譬如说一个人很笨，这该怨他自己吗？然而由此所导致的一切后果却完全要由他自己负责——他可能因此在兄弟姐妹之中是最不被父母喜爱的一个，他可能因此常受教师的斥责和同学们的嘲笑，他于是便更加自卑、更加委顿，饱受了轻蔑终也不知这事到底该怨谁。再譬如说，一个人生来就丑，相当丑，再怎么想办法去美容都无济于事，这难道是他的错误是他的罪过？不是，好，不是。那为什么就该他难得姑娘们的喜欢呢？因而婚事就变得格外困难，一旦有个漂亮姑娘爱上他却又赢得多少人的惊诧和不解，终于有了孩子，不要说别人就连他自己都希望孩子千万别长得像他自己。为什么就该他是这样呢？为什么就该他常遭取笑，常遭哭笑不得的外号，或者常遭怜悯，常遭好心人小心翼翼地对待呢？再说身体，有的人生来就肩宽腿长潇洒英俊（或者婀娜妩媚娉娉婷婷），生来就有一身好筋骨，跑得也快跳得也高，气力足耐力又好，精力旺盛，而且很少生病，可有的人却与此相反生来就样样都不如人。对于身体，我的体会尤甚。譬如写文章，有的人写一整天都不觉得累，可我连续写上三四个钟头眼前就要发黑。譬如和朋友们一起去野游，满心欢喜妙想联翩地到了地方，大家的热情正高雅趣正浓，可我已经累得只剩了让大家扫兴的份儿了。所以我真希望来世能有一副好身体。今生就不去想它了，只盼下辈子能够谨慎投胎，有健壮优美如卡尔·刘易斯一般的身材和体质，有潇洒漂亮如周恩来一般的相貌和风度，有聪明智慧如阿尔伯特·爱因斯坦一般的大脑和灵感。 既然是梦想不妨就让它完美些罢。何必连梦想也那么拘谨那么谦虚呢？我便如醉如痴并且极端自私自利地梦想下去。 其实秘密就已经是墙了。肚皮和眼皮都是墙，假笑和伪哭都是墙，只因这样的墙嫌软嫌累，要弄些坚实耐久的来加密。就算这心灵之墙可以轻易拆除，但山和水都是墙，天和地都是墙，时间和空间都是墙，命运是无穷的限制，上帝的秘密是不尽的墙。真要把这秘密之墙也都拆除，虽然很像是由来已久的理想接近了实现，但是等着瞧吧，满地球都怕要因为失去趣味而响起昏昏欲睡的鼾声，梦话亦不知从何说起。 趣味是要紧而又要紧的。秘密要好好保存。 探秘的欲望终于要探到意义的墙下。 真是神奇。很可能，生和死都不过取决于观察，取决于观察的远与近。比如，当一颗距离我们数十万光年的星星实际早已熄灭，它却正在我们的视野里度着它的青年时光。 时间限制了我们，习惯限制了我们，谣言般的舆论让我们陷于实际，让我们在白昼的魔法中闭目塞听不敢妄为。白昼是一种魔法，一种符咒，让僵死的规则畅行无阻，让实际消磨掉神奇。所有的人都在白昼的魔法之下扮演着紧张、呆板的角色，一切言谈举止，一切思绪与梦想，都仿佛被预设的程序所圈定。 因而我盼望夜晚，盼望黑夜，盼望寂静中自由的到来。 甚至盼望站到死中，去看生。 历史的每一瞬间，都有无数的历史蔓展，都有无限的时间延伸。我们生来孤单，无数的历史和无限的时间因破碎而成片断。互相埋没的心流，在孤单中祈祷，在破碎处眺望，或可指望在梦中团圆。记忆，所以是一个牢笼。印象是牢笼以外的天空。 谁说我没有死过?出生以前，太阳已无数次起落悠久的时光被悠久的虚无吞并又以我生日的名义卷土重来。 然而，终于这一天到来之时，时间已经远远地超过了暂时。我独自看那“编剧”后面的三个字，早已懂得:有为，与爱情，原是风马牛不相及的两个领域。但暂时，亦可在心中长久，而写作，却永远地不能与爱情无关。 但要是“爱”也喧嚣，“美”也招摇，“真诚”沦为一句时髦的广告，那怎么办?惟柔弱是爱愿的识别，正如放弃是喧嚣的解剂。人一活脱便要嚣张，天生的这么一种动物。这动物适合在地坛放养些时日——我是说当年的地坛。回望地坛，回望它的安静，想念中坐在不管它的哪一个角落，重新铺开一张纸吧。写，真是个办法，油然地通向着安静。写，这形式，注定是个人的，容易撞见诚实，容易被诚实揪住不放，容易在市场之外遭遇心中的阴暗，在自以为是时回归零度。把一切污浊、畸形、歧路，重新放回到那儿去检查，勿使伪劣的心魂流布。","categories":[{"name":"文摘","slug":"文摘","permalink":"http://example.com/categories/%E6%96%87%E6%91%98/"}],"tags":[{"name":"《我与地坛》","slug":"《我与地坛》","permalink":"http://example.com/tags/%E3%80%8A%E6%88%91%E4%B8%8E%E5%9C%B0%E5%9D%9B%E3%80%8B/"}]},{"title":"react-jike","slug":"react-jike","date":"2024-09-16T04:05:55.000Z","updated":"2024-10-14T08:48:33.695Z","comments":true,"path":"2024/09/16/react-jike/","permalink":"http://example.com/2024/09/16/react-jike/","excerpt":"","text":"目录结构 文件夹 作用 apis 接口 assets 静态资源 components 通用组件 pages 页面级组件 router 路由Router store Redux状态 utils 工具函数 安装依赖12npm i sass @craco/craco -Dnpm i antd react-router-dom axios @reduxjs/toolkit react-redux normalize.css xxxxxxxxxx import requestInstance from ‘.&#x2F;http’​export { requestInstance as http }typescript12345678910111213//index.jsimport &#x27;normalize.css&#x27;//index.scsshtml,body &#123; margin: 0; height: 100%;&#125;#root &#123; height: 100%;&#125; 配置别名路径 项目根目录创建craco.config.js，添加路径解析配置 123456789const path = require(&#x27;path&#x27;)module.exports = &#123; webpack:&#123; alias:&#123; &#x27;@&#x27;:path.resolve(__dirname,&#x27;src&#x27;) &#125; &#125;&#125; package.json中配置启动和打包配置 123456&quot;scripts&quot;: &#123; &quot;start&quot;: &quot;craco start&quot;, &quot;build&quot;: &quot;craco build&quot;, &quot;test&quot;: &quot;craco test&quot;, &quot;eject&quot;: &quot;react-scripts eject&quot; &#125;, 根目录下创建jsconfig.json 12345678910&#123; &quot;compilerOptions&quot;:&#123; &quot;baseUrl&quot;: &quot;./&quot;, &quot;paths&quot;:&#123; &quot;@/*&quot;:[ &quot;src/*&quot; ] &#125; &#125;&#125; 配置路由 page文件夹放置路由组件&lt;Outlet/&gt;,或navigate&#x3D;useNavigate()，调用navigate()函数 router文件夹配置路由 createBrowserRouter index.js 提供路由 &lt;RouterProvider router=&#123;router&#125;/&gt; 获取parameter 123456789navigate(&#x27;/article?id=1001&#x27;)const [params] = useSearchParams()let id = params.get(&#x27;id&#x27;)path:&#x27;/article/:id/:name&#x27;navigate(&#x27;/article/1001/jack&#x27;)const params = useParams()let id = params.id 关联远程github项目git init git add . git commit -m “项目初始化” git remote add origin https://github.com/hzx-bit/react-jike.git git push –set-upstream origin master 封装request请求模块 在utils文件夹中新建request.js文件 12345678910111213141516171819202122232425262728293031323334353637383940//axios封装处理import axios from &quot;axios&quot;;//1.根域名配置//2.超时时间//3.请求拦截器 响应拦截器const request = axios.create(&#123; baseURL: &#x27;http://geek.itheima.net/v1_0&#x27;, timeout: 5000&#125;)// 添加请求拦截器//在请求发送之前 做拦截 处理参数request.interceptors.request.use((config)=&gt; &#123; const token = getToken() if(token)&#123; config.headers.Authorization = `Bearer $&#123;token&#125;` &#125; return config &#125;, (error)=&gt; &#123; return Promise.reject(error)&#125;)// 添加响应拦截器request.interceptors.response.use((response)=&gt; &#123; // 2xx 范围内的状态码都会触发该函数。 // 对响应数据做点什么 return response.data &#125;, (error)=&gt; &#123; // 超出 2xx 范围的状态码都会触发该函数。 // 对响应错误做点什么 //监控401 token失效 if(error.response.status === 401)&#123; removeToken() router.navigate(&#x27;/login&#x27;) window.location.reload() &#125; return Promise.reject(error)&#125;)export &#123;request&#125; 在utils文件夹中新建index.js文件，统一中转工具模块函数 1234import &#123; request &#125; from &quot;./request&quot;;export&#123; request&#125; 使用Redux管理token12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152//token.jsconst TOKENKEY = &#x27;token_key&#x27;function setToken(token)&#123; localStorage.setItem(TOKENKEY,token)&#125;function getToken()&#123; return localStorage.getItem(TOKENKEY)&#125;function removeToken()&#123; localStorage.removeItem(TOKENKEY)&#125;export&#123; setToken, getToken, removeToken&#125;//user.js//和用户相关的状态管理import &#123; request &#125; from &quot;@/utils&quot;;import &#123; createSlice &#125; from &quot;@reduxjs/toolkit&quot;;import &#123; setToken as _setToken,getToken &#125; from &quot;@/utils&quot;;const userStore = createSlice(&#123; name:&#x27;user&#x27;, initialState:&#123; token:getToken()||&#x27;&#x27; &#125;, reducers:&#123; setToken(state,action)&#123; state.token = action.payload _setToken(action.payload) &#125; &#125;&#125;)//解构出actionCreaterconst &#123;setToken&#125; = userStore.actionsconst reducer = userStore.reducerconst fetchLogin = (loginForm)=&gt;&#123; return async(dispatch)=&gt;&#123; const res = await request.post(&#x27;/authorizations&#x27;,loginForm) dispatch(setToken(res.data.token)) &#125;&#125;export &#123;fetchLogin&#125;export default reducer 根据Token控制路由跳转123456789101112131415161718192021//AuthRoute.jsimport &#123; getToken &#125; from &quot;@/utils&quot;import &#123; Navigate &#125; from &quot;react-router-dom&quot;function AuthRoute(&#123;children&#125;)&#123; const token = getToken() if(token)&#123; return &lt;&gt;&#123;children&#125;&lt;/&gt; &#125; else return &lt;Navigate to=&#123;&#x27;/login&#x27;&#125; replace/&gt;&#125;export default AuthRoute//配置router&#123; path:&#x27;/&#x27;, element:&lt;AuthRoute&gt;&lt;Layout/&gt;&lt;/AuthRoute&gt;&#125; echartsnpm i echarts 123456789101112131415161718192021222324252627282930313233343536373839import * as echarts from &#x27;echarts&#x27;import &#123; useEffect, useRef &#125; from &#x27;react&#x27;const Home = ()=&gt;&#123; const chartRef = useRef(null) useEffect(()=&gt;&#123; //1. 获取渲染图表的dom节点 const chartDom = chartRef.current //2. 图表初始化生成图表实例对象 const myChart = echarts.init(chartDom) //3. 准备图表参数 const option = &#123; xAxis: &#123; type: &#x27;category&#x27;, data: [&#x27;Vue&#x27;, &#x27;React&#x27;, &#x27;Angular&#x27;] &#125;, yAxis: &#123; type: &#x27;value&#x27; &#125;, series: [ &#123; data: [10,40,70], type: &#x27;bar&#x27; &#125; ] &#125;; //使用图表参数完成图表渲染 option &amp;&amp; myChart.setOption(option); &#125;,[]) return ( &lt;div&gt; //确保节点具有宽高 &lt;div ref=&#123;chartRef&#125; style=&#123;&#123;width:&#x27;500px&#x27;,height:&#x27;400px&#x27;&#125;&#125;&gt;&lt;/div&gt; &lt;/div&gt; ) apis文件夹封装函数1234567891011121314151617181920212223//user.js//用户相关的所有请求const &#123; request &#125; = require(&quot;@/utils&quot;);//1. 用户登录function loginAPI(formData)&#123; return request(&#123; url:&#x27;/authorizations&#x27;, method:&#x27;POST&#x27;, data:formData &#125;)&#125;function getProfileAPI()&#123; return request(&#123; url:&#x27;/user/profile&#x27;, method:&#x27;GET&#x27; &#125;)&#125;export &#123;loginAPI,getProfileAPI&#125; 富文本编辑器npm i &#x72;&#x65;&#x61;&#99;&#116;&#45;&#113;&#117;&#105;&#x6c;&#108;&#x40;&#x32;&#x2e;&#48;&#x2e;&#x30;&#45;&#98;&#101;&#x74;&#x61;&#46;&#50; 123456789101112131415161718192021222324import ReactQuill from &#x27;react-quill&#x27;import &#x27;react-quill/dist/quill.snow.css&#x27;const Publish = () =&gt; &#123; return ( // ... &lt;Form labelCol=&#123;&#123; span: 4 &#125;&#125; wrapperCol=&#123;&#123; span: 16 &#125;&#125; &gt; &lt;Form.Item label=&quot;内容&quot; name=&quot;content&quot; rules=&#123;[&#123; required: true, message: &#x27;请输入文章内容&#x27; &#125;]&#125; &gt; &lt;ReactQuill className=&quot;publish-quill&quot; theme=&quot;snow&quot; placeholder=&quot;请输入文章内容&quot; /&gt; &lt;/Form.Item&gt; &lt;/Form&gt; )&#125; 刷新页面window.location.reload() 项目打包 npm run build serve -s build 路由懒加载12const Home = lazy(()=&gt;import(&quot;@/pages/Home&quot;))&lt;Suspense fallback=&#123;&#x27;加载中&#x27;&#125;&gt;&lt;Home/&gt;&lt;/Suspense&gt; 包体积可视化分析 npm i source-map-explore package.json中配置 1234567&quot;scripts&quot;: &#123; &quot;start&quot;: &quot;craco start&quot;, &quot;build&quot;: &quot;craco build&quot;, &quot;test&quot;: &quot;craco test&quot;, &quot;eject&quot;: &quot;react-scripts eject&quot;, &quot;analyze&quot;:&quot;source-map-explorer &#x27;build/static/js/*.js&#x27;&quot;&#125;, npm run analyze CDN优化 CDN是一种内容分发网络服务，当用户请求网站内容时，由离用户最近的服务器将缓存的资源内容传递给用户 体积较大的非业务js文件，比如react、react-dom可以放到CDN服务器 体积较大，需要利用CDN文件在浏览器的缓存特性，加快加载时间 非业务JS文件，不需要经常做变动，CDN不用频繁更新缓存 具体做法 把需要做CDN缓存的文件排除在打包之外 以CDN的方式重新引入资源 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950//craco.config.js// 添加自定义对于webpack的配置const path = require(&#x27;path&#x27;)const &#123; whenProd, getPlugin, pluginByName &#125; = require(&#x27;@craco/craco&#x27;)module.exports = &#123; // webpack 配置 webpack: &#123; // 配置别名 alias: &#123; // 约定：使用 @ 表示 src 文件所在路径 &#x27;@&#x27;: path.resolve(__dirname, &#x27;src&#x27;) &#125;, // 配置webpack // 配置CDN configure: (webpackConfig) =&gt; &#123; let cdn whenProd(() =&gt; &#123; // key: 不参与打包的包(由dependencies依赖项中的key决定) // value: cdn文件中 挂载于全局的变量名称 为了替换之前在开发环境下 webpackConfig.externals = &#123; react: &#x27;React&#x27;, &#x27;react-dom&#x27;: &#x27;ReactDOM&#x27; &#125; // 配置现成的cdn资源地址 // 实际开发的时候 用公司自己花钱买的cdn服务器 cdn = &#123; js: [ &#x27;https://cdnjs.cloudflare.com/ajax/libs/react/18.1.0/umd/react.production.min.js&#x27;, &#x27;https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.1.0/umd/react-dom.production.min.js&#x27;, ] &#125; &#125;) // 通过 htmlWebpackPlugin插件 在public/index.html注入cdn资源url const &#123; isFound, match &#125; = getPlugin( webpackConfig, pluginByName(&#x27;HtmlWebpackPlugin&#x27;) ) if (isFound) &#123; // 找到了HtmlWebpackPlugin的插件 match.options.files = cdn &#125; return webpackConfig &#125; &#125;&#125; 12345678//index.html&lt;body&gt; &lt;div id=&quot;root&quot;&gt;&lt;/div&gt; &lt;!-- 加载第三发包的 CDN 链接 --&gt; &lt;% htmlWebpackPlugin.options.files.js.forEach(cdnURL =&gt; &#123; %&gt; &lt;script src=&quot;&lt;%= cdnURL %&gt;&quot;&gt;&lt;/script&gt; &lt;% &#125;) %&gt;&lt;/body&gt;","categories":[{"name":"项目","slug":"项目","permalink":"http://example.com/categories/%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"react","slug":"react","permalink":"http://example.com/tags/react/"}]},{"title":"react","slug":"react","date":"2024-09-16T02:24:16.000Z","updated":"2024-11-14T11:38:25.747Z","comments":true,"path":"2024/09/16/react/","permalink":"http://example.com/2024/09/16/react/","excerpt":"","text":"跨域代理配置 npm install http-proxy-middleware –save npm install axios 新建setupProxy.js文件 123456789101112const &#123; createProxyMiddleware &#125; = require(&#x27;http-proxy-middleware&#x27;); module.exports = function (app) &#123; app.use( &#x27;/api1&#x27;, createProxyMiddleware(&#123; target: &#x27;http://localhost:5000&#x27;, changeOrigin: true, pathRewrite:&#123;&#x27;^/api1&#x27;:&#x27;&#x27;&#125; &#125;) );&#125;; 发布订阅 npm install pubsub-js –save 123456import PubSub from &#x27;pubsub-js&#x27;//引入PubSub.publish(&#x27;atguigu&#x27;,&#123;isFirst:false,isLoading:true&#125;)//发布this.token = PubSub.subscribe(&#x27;atguigu&#x27;,(_,data)=&gt;&#123; this.setState(data); &#125;)//订阅PubSub.unsubscribe(this.token);//取消订阅 fetch123456789async()=&gt;&#123; try&#123; const response = await fetch(`/api1/search/user2?q=$&#123;KeyWord&#125;`); const data = await response.json(); console.log(data); &#125;catch(error)&#123; console.log(&#x27;请求出错&#x27;,error); &#125;&#125; lodash（排序）12import _ from &#x27;lodash&#x27;_.orderBy(list,&#x27;key&#x27;,&#x27;desc&#x27;); classNames（高亮切换）123import classNames from &#x27;classnames&#x27;&lt;className=&#123;classNames(&#x27;normal-style&#x27;,&#123;&#x27;active&#x27;:type===item.type&#125;)&#125;&gt;&lt;className=&#123;classNames(&#x27;normal-style&#x27;,type===item.type&amp;&amp;&#x27;active&#x27;)&#125;&gt; uuid12import &#123; v4 as uuidv4 &#125; from &#x27;uuid&#x27;;uuidv4(); dayjs12import dayjs from &#x27;dayjs&#x27;dayjs().format(); useRef123456789import &#123;useRef&#125; from &#x27;react&#x27;const inputRef = useRef(null);&lt;input type=&quot;text&quot; ref=&#123;inputRef&#125;/&gt;inputRef.current//拿到节点 跨级传递信息1234//封装上下文对象给生产者和消费者//MsgContext.jsimport &#123;createContext&#125; from &#x27;react&#x27;export default const MsgContext = createContext() 12345678910//顶层组件import MsgContext from &#x27;./MsgContext.js&#x27;&lt;MsgContext.Provider value=&#123;&#x27;this is a msg&#x27;&#125;&gt; &lt;Component/&gt;&lt;/MsgContext.Provider&gt;//底层组件import &#123;useContext&#125; from &#x27;react&#x27;import MsgContext from &#x27;./MsgContext.js&#x27;const msg = useContext(MsgContext); useEffect 无参：初始和更新 空数组：初始 依赖项：初始和依赖项发生变化 返回的函数在组件销毁时调用 1234567891011121314151617import &#123;useEffect,useState&#125; from &#x27;react&#x27;const URL=&#x27;http://geek.itheima.net/v1_0/channels&#x27;const [list, setList] = useState([]); useEffect(()=&gt;&#123; async function getList() &#123; const res =await fetch(URL); const jsonRes =await res.json(); setList(jsonRes.data.channels); &#125; getList(); const timer = setInterval(()=&gt;&#123; console.log(&#x27;............&#x27;) &#125;,1000) return ()=&gt;&#123; clearInterval(timer) &#125; &#125;,[]); json-server npm install json-server 根目录下新建db.json 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&#123; &quot;posts&quot;: [ &#123; &quot;id&quot;: 1, &quot;title&quot;: &quot;json-server&quot;, &quot;author&quot;: &quot;typicode&quot; &#125; ], &quot;comments&quot;: [ &#123; &quot;id&quot;: 1, &quot;body&quot;: &quot;some comment&quot;, &quot;postId&quot;: 1 &#125; ], &quot;profile&quot;: &#123; &quot;name&quot;: &quot;typicode&quot; &#125;, &quot;list&quot;:[ &#123; &quot;rpid&quot;: 3, &quot;user&quot;: &#123; &quot;uid&quot;: &quot;13258165&quot;, &quot;avatar&quot;: &quot;https://tse3-mm.cn.bing.net/th/id/OIP-C.FY7sfLpXX6K8x4SfSxFA0gHaHa?w=200&amp;h=199&amp;c=7&amp;r=0&amp;o=5&amp;dpr=2&amp;pid=1.7&quot;, &quot;uname&quot;: &quot;周杰伦&quot; &#125;, &quot;content&quot;: &quot;哎哟，不错哦&quot;, &quot;ctime&quot;: &quot;10-18 08:15&quot;, &quot;like&quot;: 99 &#125;, &#123; &quot;rpid&quot;: 2, &quot;user&quot;: &#123; &quot;uid&quot;: &quot;36080105&quot;, &quot;avatar&quot;: &quot;https://tse4-mm.cn.bing.net/th/id/OIP-C.B7PjPsZql8BH1LLnLZawvgAAAA?w=195&amp;h=195&amp;c=7&amp;r=0&amp;o=5&amp;dpr=2&amp;pid=1.7&quot;, &quot;uname&quot;: &quot;许嵩&quot; &#125;, &quot;content&quot;: &quot;我寻你千百度 日出到迟暮&quot;, &quot;ctime&quot;: &quot;11-13 11:29&quot;, &quot;like&quot;: 88 &#125;, &#123; &quot;rpid&quot;: 1, &quot;user&quot;: &#123; &quot;uid&quot;: &quot;30009257&quot;, &quot;avatar&quot;: &quot;https://tse3-mm.cn.bing.net/th/id/OIP-C.FY7sfLpXX6K8x4SfSxFA0gHaHa?w=200&amp;h=199&amp;c=7&amp;r=0&amp;o=5&amp;dpr=2&amp;pid=1.7&quot;, &quot;uname&quot;: &quot;黑马前端&quot; &#125;, &quot;content&quot;: &quot;学前端就来黑马&quot;, &quot;ctime&quot;: &quot;10-19 09:00&quot;, &quot;like&quot;: 66 &#125; ]&#125; package.json 配置 1&quot;serve&quot;: &quot;json-server db.json --port 3004&quot; npm run serve Redux npm i @reduxjs&#x2F;toolkit react-redux Store（仓库）： Store 是应用程序状态的中央存储库。它包含了整个应用程序的状态树，即一个 JavaScript 对象。Redux 规定了应用程序状态只能通过 Store 来管理和修改，确保了状态的单一数据源。通过 createStore 函数来创建 Store。 Action（动作）： Action 是描述发生了什么事件的普通 JavaScript 对象。它们是将数据从应用程序传递到 Store 的唯一方式。每个 Action 都必须包含一个 type 属性，表示动作的类型，以及可选的 payload 属性，用于传递数据。Action 只用于描述事件，不进行状态的修改。 Reducer（归纳器）： Reducer 是一个纯函数，用于定义应用程序状态的修改方式。Reducer 接收当前状态和一个 Action，根据 Action 的类型来返回一个新的状态。Redux 应用程序通常包含多个 Reducer，每个 Reducer 负责管理状态树的一部分。Reducer 应当保持纯净，不应该产生副作用。 Dispatch（分发）： Dispatch 是一个函数，用于将 Action 发送到 Store，以便触发状态的修改。当组件需要修改应用程序的状态时，它会创建一个 Action 并将其分发到 Store。Dispatch 将 Action 发送给 Reducer，Reducer 根据 Action 的类型来更新状态。 Middleware（中间件）： Middleware 是 Redux 的一个扩展点，用于在 Action 发送到 Reducer 之前或之后执行额外的逻辑。例如，可以使用 Middleware 来处理异步操作、记录日志、路由导航等。Redux 提供了一些内置的 Middleware，也可以编写自定义 Middleware。 Selectors（选择器）： 选择器是用于从应用程序状态中提取数据的函数。它们可以帮助组件获取所需的状态，同时封装了状态的结构和访问方式。Selectors 有助于减少组件对状态的直接依赖，提高代码的可维护性。 在modules文件夹下创建不同的store切片，每个store有自己的name、initialState和reducers，reducers有管理状态的方法（与actions同名）。从store中解构出actions和reducer并导出 在index.js中导入reducer，配置store中的reducer &lt;Provider store=&#123;store&#125;&gt;包裹根节点 在App.js中用useSelector取出数据，用useDispatch产生dispatch函数，导入actions，需要时调用dispatch（action) antd-mobile npm install antd-mobile Ant Design Mobile useReducer123456789101112131415161718192021222324252627282930313233343536// 定义reducerimport &#123; useReducer &#125; from &#x27;react&#x27;// 1. 根据不同的action返回不同的新状态function reducer(state, action) &#123; console.log(&#x27;reducer执行了&#x27;) switch (action.type) &#123; case &#x27;INC&#x27;: return state + 1 case &#x27;DEC&#x27;: return state - 1 case &#x27;UPDATE&#x27;: return state + action.payload default: return state &#125;&#125;function App() &#123; // 2. 使用useReducer分派action const [state, dispatch] = useReducer(reducer, 0) return ( &lt;&gt; &#123;/* 3. 调用dispatch函数传入action对象 触发reducer函数，分派action操作，使用新状态更新视图 */&#125; &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: &#x27;DEC&#x27; &#125;)&#125;&gt;-&lt;/button&gt; &#123;state&#125; &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: &#x27;INC&#x27; &#125;)&#125;&gt;+&lt;/button&gt; &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: &#x27;UPDATE&#x27;, payload: 100 &#125;)&#125;&gt; update to 100 &lt;/button&gt; &lt;/&gt; )&#125;export default App useMemo使用场景：缓存性能消耗大的计算 1234567891011121314151617181920212223242526272829import &#123; useMemo, useState &#125; from &#x27;react&#x27;function fib (n) &#123; console.log(&#x27;计算函数执行了&#x27;) if (n &lt; 3) return 1 return fib(n - 2) + fib(n - 1)&#125;function App() &#123; const [count, setCount] = useState(0) // 计算斐波那契之和 // const sum = fib(count) // 通过useMemo缓存计算结果，只有count发生变化时才重新计算 const sum = useMemo(() =&gt; &#123; return fib(count) &#125;, [count]) const [num, setNum] = useState(0) return ( &lt;&gt; &#123;sum&#125; &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;+count:&#123;count&#125;&lt;/button&gt; &lt;button onClick=&#123;() =&gt; setNum(num + 1)&#125;&gt;+num:&#123;num&#125;&lt;/button&gt; &lt;/&gt; )&#125;export default App React.memo作用：允许组件在props没有改变的情况下跳过重新渲染 机制：只有props发生变化时才重新渲染下面的子组件通过 memo 进行包裹之后，返回一个新的组件MemoSon, 只有传给MemoSon的props参数发生变化时才会重新渲染 12345678910111213141516171819import React, &#123; useState &#125; from &#x27;react&#x27;const MemoSon = React.memo(function Son() &#123; console.log(&#x27;子组件被重新渲染了&#x27;) return &lt;div&gt;this is span&lt;/div&gt;&#125;)function App() &#123; const [, forceUpdate] = useState() console.log(&#x27;父组件重新渲染了&#x27;) return ( &lt;&gt; &lt;MemoSon /&gt; &lt;button onClick=&#123;() =&gt; forceUpdate(Math.random())&#125;&gt;update&lt;/button&gt; &lt;/&gt; )&#125;export default App props变化重新渲染1234567891011121314151617181920import React, &#123; useState &#125; from &#x27;react&#x27;const MemoSon = React.memo(function Son() &#123; console.log(&#x27;子组件被重新渲染了&#x27;) return &lt;div&gt;this is span&lt;/div&gt;&#125;)function App() &#123; console.log(&#x27;父组件重新渲染了&#x27;) const [count, setCount] = useState(0) return ( &lt;&gt; &lt;MemoSon count=&#123;count&#125; /&gt; &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;+&#123;count&#125;&lt;/button&gt; &lt;/&gt; )&#125;export default App 对于props的比较，进行的是‘浅比较’，底层使用 Object.is 进行比较，针对于对象数据类型，只会对比俩次的引用是否相等，如果不相等就会重新渲染，React并不关心对象中的具体属性 useCallback缓存函数 useCallback缓存之后的函数可以在组件渲染时保持引用稳定，也就是返回同一个引用 12345678910111213141516171819202122232425// useCallBackimport &#123; memo, useCallback, useState &#125; from &#x27;react&#x27;const MemoSon = memo(function Son() &#123; console.log(&#x27;Son组件渲染了&#x27;) return &lt;div&gt;this is son&lt;/div&gt;&#125;)function App() &#123; const [, forceUpate] = useState() console.log(&#x27;父组件重新渲染了&#x27;) const onGetSonMessage = useCallback((message) =&gt; &#123; console.log(message) &#125;, []) return ( &lt;div&gt; &lt;MemoSon onGetSonMessage=&#123;onGetSonMessage&#125; /&gt; &lt;button onClick=&#123;() =&gt; forceUpate(Math.random())&#125;&gt;update&lt;/button&gt; &lt;/div&gt; )&#125;export default App forwardRef作用：允许组件使用ref将一个DOM节点暴露给父组件 12345678910111213141516171819202122import &#123; forwardRef, useRef &#125; from &#x27;react&#x27;const MyInput = forwardRef(function Input(props, ref) &#123; return &lt;input &#123;...props&#125; type=&quot;text&quot; ref=&#123;ref&#125; /&gt;&#125;, [])function App() &#123; const ref = useRef(null) const focusHandle = () =&gt; &#123; console.log(ref.current.focus()) &#125; return ( &lt;div&gt; &lt;MyInput ref=&#123;ref&#125; /&gt; &lt;button onClick=&#123;focusHandle&#125;&gt;focus&lt;/button&gt; &lt;/div&gt; )&#125;export default App useImperativeHandle作用：如果我们并不想暴露子组件中的DOM而是想暴露子组件内部的方法 12345678910111213141516171819202122232425262728293031import &#123; forwardRef, useImperativeHandle, useRef &#125; from &#x27;react&#x27;const MyInput = forwardRef(function Input(props, ref) &#123; // 实现内部的聚焦逻辑 const inputRef = useRef(null) const focus = () =&gt; inputRef.current.focus() // 暴露子组件内部的聚焦方法 useImperativeHandle(ref, () =&gt; &#123; return &#123; focus, &#125; &#125;) return &lt;input &#123;...props&#125; ref=&#123;inputRef&#125; type=&quot;text&quot; /&gt;&#125;)function App() &#123; const ref = useRef(null) const focusHandle = () =&gt; ref.current.focus() return ( &lt;div&gt; &lt;MyInput ref=&#123;ref&#125; /&gt; &lt;button onClick=&#123;focusHandle&#125;&gt;focus&lt;/button&gt; &lt;/div&gt; )&#125;export default App ZustandZustand Documentation store&#x2F;index.js - 创建store1234567891011121314import &#123; create &#125; from &#x27;zustand&#x27;//1. 使用create方法创建store//2. 函数参数必须返回一个对象，包含状态数据和方法//3. set是用来修改数据的专门方法const useStore = create((set) =&gt; &#123; return &#123; count: 0, inc: () =&gt; &#123; set(state =&gt; (&#123; count: state.count + 1 &#125;)) &#125; &#125;&#125;)export default useStore app.js - 绑定组件12345678import useStore from &#x27;./store/useCounterStore.js&#x27;function App() &#123; const &#123; count, inc &#125; = useStore() return &lt;button onClick=&#123;inc&#125;&gt;&#123;count&#125;&lt;/button&gt;&#125;export default App 异步支持对于异步操作的支持不需要特殊的操作，直接在函数中编写异步逻辑，最后把接口的数据放到set函数中返回即可 store&#x2F;index.js - 创建store1234567891011121314151617181920import &#123; create &#125; from &#x27;zustand&#x27;const URL = &#x27;http://geek.itheima.net/v1_0/channels&#x27;const useStore = create((set) =&gt; &#123; return &#123; count: 0, ins: () =&gt; &#123; return set(state =&gt; (&#123; count: state.count + 1 &#125;)) &#125;, channelList: [], fetchChannelList: async () =&gt; &#123; const res = await fetch(URL) const jsonData = await res.json() set(&#123;channelList: jsonData.data.channels&#125;) &#125; &#125;&#125;)export default useStore app.js - 绑定组件1234567891011121314151617181920import &#123; useEffect &#125; from &#x27;react&#x27;import useChannelStore from &#x27;./store/channelStore&#x27;function App() &#123; const &#123; channelList, fetchChannelList &#125; = useChannelStore() useEffect(() =&gt; &#123; fetchChannelList() &#125;, [fetchChannelList]) return ( &lt;ul&gt; &#123;channelList.map((item) =&gt; ( &lt;li key=&#123;item.id&#125;&gt;&#123;item.name&#125;&lt;/li&gt; ))&#125; &lt;/ul&gt; )&#125;export default App 切片模式场景：当我们单个store比较大的时候，可以采用一种切片模式进行模块拆分再组合 拆分并组合切片1234567891011121314151617181920212223242526272829import &#123; create &#125; from &#x27;zustand&#x27;// 创建counter相关切片const createCounterStore = (set) =&gt; &#123; return &#123; count: 0, setCount: () =&gt; &#123; set(state =&gt; (&#123; count: state.count + 1 &#125;)) &#125; &#125;&#125;// 创建channel相关切片const createChannelStore = (set) =&gt; &#123; return &#123; channelList: [], fetchGetList: async () =&gt; &#123; const res = await fetch(URL) const jsonData = await res.json() set(&#123; channelList: jsonData.data.channels &#125;) &#125; &#125;&#125;// 组合切片const useStore = create((...a) =&gt; (&#123; ...createCounterStore(...a), ...createChannelStore(...a)&#125;)) 组件使用123456789101112131415function App() &#123; const &#123;count, inc, channelList, fetchChannelList &#125; = useStore() return ( &lt;&gt; &lt;button onClick=&#123;inc&#125;&gt;&#123;count&#125;&lt;/button&gt; &lt;ul&gt; &#123;channelList.map((item) =&gt; ( &lt;li key=&#123;item.id&#125;&gt;&#123;item.name&#125;&lt;/li&gt; ))&#125; &lt;/ul&gt; &lt;/&gt; )&#125;export default App 对接DevTools 简单的调试我们可以安装一个 名称为 simple-zustand-devtools 的调试工具 安装调试包1npm i simple-zustand-devtools -D 配置调试工具123456789101112131415import create from &#x27;zustand&#x27;// 导入核心方法import &#123; mountStoreDevtool &#125; from &#x27;simple-zustand-devtools&#x27;// 省略部分代码...// 开发环境开启调试if (process.env.NODE_ENV === &#x27;development&#x27;) &#123; mountStoreDevtool(&#x27;channelStore&#x27;, useChannelStore)&#125;export default useChannelStore","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"react","slug":"react","permalink":"http://example.com/tags/react/"}]},{"title":"landscape","slug":"landscape","date":"2024-09-15T13:50:48.000Z","updated":"2024-09-16T02:32:03.725Z","comments":true,"path":"2024/09/15/landscape/","permalink":"http://example.com/2024/09/15/landscape/","excerpt":"","text":"","categories":[{"name":"照片","slug":"照片","permalink":"http://example.com/categories/%E7%85%A7%E7%89%87/"}],"tags":[{"name":"风景","slug":"风景","permalink":"http://example.com/tags/%E9%A3%8E%E6%99%AF/"}]},{"title":"我的第一篇博客","slug":"myFirstBlog","date":"2024-09-14T16:00:00.000Z","updated":"2024-09-15T10:22:39.218Z","comments":true,"path":"2024/09/15/myFirstBlog/","permalink":"http://example.com/2024/09/15/myFirstBlog/","excerpt":"","text":"2024.9.15,重新搭建博客网站，用来记录日常和学习笔记。。。","categories":[{"name":"随笔","slug":"随笔","permalink":"http://example.com/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[]}],"categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"文摘","slug":"文摘","permalink":"http://example.com/categories/%E6%96%87%E6%91%98/"},{"name":"项目","slug":"项目","permalink":"http://example.com/categories/%E9%A1%B9%E7%9B%AE/"},{"name":"随笔","slug":"随笔","permalink":"http://example.com/categories/%E9%9A%8F%E7%AC%94/"},{"name":"照片","slug":"照片","permalink":"http://example.com/categories/%E7%85%A7%E7%89%87/"}],"tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"name":"《围城》","slug":"《围城》","permalink":"http://example.com/tags/%E3%80%8A%E5%9B%B4%E5%9F%8E%E3%80%8B/"},{"name":"es6","slug":"es6","permalink":"http://example.com/tags/es6/"},{"name":"Eslint","slug":"Eslint","permalink":"http://example.com/tags/Eslint/"},{"name":"面试八股","slug":"面试八股","permalink":"http://example.com/tags/%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1/"},{"name":"vue","slug":"vue","permalink":"http://example.com/tags/vue/"},{"name":"node.js","slug":"node-js","permalink":"http://example.com/tags/node-js/"},{"name":"数据库","slug":"数据库","permalink":"http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"linux","slug":"linux","permalink":"http://example.com/tags/linux/"},{"name":"vue3","slug":"vue3","permalink":"http://example.com/tags/vue3/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://example.com/tags/JavaScript/"},{"name":"css","slug":"css","permalink":"http://example.com/tags/css/"},{"name":"git","slug":"git","permalink":"http://example.com/tags/git/"},{"name":"react","slug":"react","permalink":"http://example.com/tags/react/"},{"name":"《我与地坛》","slug":"《我与地坛》","permalink":"http://example.com/tags/%E3%80%8A%E6%88%91%E4%B8%8E%E5%9C%B0%E5%9D%9B%E3%80%8B/"},{"name":"风景","slug":"风景","permalink":"http://example.com/tags/%E9%A3%8E%E6%99%AF/"}]}